<?php
/*
$Id: octophpus-1.3.0.php,v 1.3.0 2011/11/28 22:47:09 evolya Exp $

OctoPHPus - Automating software build process tool for PHP

Copyright (c) 2011 evolya.fr

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you have any questions or comments, please email:

contact@evolya.fr
http://octophpus.evolya.fr/
*/
define('OCTOPHPUS_VERSION', '1.3.0');
?>
<?php interface OctoPHPusListener {public function octophpusConsoleEvent($message);}class OctoPHPusStore {protected $id;protected $data;public function __construct($id, $data) {$this->id = $id;$this->data = $data;}public function getStoreID() {return $this->id;}public function getData() {return $this->data;}public function getDataType() {if (is_object($this->data)) {return get_class($this->data);}return gettype($this->data);}}final class OctoPHPusTaskHelper {private $main;private $buildfile;private $maintarget;private $currenttarget;private $task;private $taskname;private $xml;public function __construct(OctoPHPus $main, $buildfile, $maintarget, $currenttarget, $task, $taskname, $xml) {$this->main = $main;$this->buildfile = $buildfile;$this->maintarget = $maintarget;$this->currenttarget = $currenttarget;$this->task = $task;$this->taskname = $taskname;$this->xml = $xml;}public function getProjectName() {return $this->main->getProjectName();}public function getBuildFilePath() {return $this->buildfile;}public function getProperties() {return $this->main->getProperties();}public function getProperty($name) {return $this->main->getProperty($name);}public function setProperty($name, $value) {$this->main->setProperty($name, $value);}public function applyPropertiesReplace($str, $date=false) {return $this->main->applyPropertiesReplace($str, $date);}public function getArguments() {return $this->main->getArguments();}public function getMainTargetName() {return $this->maintarget;}public function getCurrentTargetName() {return $this->currenttarget;}public function getCurrentTaskName() {return $this->taskname;}public function getCurrentTask() {return $this->task;}public function getXMLTaskDefinition() {return $this->xml;}public function outputInfo($string) {$this->main->broadcastTaskMessage($string, $this->taskname);}public function outputWarning($string) {$this->main->broadcastTaskMessage('WARNING: '.$string, $this->taskname);}public function outputError($string) {$this->main->broadcastTaskMessage('ERROR: '.$string, $this->taskname);}public function outputException(Exception $ex) {$this->main->broadcastTaskMessage('ERROR: Exception '.get_class($ex).' with message "'.$ex->getMessage(), $this->taskname);$this->main->broadcastTaskMessage('StackTraces: '.$ex->getTraceAsString(), $this->taskname);}public function saveStore(OctoPHPusStore $store) {$this->main->saveStore($store);}public function storeExists($id) {return $this->main->storeExists($id);}public function getStore($id) {return $this->main->getStore($id);}public static function xml_attribute(SimpleXMLElement $object, $attribute) {if (isset($object[$attribute])) return (string) $object[$attribute];return null;}public static function clean_path($path, $windows=false) {if (!isset($path) || !$path || empty($path)) return '';$path = str_replace('\\', '/', $path);while (strpos($path, '//') !== false) {$path = str_replace('//', '/', $path);}if ($windows) {$path = str_replace('/', '\\', $path);}return $path;}}interface OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper);public function getTaskCommand();}define('OCTOPHPUS_TASK_INTERFACE', 'OctoPHPusTask');final class OctoPHPus {private static $tasks = array();private static $tasksNamesMaxLength = 7;private static $commandPattern = '/^[a-z0-9\-_]+$/i';private $project = null;private $projectName = null;private $properties = array();private $listeners = array();private $stores = array();private $executedTargets = array();private $cli = false;private $args = array();private $buildxml = null;public function __construct() {$this->cli = strtoupper(PHP_SAPI) == 'CLI';}public static function installTask($class) {if (!class_exists($class)) {throw new Exception("Class not found: $class");}$task = new $class();if (!($task instanceof OctoPHPusTask)) {throw new Exception("Class '$class' must implements '".OCTOPHPUS_TASK_INTERFACE."'");}$command = $task->getTaskCommand();if (!preg_match(self::$commandPattern, $command)) {throw new Exception('Invalid command name ('.$command.'), for '.$class);}if (array_key_exists($command, self::$tasks)) {throw new Exception('Task '.get_class(self::$tasks[$command]).' allready use command "'.$command.'", for '.$class);}self::$tasks[$command] = $class;self::$tasksNamesMaxLength = max(self::$tasksNamesMaxLength, strlen($command));}public function getProjectName() {return $this->projectName;}public function getProperties() {return $this->properties;}public function getProperty($name) {if (!isset($name) || !is_string($name)) return null;return array_key_exists($name, $this->properties) ? $this->properties[$name] : null;}public function setProperty($name, $value) {if (!isset($name) || !is_string($name)) return;$this->properties[$name] = $value;}public function addListener(OctoPHPusListener $listener) {$this->listeners[] = $listener;}public function getTargetsInBuildXML($path) {if (!isset($path)) {$this->broadcastConsole('Usage: <buildfile>');return array();}if ($this->init($path) !== 0) return null;$r = array();foreach ($this->project->children() as $prop) {if ($prop->getName() == 'target') {$name = self::xml_attribute($prop, 'name');if (!$name) {continue;}$desc = self::xml_attribute($prop, 'description');if (!$desc) $desc = '';if (self::xml_attribute($prop, 'display') != 'none') {$r[$name] = $this->applyPropertiesReplace($desc);}}}return $r;}public function executeBuildXML($path, $target=null, $verbose=true) {if (!isset($path)) {$this->broadcastConsole('Usage: [buildfile] [target]');return -2;}if ($this->init($path) !== 0) {return -3;}$this->args = array();if (empty($target) || !is_string($target)) {$target = self::xml_attribute($this->project, 'default');}else {$this->args = explode(' ', $target);$target = array_shift($this->args);}$this->executedTargets = array();if ($verbose) {$this->broadcastConsole('Buildfile: '.$path);$time = microtime(true);}if ($this->findTargetAndExecute($target)) {if ($verbose) {$this->broadcastConsole("\nTotal time: ".round(microtime(true) - $time, 2).' sec');$this->broadcastConsole("BUILD SUCCESSFUL");$time = microtime(true);}return 0;}else {if ($verbose) {$this->broadcastConsole("\nBUILD FAILED");}return -1;}}private function init($path) {$this->project = null;$this->projectName = null;$this->properties = array();if (!is_file($path)) {$this->broadcastConsole('Error: build file not found ('.$path.'), please use path relative to "'.str_replace('\\', '/', realpath('.')).'/"');return -1;}$ct = @file_get_contents($path);if ($ct === false) {$this->broadcastConsole('Error: unable to get file contents ('.$path.')');return -2;}$xml = @simplexml_load_string($ct);if (!$xml || get_class($xml) != 'SimpleXMLElement') {$this->broadcastConsole('Error: unable to parse XML document, invalid document ('.$path.')');return -3;}if ($xml->getName() != 'project') {$this->broadcastConsole('Error: project element not found ('.$path.')');return -4;}$this->project = $xml;$this->projectName = self::xml_attribute($xml, 'name');$this->buildxml = $path;$this->handleProperties();return 0;}public static final function xml_attribute(SimpleXMLElement $object, $attribute) {if (isset($object[$attribute])) return (string) $object[$attribute];return null;}private function handleProperties() {foreach ($this->project->property as $prop) {$name = self::xml_attribute($prop, 'name');if (!$name) continue;$value = self::xml_attribute($prop, 'value');$value = $this->applyPropertiesReplace($value);$this->properties[$name] = $value;}}public function applyPropertiesReplace($str, $date=false) {$str = "$str";$str = str_replace('${project.dir}', dirname($this->buildxml) . '/', $str);$str = str_replace('${workspace.dir}', dirname(__FILE__) . '/', $str);foreach ($this->properties as $k => $v) {$str = str_replace('${'.$k.'}', $v, $str);}if ($date) {$tokens = array('d', 'D', 'j', 'l', 'N', 'S', 'w', 'z', 'W', 'F', 'm', 'M','n', 't', 'L', 'o', 'Y', 'y', 'a', 'A', 'B', 'g', 'G', 'h','H', 'i', 's', 'u', 'e', 'I', 'O', 'P', 'T', 'Z', 'c', 'r', 'U');foreach ($tokens as $token) {$str = str_replace('${date-'.$token.'}', date($token), $str);}}$str = str_replace('${argc}', sizeof($this->args), $str);$str = str_replace('${args}', implode(' ', $this->args), $str);foreach ($this->args as $n => $arg) {$str = str_replace('${argv.'.$n.'}', $arg, $str);}return $str;}private function findTargetAndExecute($target, $force=false) {if (!$this->project) {return false;}if (!$force && in_array($target, $this->executedTargets)) {return true;}foreach ($this->project->target as $tg) {if (self::xml_attribute($tg, 'name') == $target) {$this->executedTargets[] = $target;if (!$this->executeTarget($target, $tg)) {return false;}return true;}}$this->broadcastConsole("\n".'ERROR: target "'.$target.'" not found in buildfile.');return false;}private function executeTarget($name, SimpleXMLElement $target) {$depends = self::xml_attribute($target, 'depends');if ($depends != null) {$depends = explode(',', $depends);foreach ($depends as $d) {$d = trim($d);if (empty($d)) continue;if ($d == $name) {$this->broadcastConsole("\n".'ERROR: target "'.$name.'" depends on itself.');return false;}if (!$this->findTargetAndExecute($d)) {return false;}}}$this->broadcastConsole("\n".$name.':');$children = $target->children();$done = array();foreach ($children as $k => $task) {if (in_array($task->getName(), $done)) { continue;}else {$done[] = $task->getName();}if (!$this->handleTask($task, $name)) {$this->broadcastTaskMessage('TASK FAILED', $task->getName());return false;}}return true;}private function handleTask(SimpleXMLElement $task, $target) {switch ($task->getName()) {case 'echo' :return $this->handleEcho($task, $target);break;case 'delete' :return $this->handleDelete($task, $target);break;case 'mkdir' :return $this->handleMkdir($task, $target);break;case 'sleep' :return $this->handleSleep($task, $target);break;case 'eval' :return $this->handleEval($task, $target);break;case 'include' :return $this->handleInclude($task, $target);break;case 'copy' :return $this->handleCopy($task, $target);break;case 'run' :return $this->handleRun($task, $target);break;case 'propertiesfile' :return $this->handlePropertiesFile($task, $target);break;case 'exec' :return $this->handleExec($task, $target);break;case 'buffer' :return $this->handleBuffer($task, $target);break;default :if (array_key_exists($task->getName(), self::$tasks)) {$class = self::$tasks[$task->getName()];$executor = new $class();$helper = $this->createTaskHelper($target, $executor, $task->getName(), $task);return $executor->handleOctophpusTask($helper);}$this->broadcastConsole("\n".'ERROR: unknown task "'.$task->getName().'"');$r = false;break;}return false;}private function createTaskHelper($target, OctoPHPusTask $task=null, $taskname, SimpleXMLElement $xml=null) {return new OctoPHPusTaskHelper($this,null, null, $target,$task,$taskname,$xml);}public function getArguments() {return $this->args;}private function handleRun(SimpleXMLElement $task, $target) {$buildFile = self::xml_attribute($task, 'buildFile');if ($buildFile) {$buildFile = $this->applyPropertiesReplace($buildFile);$buildFile = OctoPHPusTaskHelper::clean_path($buildFile);if (!file_exists($buildFile)) {$this->broadcastTaskMessage('ERROR: build file not found "'.$buildFile.'"', 'execute');return false;}}$target = self::xml_attribute($task, 'target');if (!$target) {$this->broadcastTaskMessage('ERROR: no "target" attribute', 'execute');return false;}$target = $this->applyPropertiesReplace($target);$includePath = self::xml_attribute($task, 'includePath');if ($includePath) {$includePath = $this->applyPropertiesReplace($includePath);@set_include_path(get_include_path() . PATH_SEPARATOR . $includePath);}if (!$buildFile) {$this->broadcastTaskMessage('Target: '.$target, 'execute');return $this->findTargetAndExecute($target);}else {$this->broadcastTaskMessage('Target: "'.$target.'" in "'.$buildFile.'"', 'execute');$o = new OctoPHPus();foreach ($this->listeners as $listener) {$o->addListener($listener);}try {return $o->executeBuildXML($buildFile, $target, false) === 0;} catch (Exception $ex) {$this->broadcastTaskMessage('ERROR: exception thrown in "execute" task in build file "'.$buildFile.'" with target "'.$target.'"', 'execute');$this->broadcastTaskMessage('  Exception '.get_class($ex).' with message "'.$ex->getMessage(), 'execute');$this->broadcastTaskMessage('  StackTraces: '.$ex->getTraceAsString(), 'execute');return false;}}return false;}private function handleBuffer(SimpleXMLElement $task, $target) {$buffer = '';foreach ($task->children() as $child) {$name = $child->getName();if ($name == 'replace') {$search = self::xml_attribute($child, 'search');$replace = $this->applyPropertiesReplace(self::xml_attribute($child, 'replace'));$buffer = str_replace($search, $replace, $buffer);continue;}$tmp = '';if ($name != 'append' && $name != 'prepend') continue;$readfile = self::xml_attribute($child, 'readfile');if ($readfile) {$readfile = $this->applyPropertiesReplace($readfile);$tmp = file_get_contents($readfile);if (!$tmp) {$this->broadcastTaskMessage('Error: unable to read file "'.$readfile.'"', 'buffer');return false;}}else {$tmp = $this->applyPropertiesReplace("$child", true);}if ($name == 'append') {$buffer .= $tmp;}else {$buffer = $tmp . $buffer;}unset($tmp, $readfile);}$size = strlen($buffer);$this->broadcastTaskMessage('Buffer created, size= '.$size .' o', 'buffer');$outputfile = self::xml_attribute($task, 'outputfile');if ($size > 0 && $outputfile) {$outputfile = OctoPHPusTaskHelper::clean_path($this->applyPropertiesReplace($outputfile));if (file_put_contents($outputfile, $buffer)) {$this->broadcastTaskMessage('Buffer stored in file: '.$outputfile, 'buffer');}else {$this->broadcastTaskMessage('ERROR: unable to save file "'.$outputfile.'"', 'buffer');}}$store = self::xml_attribute($task, 'store');if ($store) {$store = $this->applyPropertiesReplace($store);$this->saveStore($store, $buffer);}return true;}private function handleExec(SimpleXMLElement $task, $target) {$executable = self::xml_attribute($task, 'executable');if (!$executable || $executable == 'cmd') {$executable = 'cmd';}else {$executable = $this->applyPropertiesReplace($executable);$executable = OctoPHPusTaskHelper::clean_path($executable);$executable2 = realpath($executable);if (!is_file($executable2)) {$this->broadcastTaskMessage('ERROR: executable file not found ('.$executable.')', 'exec');return false;}}$executable = $this->applyPropertiesReplace($executable);$osfamily = self::xml_attribute($task, 'osfamily');if ($osfamily) {$osfamily = strtolower($osfamily);if (in_array($osfamily, array('win', 'winnt', 'windows', 'win32', 'win64'))) {if (PHP_SHLIB_SUFFIX != 'dll') {return true;}}if (in_array($osfamily, array('linux', 'unix'))) {if (PHP_SHLIB_SUFFIX != 'so') {return true;}}if (in_array($osfamily, array('max', 'maxos'))) {if (stristr(PHP_OS, 'darwin') || stristr(PHP_OS, 'mac')) {return true;}}}$failonerror = self::xml_attribute($task, 'failonerror') == 'true';$output = self::xml_attribute($task, 'output');$dir = self::xml_attribute($task, 'dir');if ($dir) {$dir = $this->applyPropertiesReplace($dir);$dir = OctoPHPusTaskHelper::clean_path($dir);$dir2 = realpath($dir);if (!is_dir($dir2)) {$this->broadcastTaskMessage('ERROR: execution directory not found ('.$dir.')', 'exec');return false;}}if (ini_get('safe_mode')) {}$cmd = $executable == 'cmd' ? '' : escapeshellcmd($executable);foreach ($task->arg as $arg) {if (empty($cmd)) {$cmd .= $this->applyPropertiesReplace(self::xml_attribute($arg, 'value'));}else {if (self::xml_attribute($arg, 'escape') != "false") {$cmd .= ' ' . escapeshellarg($this->applyPropertiesReplace(self::xml_attribute($arg, 'value')));}else {$cmd .= ' ' . $this->applyPropertiesReplace(self::xml_attribute($arg, 'value'));}}}if ($dir) {$cmd = 'cd '.escapeshellarg($dir).' | '.$cmd;}$outputdata = array();$return = null;$this->broadcastTaskMessage('Execute: '.$cmd, 'exec');@exec($cmd, $outputdata, $return);if ($return !== 0) {$this->broadcastTaskMessage(($failonerror ? 'ERROR' : 'WARNING').': execution return an error ('.$return.')', 'exec');$this->broadcastTaskMessage('Ouput: '.implode(PHP_EOL, $outputdata), 'exec');if ($failonerror) {return false;}}else if ($output == 'std') {$pad = PHP_EOL . str_repeat(' ', self::$tasksNamesMaxLength + 4);$this->broadcastTaskMessage('Output:' . $pad . implode($pad, $outputdata), 'exec');}else if ($output) {if (file_put_contents($output, "".implode(PHP_EOL, $outputdata), FILE_APPEND) === false) {$this->broadcastTaskMessage('ERROR: unable to write data in output file "'.$output.'"', 'exec');}}return true;}private function handlePropertiesFile(SimpleXMLElement $task, $target) {$file = self::xml_attribute($task, 'file');if (!$file) {$this->broadcastTaskMessage('ERROR: no "file" attribute', 'propertiesfile');return false;}$file = $this->applyPropertiesReplace($file);$file = OctoPHPusTaskHelper::clean_path($file);$file2 = realpath($file);if (!is_file($file2)) {$this->broadcastTaskMessage('ERROR: source file not found ('.$file.')', 'propertiesfile');return false;}$ct = @file_get_contents($file2);if (!$ct) {$this->broadcastTaskMessage('ERROR: unable to read properties file ('.$file.')', 'propertiesfile');return false;}$keyChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_~+&()[]';$key = null;$value = null;$saved = 0;$ct = explode(PHP_EOL, $ct);foreach ($ct as $line) {if (substr($line, 0, 1) == '#' || substr($line, 0, 1) == '!') {continue;}$line = trim($line);if ($key != null) {$value .= $line;}else {for ($i = 0; $i < strlen($line); $i++) {$c = substr($line, $i, 1);if ($value === null) {if ($c == '\\') {if (substr($line, $i + 1, 1) == ' ') {$key .= ' ';}else {$this->broadcastTaskMessage('WARNING: syntax error in properties file [1]', 'propertiesfile');$key = null;$value = null;continue;}}else if ($c == ' ') {continue;}else if ($c == ':' || $c == '=') {$value = '';}else if (strpos($keyChars, $c) === false) {$this->broadcastTaskMessage('WARNING: syntax error in properties file [2]', 'propertiesfile');$key = null;$value = null;continue;}else {$key .= $c;}}else {$value .= $c;}}}if (substr($line, -1) == '\\') {$value = substr($value, 0, -1);continue;}$key = trim($key);$value = trim($value);$this->properties[$key] = $this->applyPropertiesReplace($value);$saved++;$key = null;$value = null;}$this->broadcastTaskMessage('Loaded properties file: '.$file2.' ('.$saved.')', 'propertiesfile');return true;}private function handleCopy(SimpleXMLElement $task, $target) {$srcfile = self::xml_attribute($task, 'srcfile');if ($srcfile) {$srcfile = $this->applyPropertiesReplace($srcfile);$srcfile = OctoPHPusTaskHelper::clean_path($srcfile);$srcfile2 = realpath($srcfile);if (!is_file($srcfile2)) {$this->broadcastTaskMessage('ERROR: source file not found ('.$srcfile.')', 'copy');return false;}$srcfile2 = OctoPHPusTaskHelper::clean_path($srcfile2);$destdir = self::xml_attribute($task, 'destdir');if (!$destdir) {$this->broadcastTaskMessage('ERROR: no "destdir" attribute', 'include');return false;}$destdir = $this->applyPropertiesReplace($destdir);$destdir = OctoPHPusTaskHelper::clean_path($destdir);$destdir2 = realpath($destdir);if (!is_dir($destdir)) {$this->broadcastTaskMessage('ERROR: destination directory not found ('.$destdir.')', 'copy');return false;}$newname = self::xml_attribute($task, 'newname');if (!$newname) $newname = basename($srcfile);if (@copy($srcfile2, $destdir2.'/'.$newname)) {$this->broadcastTaskMessage('Copy file: "'.$srcfile2.'" -> "'.OctoPHPusTaskHelper::clean_path($destdir2.'/'.$newname).'"', 'copy');}else {$this->broadcastTaskMessage('ERROR: unable to copy file: "'.$srcfile2.'" -> "'.OctoPHPusTaskHelper::clean_path($destdir2.'/'.$newname).'"', 'copy');}return true;}else {$this->broadcastTaskMessage('ERROR: no "srcfile" attribute', 'include');return false;}return false;}private function handleInclude(SimpleXMLElement $task, $target) {$file = self::xml_attribute($task, 'file');if (!$file) {$this->broadcastTaskMessage('ERROR: no "file" attribute', 'include');return false;}$file = $this->applyPropertiesReplace($file);$file = OctoPHPusTaskHelper::clean_path($file);if (!is_file($file)) {$this->broadcastTaskMessage('ERROR: file not found ('.$file.')', 'include');return false;}$once = self::xml_attribute($task, 'once') == 'false' ? false : true;$verbose = self::xml_attribute($task, 'verbose') == 'false' ? false : true;if ($verbose) {$this->broadcastTaskMessage('Include'.($once ? ' once' : '').' file: '.$file, 'include');}$helper = $this->createTaskHelper($target, null, $task->getName(), $task);foreach ($task->children() as $action) {if ($action->getName() == 'property') {$name = self::xml_attribute($action, 'name');$value = self::xml_attribute($action, 'value');if (!$name) {$this->broadcastTaskMessage('ERROR: no "name" attribute in action "'.$action->getName().'"', 'include');return false;}$name = $this->applyPropertiesReplace($name);if ($value === null) {$this->broadcastTaskMessage('ERROR: no "value" attribute in action "'.$action->getName().'"', 'include');return false;}if (strtolower($value) == 'true') $value = true;else if (strtolower($value) == 'false') $value = false;else if (strtolower($value) == 'null') $value = null;else if (ctype_digit($value)) $value = intval($value);else if (is_numeric($value)) $value = floatval($value);else $value = $this->applyPropertiesReplace($value);${$name} = $value;}else {$this->broadcastTaskMessage('ERROR: unknown action "'.$action->getName().'"', 'include');return false;}}$includePath = self::xml_attribute($task, 'includePath');if ($includePath) {$includePath = $this->applyPropertiesReplace($includePath);@set_include_path(get_include_path() . PATH_SEPARATOR . $includePath);}unset($action, $name, $value);if ($once) {require_once  $file;}else {require_once  $file;}return true;}private function handleEval(SimpleXMLElement $task, $target) {$code = (string) $task;if (empty($code)) {$this->broadcastTaskMessage('ERROR: empty string to eval', 'eval');return false;}$errorLevel = error_reporting();$ob = @ob_start();eval($code);$buf = @ob_get_contents();@ob_end_clean();error_reporting($errorLevel);if (!empty($buf)) {if (strpos(strtolower($buf), 'error') !== false) {$this->broadcastTaskMessage('ERROR: '.trim(strip_tags($buf)), 'eval');return false;}$this->broadcastTaskMessage("\n".$buf, 'eval');}return true;}private function handleMkdir(SimpleXMLElement $task, $target) {$dir = self::xml_attribute($task, 'dir');if ($dir) {$dir = $this->applyPropertiesReplace($dir);$dir = OctoPHPusTaskHelper::clean_path($dir);return $this->mkdir($dir);}return false;}private function mkdir($pathname) {if (is_dir($pathname) && file_exists($pathname)) {return true;}if (dirname($pathname) != $pathname && dirname($pathname) != '.') {if (!$this->mkdir(dirname($pathname))) {return false;}}if (!mkdir($pathname)) {$this->broadcastTaskMessage('ERROR: unable to create dir "'.$pathname.'"', 'mkdir');return false;}else {$this->broadcastTaskMessage('Created dir:  '.$pathname, 'mkdir');}return true;}private function rmdir($dir) {$dir = str_replace('\\', '/', $dir);if (substr($dir, -1) == '/') {$dir = substr($dir, 0, -1);}if (!is_dir($dir)) {return true;}$files = array();if ($handle = @opendir($dir)) {while (false !== ($file = @readdir($handle))) {if ($file != '.' && $file != '..') {$files[] = $dir.'/'.$file;}}}else {$this->broadcastTaskMessage('ERROR: unable to open dir "'.$dir.'"', 'delete');return false;}@closedir($handle);foreach ($files as $file) {if (is_dir($file)) {$this->rmdir($file);}else {if (@unlink($file)) {$this->broadcastTaskMessage('Deleted file: '.$file, 'delete');}else {$this->broadcastTaskMessage('ERROR: unable to delete file "'.$file.'"', 'delete');}}}if (is_dir($dir)) {if (@rmdir($dir)) {$this->broadcastTaskMessage('Deleted dir:  '.$dir, 'delete');}else {$this->broadcastTaskMessage('ERROR: unable to delete dir "'.$dir.'"', 'delete');}}return true;}private function handleDelete(SimpleXMLElement $task, $target) {$f = self::xml_attribute($task, 'dir');if ($f) {$f = $this->applyPropertiesReplace($f);$f = OctoPHPusTaskHelper::clean_path($f);return $this->rmdir($f);}$f = self::xml_attribute($task, 'file');if ($f) {$f = $this->applyPropertiesReplace($f);$f = OctoPHPusTaskHelper::clean_path($f);if (!is_file($f)) {return true;}else if (@unlink($f)) {$this->broadcastTaskMessage('Deleted file: '.$f, 'delete');return true;}else {return false;}}return false;}private function handleEcho(SimpleXMLElement $task, $target) {$message = self::xml_attribute($task, 'message');if (!$message) {$message = (string) $task;}$message = $this->applyPropertiesReplace($message);$this->broadcastTaskMessage($message, 'echo');return true;}private function handleSleep(SimpleXMLElement $task, $target) {$microsec = self::xml_attribute($task, 'microsec');$microsec = intval($microsec);if ($microsec > 0) {$this->broadcastTaskMessage('Sleep '.round($microsec / 1000000, 3).' sec...', 'sleep');usleep($microsec);return true;}return false;}public function saveStore(Store $store) {$this->stores[$store->getStoreID()] = $store;}public function storeExists($id) {return array_key_exists($id, $this->stores);}public function getStore($id) {return $this->storeExists($id) ? $this->stores[$id] : null;}protected function broadcastConsole($message) {if ($this->cli) {$message = strip_tags($message);}foreach ($this->listeners as $l) {try {$l->octophpusConsoleEvent($message);} catch (Exception $ex) {$l->octophpusConsoleEvent('!! Exception on event broadcast: '.(string) $ex);}}}public function broadcastTaskMessage($message, $taskname) {$this->broadcastConsole(str_pad('['.$taskname.']', self::$tasksNamesMaxLength+3, ' ', STR_PAD_LEFT) . ' ' . $message);}public static function getTasksNamesMaxLength() {return self::$tasksNamesMaxLength;}} ?><?php class PHPBuilderTask implements OctoPHPusTask {protected $helper = null;protected $verbose = true;protected $statement = true;protected $pack = false;protected $includePaths = array();protected $allreadyIncluded = array();protected $files_to_include = array();protected $files_to_exclude = array();protected $prependText = '';protected $contents = '';protected $appendText = '';protected $phpVersionRequired = 3.0;public function __construct() {}public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$this->contents = '';$this->helper = $helper;$task = $helper->getXMLTaskDefinition();$destfile = OctoPHPusTaskHelper::xml_attribute($task, 'destfile');if (!$destfile) {$helper->outputError('property "destfile" not found');return false;}$destfile = $helper->applyPropertiesReplace($destfile);$destfile = OctoPHPusTaskHelper::clean_path($destfile);$this->pack = OctoPHPusTaskHelper::xml_attribute($task, 'pack') == 'true' ? true : false;$includePath = OctoPHPusTaskHelper::xml_attribute($task, 'includePath');$this->includePath = $includePath ? explode(PATH_SEPARATOR, $includePath) : array();$this->verbose = OctoPHPusTaskHelper::xml_attribute($task, 'verbose') == 'false' ? false : true;$this->statement = OctoPHPusTaskHelper::xml_attribute($task, 'statement') == 'true' ? true : false;foreach ($task->children() as $action) {switch ($action->getName()) {case 'includefile' :$file = OctoPHPusTaskHelper::xml_attribute($action, 'file');if (!$file) {$helper->outputError('property "file" not found in action "includefile"');return false;}$file = $helper->applyPropertiesReplace($file);$file = OctoPHPusTaskHelper::clean_path($file);if (!is_file($file)) {$helper->outputError('file to include not found: '.$file);return false;}$file = realpath($file);if (!$file) {$helper->outputError('unable to get real path of file "'.$file.'" in action "includefile"');return false;}$followincludes = OctoPHPusTaskHelper::xml_attribute($action, 'followincludes') == 'true' ? true : false;$includePath = OctoPHPusTaskHelper::xml_attribute($action, 'includePath');$this->includePath = $includePath ? array_merge($this->includePath, explode(PATH_SEPARATOR, $includePath)) : $this->includePath;$this->files_to_include[] = array($file, $followincludes);break;case 'excludefile' :$file = OctoPHPusTaskHelper::xml_attribute($action, 'file');if (!$file) {$helper->outputError('property "file" not found in action "excludefile"');return false;}$file = $helper->applyPropertiesReplace($file);$file = OctoPHPusTaskHelper::clean_path($file);if (realpath($file) != false) {$file = realpath($file);}$rewrite = OctoPHPusTaskHelper::xml_attribute($action, 'rewrite');if ($rewrite === '0') {$rewrite = false;}else if (!$rewrite) {$rewrite = $file;}else {$rewrite = $helper->applyPropertiesReplace($rewrite);}$this->files_to_exclude[$this->helper->clean_path($file)] = $rewrite;break;case 'appendtext' :$this->appendText .= (string) $action;break;case 'prependtext' :$this->prependText .= (string) $action;break;default :$helper->outputError('unknown action "'.$action->getName().'"');return false;}}return $this->execute($destfile);}protected function execute($destfile) {foreach ($this->files_to_include as $k => $file) {$tmp = $this->includeFile($file[0], $file[1]);if ($tmp !== false && $tmp !== null) {$this->contents .= $tmp;}else return false;}if (!@file_put_contents($destfile,$this->helper->applyPropertiesReplace($this->prependText, true).$this->contents.$this->helper->applyPropertiesReplace($this->appendText, true))) {$this->helper->outputError('unable to write compiled sources in: '.$destfile);return false;}else {$this->helper->outputInfo('Write compiled sources: '.$destfile);$this->helper->outputInfo('Minimum required PHP version for using this build: '.$this->phpVersionRequired);}$this->contents = '';return true;}protected function includeFile($filepath, $followIncludes, $level=1) {$filepath = $this->helper->clean_path($filepath);$contents = @file_get_contents($filepath);if (!$contents) {$this->helper->outputError('Unable to read file: '.$filepath);return false;}$contents = trim($contents);$tokens = token_get_all(trim($contents));if (!is_array($tokens) || empty($tokens)) {$this->helper->outputWarning('Invalid file: '.$filepath);continue;}if ($level > 1 && $this->statement) {$start = array_shift($tokens);if (@$start[0] != T_OPEN_TAG) {array_unshift($tokens, $start);if ($level > 1) {array_unshift($tokens, array(T_CLOSE_TAG, ' ?>', 0));}}$end = array_pop($tokens);if (@$end[0] != T_CLOSE_TAG) {array_push($tokens, $end);if ($level > 1) {array_push($tokens, array(T_OPEN_TAG, '<?php ', 0));}}}if ($this->verbose) {$this->helper->outputInfo(str_repeat(' ', $level) . 'Included: '.$filepath);}$includeContents = '';$tmp = '';$include = null;$includeError = false;$includeHere = false;$func = null; $var = null; foreach ($tokens as $token) {if (is_array($token)) {list($type, $code, $line) = $token;if ($include !== null) {if ($type == T_CONSTANT_ENCAPSED_STRING) {if ($includeError) {$include .= $code;}else {$include .= substr($code, 1, -1);}continue;}else if ($type == T_WHITESPACE) {$include .= ' ';continue;}else {$this->helper->outputWarning(str_repeat(' ', $level) . 'Unable to solve include in "'.$filepath.'" line '.$line.' : invalid dynamic token "'.$code.'"');$includeError = true;$include .= $code;continue;}}if ($type == T_OPEN_TAG) {$tmp .= '<?php ';continue;}else if ($type == T_CLOSE_TAG) {$tmp .= ' ?>';continue;}if ($type == T_INCLUDE_ONCE || $type == T_REQUIRE || $type == T_REQUIRE_ONCE) {$include = '';$includeError = false;$includeHere = false;continue;}if ($type == T_REQUIRE || $type == T_INCLUDE) {$include = '';$includeError = false;$includeHere = true;continue;}if (($type == T_COMMENT || $type == T_DOC_COMMENT) && $this->pack) {continue;}if ($type == T_WHITESPACE && $this->pack) {if ($code == ' ') $tmp .= $code;continue;}$tmp .= $code;if ($type != T_WHITESPACE) {$func = ($type == T_FUNCTION) ? $token : null;$var = ($type == T_VARIABLE) ? $token : null;}}else {if ($include !== null) {$func = null;$var = null;if ($token == ';') {if ($includeError) {$tmp .= 'require_once '.$include.';';}else {$include = trim($include);if (substr($include, 0, 1) == '(' && substr($include, -1) == ')') {$include = substr($include, 1, -1);}while (substr($include, 0, 1) == '.') {$include = substr($include, 1);}$testinclude = $include;if (!is_file($testinclude)) {$testinclude = dirname($filepath) . '/' . $include;}if (!is_file($testinclude)) {foreach ($this->includePath as $path) {$testinclude = $this->helper->applyPropertiesReplace($path) . '/' . $include;if (is_file($testinclude)) {$include = $testinclude;break;}}}if (!is_file($testinclude)) {$this->helper->outputError(str_repeat(' ', $level) . 'Unable to find file "'.$include.'", included in "'.$filepath.'"');return false;}$include = realpath($testinclude);if (!$include) {$this->helper->outputError(str_repeat(' ', $level) . 'Unable to solve real path of file "'.$include.'", included in "'.$filepath.'"');return false;}$include = $this->helper->clean_path($include);if (in_array($include, $this->allreadyIncluded)) {$include = null;continue;}$this->allreadyIncluded[] = $include;foreach ($this->files_to_exclude as $ex => $rewrite) {if ($ex == $include || $ex == substr($include, -1 * strlen($ex))) {if ($rewrite !== false && $rewrite !== '0' && $rewrite != 'false' && $rewrite != 'none') {$tmp .= "require_once '".$rewrite."';";}else {}$this->helper->outputInfo(str_repeat(' ', $level) . 'Excluded: '.$include.($rewrite === false ? ' (rewrite=0)' : ''));$include = null;break;}}if ($include == null) continue;$r = $this->includeFile($include, $followIncludes, $level+1);if ($r === false) return false;else if ($r !== null) {if ($this->statement || $includeHere) {$tmp .= $r;}else {$includeContents .= $r;}}unset($r);}$include = null;continue;}$include .= $token;continue;}else if ($token == '(' && $func != null) {$this->setPHPRequiredVersion(5.3, 'Closure line '.$func[2]);}else if ($token == '(' && $var != null) {$this->setPHPRequiredVersion(5.3, 'Closure line '.$var[2]);}$func = null;$var = null;$tmp .= $token;}$this->updatePHPRequiredVersion($token);}unset($contents, $tokens, $token, $type, $code, $line);return $includeContents.$tmp;}protected function updatePHPRequiredVersion($token) {if (is_array($token)) {switch ($token[0]) {case T_CLASS_C :case T_FUNC_C :$this->setPHPRequiredVersion(4.3, $token);break;case T_ABSTRACT :case T_CATCH :case T_CLONE :case T_FINAL :case T_IMPLEMENTS :case T_INSTANCEOF :case T_INTERFACE :case T_METHOD_C :case T_PRIVATE :case T_PUBLIC :case T_PROTECTED :case T_THROW :case T_TRY :case T_UNSET_CAST :$this->setPHPRequiredVersion(5.0, $token);break;case T_HALT_COMPILER :$this->setPHPRequiredVersion(5.1, $token);break;case T_DIR :case T_NAMESPACE :case T_NS_C :case T_NS_SEPARATOR :case T_USE :case T_GOTO :$this->setPHPRequiredVersion(5.3, $token);case T_STRING :switch ($token[1]) {case 'Exception' :case 'gc_enable' :case '__get' :case '__set' :case '__call' :case '__clone' :case '__sleep' :case '__wakeup' :case '__toString' :case '__invoke' : $this->setPHPRequiredVersion(5.0, $token);break;case 'SimpleXML' :case '__set_state' :$this->setPHPRequiredVersion(5.1, $token);break;case 'forward_static_call' :case 'get_called_class' :case '__callStatic()' :$this->setPHPRequiredVersion(5.3, $token);break;}break;}}}protected function setPHPRequiredVersion($version, $token=null) {if ($version > $this->phpVersionRequired) {$this->phpVersionRequired = $version;}if ($this->verbose && $version > 5) {if ($token == null) {return;}else if (is_array($token)) {if ($token[0] != T_NS_SEPARATOR) {$this->helper->outputInfo(' * Required version: '.$version.' (token '.token_name($token[0]).' "'.$token[1].'" line '.$token[2].')');}}else {$this->helper->outputInfo(' * Required version: '.$version.' ('.$token.')');}}}public function getTaskCommand() {return 'compile';}} ?><?php if (!class_exists('class zipfile')) {class zipfile{var $datasec= array();var $ctrl_dir= array();var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";var $old_offset= 0;function unix2DosTime($unixtime = 0) {$timearray = ($unixtime == 0) ? getdate() : getdate($unixtime);if ($timearray['year'] < 1980) {$timearray['year']= 1980;$timearray['mon']= 1;$timearray['mday']= 1;$timearray['hours']= 0;$timearray['minutes'] = 0;$timearray['seconds'] = 0;} return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) |($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);} function addFile($data, $name, $time = 0){$name= str_replace('\\', '/', $name);$dtime= dechex($this->unix2DosTime($time));$hexdtime = '\x' . $dtime[6] . $dtime[7]. '\x' . $dtime[4] . $dtime[5]. '\x' . $dtime[2] . $dtime[3]. '\x' . $dtime[0] . $dtime[1];eval('$hexdtime = "' . $hexdtime . '";');$fr= "\x50\x4b\x03\x04";$fr.= "\x14\x00";$fr.= "\x00\x00";$fr.= "\x08\x00";$fr.= $hexdtime;$unc_len = strlen($data);$crc= crc32($data);$zdata= gzcompress($data);$zdata= substr(substr($zdata, 0, strlen($zdata) - 4), 2); $c_len= strlen($zdata);$fr.= pack('V', $crc);$fr.= pack('V', $c_len);$fr.= pack('V', $unc_len);$fr.= pack('v', strlen($name));$fr.= pack('v', 0);$fr.= $name;$fr .= $zdata;$this -> datasec[] = $fr;$cdrec = "\x50\x4b\x01\x02";$cdrec .= "\x00\x00";$cdrec .= "\x14\x00";$cdrec .= "\x00\x00";$cdrec .= "\x08\x00";$cdrec .= $hexdtime;$cdrec .= pack('V', $crc);$cdrec .= pack('V', $c_len);$cdrec .= pack('V', $unc_len);$cdrec .= pack('v', strlen($name)); $cdrec .= pack('v', 0);$cdrec .= pack('v', 0);$cdrec .= pack('v', 0);$cdrec .= pack('v', 0);$cdrec .= pack('V', 32);$cdrec .= pack('V', $this -> old_offset); $this -> old_offset += strlen($fr);$cdrec .= $name;$this -> ctrl_dir[] = $cdrec;} function file(){$data= implode('', $this -> datasec);$ctrldir = implode('', $this -> ctrl_dir);return$data .$ctrldir .$this -> eof_ctrl_dir .pack('v', sizeof($this -> ctrl_dir)) .pack('v', sizeof($this -> ctrl_dir)) .pack('V', strlen($ctrldir)) .pack('V', strlen($data)) ."\x00\x00";} } } ?><?php class PHPZipTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$task = $helper->getXMLTaskDefinition();$verbose = OctoPHPusTaskHelper::xml_attribute($task, 'verbose') == 'true';$destfile = OctoPHPusTaskHelper::xml_attribute($task, 'destfile');if (!$destfile) {$helper->outputError('no destination file');return false;}$destfile = $helper->applyPropertiesReplace($destfile);$zip = new zipfile();foreach ($task->children() as $sub) {if ($sub->getName() == 'addfile') {$this->addFile($helper,OctoPHPusTaskHelper::xml_attribute($sub, 'src'),OctoPHPusTaskHelper::xml_attribute($sub, 'to'),$zip,$verbose);}else if ($sub->getName() == 'addfolder') {$this->addFolder($helper,OctoPHPusTaskHelper::xml_attribute($sub, 'src'),OctoPHPusTaskHelper::xml_attribute($sub, 'to'),$zip,$verbose);}else if ($sub->getName() == 'mkdir') {$dir = OctoPHPusTaskHelper::xml_attribute($sub, 'dir');if (!$dir) {$helper->outputError('missing "dir" attribute in "mkdir" action');return false;}$zip->addFile('',$dir . '/');}else {$helper->outputWarning('unknown action "'.$sub->getName().'"');}}$data = $zip->file();$helper->outputInfo('  Zipfile size: '. strlen($data) . ' o');$r = file_put_contents($destfile, $data);if (!$r) {$helper->outputError('unable to write zip file "'.$destfile.'"');return false;}$helper->outputInfo('  Created: '. OctoPHPusTaskHelper::clean_path($destfile));return true;}protected function addFolder($helper, $src, $to, $zip, $verbose) {if (!$src) {$helper->outputError('missing "src" attribute in "addfolder" action');return false;}$src = $helper->applyPropertiesReplace($src);if (!is_dir($src)) {$helper->outputError('folder not found "'.$src.'"');return false;}if (!$to) {$to = '';}$to = $to . '/' . basename($src);if ($handle = opendir($src)) {while (false !== ($file = readdir($handle))) {if ($file != '.' && $file != '..') {if (is_file("$src/$file")) {$this->addFile($helper, "$src/$file", "$to/$file", $zip, $verbose);}else if (is_dir("$src/$file")) {$this->addFolder($helper, "$src/$file", $to, $zip, $verbose);}}}@closedir($handle);}else {$helper->outputError('unable to read folder "'.$src.'"');return false;}return true;}protected function addFile($helper, $src, $to, $zip, $verbose=true) {if (!$src) {$helper->outputError('missing attribute "src" in action "addfile"');return false;}$src = $helper->applyPropertiesReplace($src);if (!is_file($src)) {$helper->outputError('file not found "'.$src.'" in action "addfile"');return false;}$ct = file_get_contents($src);if ($ct === false) {$helper->outputError('unable to read file "'.$src.'" in action "addfile"');return false;}if ($to) {$to = $helper->applyPropertiesReplace($to);$to = str_replace(array('${filename}', '${filepath}'),array(basename($src), $src),$to);}else {$to = basename($src);}if ($verbose) {$helper->outputInfo('  Add: ' . OctoPHPusTaskHelper::clean_path($src) . ' --> ' . $to);}$zip->addFile($ct, $to);return true;}public function getTaskCommand() {return 'zip';}} ?><?php class FTPConnexionStore extends OctoPHPusStore {public function __construct($id, $resource, $host, $port, $login) {$this->id = $id;$this->data =& $resource;$this->host = $host;$this->port = $port;$this->login = $login;}public function getResource() {return $this->data;}public function getHostName() {return $this->host;}public function getPort() {return $this->port;}public function getLogin() {return $this->login;}}class FTPTask implements OctoPHPusTask {protected static function ftp_listdir($resource, $dir) {@ftp_chdir($resource, '/');$files = @ftp_rawlist($resource, $dir, false);if (!is_array($files)) {return null;}$r = array();foreach ($files as $f) {$info = preg_split("/[\s]+/", $f, 9);if ($info[8] != '.' && $info[8] != '..') {$tmp = '/'.$dir.'/'.$info[8];while (strpos($tmp, '//') !== false) $tmp = str_replace('//', '/', $tmp);$r[] = array($info[8], $info[0]{0} == 'd', $tmp);unset($tmp);}}return $r;}protected static function ftp_mkdirs($resource, $dir, $chmod=null) {$dirs = explode('/', $dir);$path = '';@ftp_chdir($resource, '/');foreach ($dirs as $d) {if (empty($d)) continue;$path .= '/' . $d;if (!@ftp_chdir($resource, $path)) {@ftp_chdir($resource, '/');if (!@ftp_mkdir($resource, $path)) {return $path;}else if ($chmod) {@ftp_chmod($resource, intval($chmod), $path);}}}return true;}protected static function ftp_rmdir($resource, $dir) {if (!@ftp_chdir($resource, $dir)) {return array();}$files = self::ftp_listdir($resource, $dir);$r = array();foreach ($files as $f) {if ($f[1]) {$x = self::ftp_rmdir($resource, $f[2]);if (!is_array($x)) return $x;$r = array_merge($r, $x);unset($x);}else {if (!@ftp_delete($ftp, $f[2])) { return 'unable to delete file "'.$f[2].'"';}$r[] = $f[2];}}if (!@ftp_rmdir($resource, $dir)) {return 'unable to delete directory "'.$dir.'"';}$r[] = $dir;return $r;}public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$task = $helper->getXMLTaskDefinition();if (!extension_loaded('ftp')) {$helper->outputError('FTP extension is not loaded');return false;}$verbose = OctoPHPusTaskHelper::xml_attribute($task, 'verbose') == 'false' ? false : true;$keepalive = OctoPHPusTaskHelper::xml_attribute($task, 'keepalive') == 'true' ? true : false;$store = OctoPHPusTaskHelper::xml_attribute($task, 'usestore');if ($store) {if (!$helper->storeExists($store)) {$helper->outputError('store "'.$store.'" not found');return false;}$store = $helper->getStore($store);if (!($store instanceof FTPConnexionStore)) {$helper->outputError('store "'.$store.'" must be an instance of FTPConnexionStore');return false;}$host = $store->getHostName();$port = $store->getPort();$login = $store->getLogin();$ftp = $store->getResource();}else {$host = OctoPHPusTaskHelper::xml_attribute($task, 'host');if (!$host) {$helper->outputError('no "host" attribute supplied');return false;}$host = $helper->applyPropertiesReplace($host);$login = OctoPHPusTaskHelper::xml_attribute($task, 'login');if (!$login) {$helper->outputError('no "login" attribute supplied');return false;}$login = $helper->applyPropertiesReplace($login);$password = OctoPHPusTaskHelper::xml_attribute($task, 'password');if (!$password) {$helper->outputError('no "password" attribute supplied');return false;}$password = $helper->applyPropertiesReplace($password);$ssl = OctoPHPusTaskHelper::xml_attribute($task, 'ssl');$port = OctoPHPusTaskHelper::xml_attribute($task, 'port');if ($port) $port = intval($port);else $port = 21;$error = false;if ($ssl == 'true') {$ftp = @ftp_ssl_connect($host) or $error = true;}else {$ftp = @ftp_connect($host) or $error = true;}if ($error || $ftp === false) {$helper->outputError('unable to connect FTP server '.$host.($ssl == 'true' ? ' with SSL' : ''));return false;}if (!@ftp_login($ftp, $login, $password)) {$helper->outputError('unable to login FTP server '.$host);@ftp_close($ftp);return false;}$passive = OctoPHPusTaskHelper::xml_attribute($task, 'passive');if ($passive == 'true') {@ftp_pasv($ftp, true);}}$savestore = OctoPHPusTaskHelper::xml_attribute($task, 'savestore');if ($savestore) {$helper->saveStore(new FTPConnexionStore($savestore, $ftp, $host, $port, $login));}foreach ($task->children() as $action) {switch ($action->getName()) {case 'mkdir' :if (!$this->handleActionMkdir($ftp, $verbose, $action, $helper)) {@ftp_close($ftp);return false;}break;case 'delete' :if (!$this->handleActionDelete($ftp, $verbose, $action, $helper)) {@ftp_close($ftp);return false;}break;case 'put' :if (!$this->handleActionPut($ftp, $verbose, $action, $helper)) {@ftp_close($ftp);return false;}break;default :$helper->outputError('unknown action "'.$action->getName().'"');return false;}}if (!$savestore && !$keepalive) {$helper->outputInfo('Connexion closed');@ftp_close($ftp);}return true;}public function handleActionMkdir($ftp, $verbose, SimpleXMLElement $action, OctoPHPusTaskHelper $helper) {$dir = OctoPHPusTaskHelper::xml_attribute($action, 'dir');if (!$dir) {$helper->outputError('no "dir" attribute in action "mkdir"');return false;}$dir = $helper->applyPropertiesReplace($dir);$dir = OctoPHPusTaskHelper::clean_path($dir);$chmod = OctoPHPusTaskHelper::xml_attribute($action, 'chmod');$r = self::ftp_mkdirs($ftp, $dir, $chmod);if ($r !== true) {$helper->outputError('unable to create directory "'.$r.'" (target directory: '.$dir.') in action "mkdir"');return false;}if ($verbose) {$helper->outputInfo('Created remote dir: '.$dir);}return true;}public function handleActionDelete($ftp, $verbose, SimpleXMLElement $action, OctoPHPusTaskHelper $helper) {$remotefile = OctoPHPusTaskHelper::xml_attribute($action, 'remotefile');$remotedir = OctoPHPusTaskHelper::xml_attribute($action, 'remotedir');if ($remotedir) {$remotedir = $helper->applyPropertiesReplace($remotedir);$remotedir = OctoPHPusTaskHelper::clean_path($remotedir);$r = self::ftp_rmdir($ftp, $remotedir);if (!is_array($r)) {$helper->outputError('unable to delete remote dir "'.$remotedir.'" ('.$r.') in action "delete"');return false;}if ($verbose) {$helper->outputInfo('Deleted remote dir: '.$remotedir);}unset($r, $f);}else if ($remotefile) {$remotefile = $helper->applyPropertiesReplace($remotefile);$remotefile = OctoPHPusTaskHelper::clean_path($remotefile);if (strpos($remotefile, '*') || strpos($remotefile, '?')) {$files = self::ftp_listdir($ftp, dirname($remotefile));$pattern = basename($remotefile);foreach ($files as $f) {if (!$f[1] && fnmatch($pattern, $f[0])) {if (!@ftp_delete($ftp, $f[2])) {$helper->outputError('unable to delete file "'.$remotefile.'" in action "delete"');return false;}if ($verbose) {$helper->outputInfo('Deleted remote file: '.$f[2]);}}}unset($files, $pattern);if ($verbose) {$helper->outputInfo('Deleted remote files matching: '.$remotefile);}}else if (@ftp_size($ftp, $remotefile) != -1) {if (!@ftp_delete($ftp, $remotefile)) {$helper->outputError('unable to delete file "'.$remotefile.'" in action "delete"');return false;}if ($verbose) {$helper->outputInfo('Deleted remote file: '.$remotefile);}}}else {$helper->outputError('no "remotefile" or "remotedir" attribute in action "delete"');return false;}return true;}public function handleActionPut($ftp, $verbose, SimpleXMLElement $action, OctoPHPusTaskHelper $helper) {$localfile = OctoPHPusTaskHelper::xml_attribute($action, 'localfile');if ($localfile) {return $this->handleActionPutSingle($localfile, $ftp, $verbose, $action, $helper);}$localfilesmatch = OctoPHPusTaskHelper::xml_attribute($action, 'localfilesmatch');if ($localfilesmatch) {return $this->handleActionPutMatch($localfilesmatch, $ftp, $verbose, $action, $helper);}$helper->outputError('no "localfile" or "localfilesmatch" attribute in action "put"');return false;}public function handleActionPutMatch($localfilesmatch, $ftp, $verbose, SimpleXMLElement $action, OctoPHPusTaskHelper $helper) {$localfilesmatch = $helper->applyPropertiesReplace($localfilesmatch);$dir = dirname($localfilesmatch);$dir = OctoPHPusTaskHelper::clean_path($dir);$pattern = basename($localfilesmatch);$remotedir = OctoPHPusTaskHelper::xml_attribute($action, 'remotedir');if (!$remotedir) {$helper->outputError('no "remotedir" attribute in action "put"');return false;}$remotedir = $helper->applyPropertiesReplace($remotedir);$remotedir = OctoPHPusTaskHelper::clean_path($remotedir);$files = array();if ($handle = @opendir($dir)) {while (false !== ($file = @readdir($handle))) {if ($file == '.' || $file == '..') continue;if (!is_file($dir.'/'.$file)) continue;if (fnmatch($pattern, $file)) {$files[OctoPHPusTaskHelper::clean_path($dir.'/'.$file)] = $file;}}}else {$helper->outputError('unable to open local directory "'.$dir.'" in action "put"');return false;}if (sizeof($files) > 0) {if (!@ftp_chdir($ftp, $remotedir)) {$helper->outputError('unable to select directory "'.$remotedir.'" to upload '.sizeof($files).' matching file(s) in action "put"');return false;}$c = 0;foreach ($files as $path => $file) {if (!@ftp_put($ftp, $file, $path, FTP_BINARY)) {$helper->outputError('unable to upload file "'.$path.'" to directory "'.$remotedir.'" in action "put"');return false;}if ($verbose) {$helper->outputInfo('Upload file: "'.$path.'" -> "'.OctoPHPusTaskHelper::clean_path($remotedir.'/'.$file).'"');}$c++;}}if ($c > 0) {$helper->outputInfo($c.' file(s) uploaded to "'.$remotedir.'"');}return true;}public function handleActionPutSingle($localfile, $ftp, $verbose, SimpleXMLElement $action, OctoPHPusTaskHelper $helper) {$localfile = $helper->applyPropertiesReplace($localfile);$localfile = OctoPHPusTaskHelper::clean_path($localfile);$remotefile = OctoPHPusTaskHelper::xml_attribute($action, 'remotefile');if (!$remotefile) {$helper->outputError('no "remotefile" attribute in action "put"');return false;}$remotefile = $helper->applyPropertiesReplace($remotefile);$remotefile = OctoPHPusTaskHelper::clean_path($remotefile);if (!@is_file($localfile)) {$helper->outputError('local file not found ('.$localfile.') in action "put"');return false;}$info = pathinfo($remotefile);if (!@ftp_chdir($ftp, '/'.$info['dirname'])) {$helper->outputError('unable to select directory "/'.$info['dirname'].'" to upload file "'.$localfile.'" in action "put"');return false;}if (!@ftp_put($ftp, $info['basename'], $localfile, FTP_BINARY)) {$helper->outputError('unable to upload file "'.$localfile.'" to "'.$remotefile.'" in action "put"');return false;}unset($info);if ($verbose) {$helper->outputInfo('Upload file:"'.$localfile.'" -> "'.$remotefile.'"');}return true;}public function getTaskCommand() {return 'ftp';}} ?><?php class XMLValidateTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$task = $helper->getXMLTaskDefinition();foreach ($task->children() as $action) {switch ($action->getName()) {case 'checkfile' :$file = OctoPHPusTaskHelper::xml_attribute($action, 'file');if (!$file) {$helper->outputError('no "file" attribute in action "checkfile"');return false;}$file = $helper->applyPropertiesReplace($file);if (!is_file($file)) {$helper->outputError('file not found ('.$file.') in action "checkfile"');return false;}$r = false;$level = error_reporting();error_reporting(E_ALL);try {ob_start();$valider = new DOMDocument("1.0");$r = $valider->load($file);$ct = ob_get_contents();ob_end_clean();unset($valider);} catch (Exception $ex) {$r = false;$ct = $ex->getMessage();}error_reporting($level);if (!$r) {$lines = explode("\n", strip_tags($ct));foreach ($lines as $line) {$line = trim($line);if (empty($line)) continue;$line = str_replace(' DOMDocument::load() [domdocument.load]: ', '', $line);$line = strstr($line, 'in file://', true);if (empty($line)) continue;$helper->outputInfo($line);}unset($lines, $line);$helper->outputInfo('Document "'.$file.'" is INVALID !!');}else {$helper->outputInfo('Document "'.$file.'" is well-formed');}return $r;break;default :$helper->outputError('unknown action "'.$action->getName().'"');return false;}}}public function getTaskCommand() {return 'xmlvalidate';}} ?><?php class PHPObfuscator {public function __construct($config=array()) {$this->config = array_merge(array('obfuscated_names_length' => 20,'remove_comments' => true,'remove_doc_comments' => true,'pack_code' => true,'ignore_names' => null), $config);}protected $contentsObfuscated = null;public function obfuscateFile($file) {$ct = @file_get_contents($file);if (!$ct) {throw new Exception('unable to get file contents');}$this->createParserOn($ct, $file);}public function obfuscateString($string) {if (!is_string($string)) {throw new Exception('invalid argument $string');}$this->createParserOn($string);}protected function createParserOn($content, $file = '.') {$parser = new PHPObfuscatorGeneralParser($content, $this->config, $file);unset($content);$this->contentsObfuscated = $parser->getContentsObfuscated();}public function getObfuscatedContents() {return $this->contentsObfuscated;}}class PHPObfuscatorCatalogue {protected $obfuscatedNames= array();protected $ignoreStrings= null;protected $ignoreVariables= null;protected $invalidObfuscatedNames = array('do', 'while', 'for', 'in', 'as', 'goto', 'break', 'switch', 'function', 'class', 'int', 'bool', 'boolean', 'float','static', 'public', 'private', 'protected', 'interface', 'namespace', 'use', 'foreach', 'const', 'string', 'chr', 'and','integer', 'double', 'if', 'false', 'true', 'null', 'throw', 'catch', 'new', 'case', 'array', 'unset', 'return', 'or','extends', 'implements', 'var', 'global', 'abstract', 'clone', 'continue', 'declare', 'echo', 'else', 'elseif', 'then','endfor', 'endif', 'enddeclare', 'endforeach', 'endswitch', 'endwhile', 'exit', 'die', 'eval', 'final', 'cfunction','instanceof', 'isset', 'xor');protected $index = 0;public function __construct($namesLength=10, $ignores=null) {$this->ignoreStrings = array('false', 'true', 'null', 'self', '__construct', '__destruct', '__tostring', '__clone', '__call','__get', '__set', '__isset', '__unset', '__sleep', '__wakeup', '__set_state', '__autoload', 'parent');$this->ignoreVariables = array('$this', '$argv', '$argc', '$GLOBALS', '$_SERVER', '$_GET', '$_POST', '$_FILES','$_COOKIE', '$_SESSION', '$_REQUEST', '$_ENV');if (is_array($ignores)) {foreach ($ignores as $i) {if (is_string($i)) {if (substr($i, 0, 1) == '$') {$this->ignoreVariables[] = strtolower($i);}else {$this->ignoreStrings[] = strtolower($i);}}}}}public static function intToString($int, $symboles="abcdefghijklmnopqrstuvwxyz") {if ($int === 0) {return $symboles{0};}$r = '';while ($int > 0) {$index = (int) ($int % strlen($symboles));$r = $symboles{$index} . $r;$int = (int) ($int / strlen($symboles));}return $r;}public function getObfuscatedNameOf($name) {if ($this->isIgnoredVariable($name)) {return $name;}$var = false;if (substr($name, 0, 1) == '$') {$var = true;$name = substr($name, 1);}if (array_key_exists($name, $this->obfuscatedNames)) {return ($var ? '$' : '') . $this->obfuscatedNames[$name];}$rnd = self::intToString($this->index);while (in_array($rnd, $this->invalidObfuscatedNames) || $this->isIgnoredString($rnd)) {$rnd = self::intToString($this->index++);}$this->index++;$this->obfuscatedNames[$name] = $rnd;return ($var ? '$' : '') . $rnd;}public function isIgnoredString($str) {return function_exists($str) || in_array(strtolower($str), $this->ignoreStrings) || defined($str) || class_exists($str) || interface_exists($str);}public function isIgnoredVariable($name) {return in_array(strtolower($name), $this->ignoreVariables);}}class PHPObfuscatorGeneralParser {protected $contentsObfuscated = '';protected $file;protected $config;protected $catalogue;protected $inPHPCode = false;public function __construct($contents, $config, $file = null, PHPObfuscatorCatalogue $catalogue = null) {$this->config = $config;$this->file = $file;$this->catalogue = $catalogue != null ? $catalogue : new PHPObfuscatorCatalogue($config['obfuscated_names_length'],$config['ignore_names']);$tokens = @token_get_all($contents);$this->execute($tokens);}public function getFile() {return $this->file;}public function getConfig() {return $this->config;}public function getContentsObfuscated() {return $this->contentsObfuscated;}public function getFilesToInclude() {return $this->toInclude;}public function execute($tokens) {foreach ($tokens as $token) {if (is_array($token)) {list($type, $code, $line) = $token;if ($type == T_OPEN_TAG) {$this->inPHPCode = true;$this->append('<?php ');continue;}else if ($type == T_CLOSE_TAG) {$this->inPHPCode = false;$this->append(' ?>');continue;}else if ($type == T_WHITESPACE) {$this->append($this->inPHPCode ? ($this->config['pack_code'] ? ' ' : $code) : $code);continue;}else if ($type == T_DOC_COMMENT) {if (!$this->config['remove_doc_comments']) {$this->append($code);}continue;}else if ($type == T_COMMENT) {if (!$this->config['remove_comments'] && $this->config['pack_code']) {$this->append($code);}continue;}if (!$this->inPHPCode) {$this->append($code);continue;}if ($type == T_VARIABLE) {$this->append($this->catalogue->getObfuscatedNameOf($code));continue;}else if ($type == T_STRING) {if (!$this->catalogue->isIgnoredString($code)) {$this->append($this->catalogue->getObfuscatedNameOf($code));continue;}}$this->append($code);}else {$this->append($token);}}}public function append($str) {$this->contentsObfuscated .= $str;}} ?><?php class ObfuscateTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$task = $helper->getXMLTaskDefinition();$config = array('remove_comments'=> (OctoPHPusTaskHelper::xml_attribute($task, 'removeComments') == 'false' ? false : true),'remove_doc_comments'=> (OctoPHPusTaskHelper::xml_attribute($task, 'removeDocComment') == 'false' ? false : true),'pack_code'=> (OctoPHPusTaskHelper::xml_attribute($task, 'packCode') == 'false' ? false : true));foreach ($task->children() as $action) {switch ($action->getName()) {case 'transform' :$srcfile = OctoPHPusTaskHelper::xml_attribute($action, 'srcfile');if (!$srcfile) {$helper->outputError('no "srcfile" attribute in action "transform"');return false;}$srcfile = $helper->applyPropertiesReplace($srcfile);if (!is_file($srcfile)) {$helper->outputError('file "'.$srcfile.'" not found, in action "transform"');return false;}$destfile = OctoPHPusTaskHelper::xml_attribute($action, 'destfile');if (!$destfile) {$helper->outputError('no "destfile" attribute in action "transform"');return false;}$destfile = $helper->applyPropertiesReplace($destfile);$ignores = array();foreach ($action->children() as $ignore) {if ($ignore->getName() == 'ignore') {$name = OctoPHPusTaskHelper::xml_attribute($ignore, 'name');if ($name) {$ignores[] = $name;}}unset($name);}$config['ignore_names'] = $ignores;try {$ob = new PHPObfuscator($config);$ob->obfuscateFile($srcfile);if (!@file_put_contents($destfile, $ob->getObfuscatedContents())) {$helper->outputError('unable to write obfuscated file "'.$destfile.'"');return false;}else {$helper->outputInfo('File "'.$srcfile.'" has been obfuscated and stored in file "'.$destfile.'"');}}catch (Exception $ex) {$helper->outputException($ex);return false;}break;default :$helper->outputError('unknown action "'.$action->getName().'"');return false;}}return true;}public function getTaskCommand() {return 'obfuscate';}} ?><?php class BatchTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$task = $helper->getXMLTaskDefinition();foreach ($task->children() as $action) {switch ($action->getName()) {case 'create-batch' :$dir = OctoPHPusTaskHelper::xml_attribute($action, 'dir');if (!$dir) $dir = realpath(dirname($helper->getBuildFilePath())).'/';else $dir = $helper->applyPropertiesReplace($dir);$dir = OctoPHPusTaskHelper::clean_path($dir);if (!is_dir($dir)) {$helper->outputError('target directory "'.$dir.'" not found');return false;}$contents = '
@ECHO off

SET "ProjectName=${projectName}"
SET "BuildFile=${buildfile}"
SET "PathPHP=${pathphp}"
SET "OctophpusFile=${octophpusfile}"

TITLE Build %ProjectName%
ECHO # Project %ProjectName%
ECHO # Type \'help\' for a list of available commands.

:begin

ECHO.

SET /p "Action= > "

IF /i "%Action%" == exit GOTO end
IF /i "%Action%" == cls GOTO cls
IF /i "%Action%" == ll GOTO ll
IF /i "%Action%" == help GOTO help

%PathPHP% %OctophpusFile% %BuildFile% %Action%

GOTO begin

:cls

CLS

GOTO begin

:ll

%PathPHP% %OctophpusFile% -l %BuildFile%

GOTO begin

:version

%PathPHP% %OctophpusFile% -v

GOTO begin

:help

ECHO Usage: [command or target name]
ECHO Commands:
ECHO  EXIT     Leave the CLI console
ECHO  CLS      Clean console
ECHO  LL       Lists all available targets
ECHO  VERSION  Display current OctoPHPus version

GOTO begin

:end';$contents = explode("\n", $contents);$contents = implode(PHP_EOL, $contents);$pathPHP = null;$glob = glob('C:\wamp\bin\php\*\php.exe');if (is_array($glob) && !empty($glob)) $pathPHP = $glob[0];if (!$pathPHP) {$helper->outputWarning('Unable to find PHP bin directory, please fill run.bat file');}$contents = str_replace(array('${projectName}', '${buildfile}', '${pathphp}', '${octophpusfile}'),array($helper->getProjectName(),OctoPHPusTaskHelper::clean_path($dir.'/build.xml', true),OctoPHPusTaskHelper::clean_path($pathPHP, true),OctoPHPusTaskHelper::clean_path($dir.'/octophpus.php'), true),$contents);$target = OctoPHPusTaskHelper::clean_path($dir.'/run.bat');if (!file_put_contents($target, $contents)) {$helper->outputError('unable to write batch file "'.$target.'"');}else {$helper->outputInfo('Created batch file: '.$target);}break;default :$helper->outputError('unknown action "'.$action->getName().'"');return false;}}return true;}public function getTaskCommand() {return 'hci';}} ?><?php class CharsetTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$task = $helper->getXMLTaskDefinition();$action = OctoPHPusTaskHelper::xml_attribute($task, 'action');if (!$action) {$helper->outputError('no "action" attribute');return false;}$action = $helper->applyPropertiesReplace($action);switch ($action) {case 'check' :if (!function_exists('mb_detect_encoding')) {$helper->outputError('php_mbstring extension is not loaded.');return false;}$file = OctoPHPusTaskHelper::xml_attribute($task, 'file');if (!$file) {$helper->outputError('no "file" attribute in action "check"');return false;}$file = $helper->applyPropertiesReplace($file);$file = $helper->clean_path($file);if (!is_file($file)) {$helper->outputError('File to check not found: '.$file);return false;}$error = OctoPHPusTaskHelper::xml_attribute($task, 'throwerror') == 'true';$contents = @file_get_contents($file);if ($contents === false) {$helper->outputError('Unable to read file: '.$file);return false;}$charset = @mb_detect_encoding($contents);unset($contents);if ($charset == false) {$helper->outputWarning('Unable to detect file encoding: '.$file);return true;}$checkcharset = OctoPHPusTaskHelper::xml_attribute($task, 'charset');if ($checkcharset) {if ($charset != $checkcharset) {if ($error) {$helper->outputError('Invalid charset for file "'.$file.'" : '.$charset.' instead of '.$checkcharset.' required');return false;}else {$helper->outputWarning('Invalid charset for file "'.$file.'" : '.$charset.' instead of '.$checkcharset.' required');}}}else {$helper->outputInfo('Charset '.$charset.' for file: '.$file);}return true;break;default :$helper->outputError('unkonwn action "'.$action.'"');return false;}}public function getTaskCommand() {return 'charset';}} ?><?php error_reporting(E_ALL);$classes = get_declared_classes();foreach ($classes as $c) {$r = new ReflectionClass($c);if ($r->implementsInterface(OCTOPHPUS_TASK_INTERFACE)) {OctoPHPus::installTask($c);}}if (strtoupper(PHP_SAPI) == 'CLI') {if (@$argv[1] == '-v') {echo 'OctoPHPus version '.OCTOPHPUS_VERSION."\n";echo 'Running on PHP '.phpversion().', '.php_uname('a');}else if (@$argv[1] == '-l') {if (sizeof($argv) > 2) {$file = $argv[2];$o = new OctoPHPus();$targets = $o->getTargetsInBuildXML($file);if (!$targets) {echo 'Unable to get targets in file '.$file;}else {echo 'Targets in '.$file.':';foreach ($targets as $name => $desc) {echo "\n ".str_pad($name, OctoPHPus::getTasksNamesMaxLength()+5, ' ', STR_PAD_RIGHT).$desc;}}unset($file, $o, $targets, $name, $desc);}else {echo 'Usage: -l [buildfile]';}}else if (sizeof($argv) <= 1) {echo 'Usage: [buildfile] [target]      To execute the buildfile.'."\n";echo '  or : -l [buildfile]            To list all targets in a buildfile.'."\n";echo '  or : -v                        To show version of OctoPHPus.';}else {$file = $argv[1];$target = sizeof($argv) > 2 ? $argv[2] : null;$o = new OctoPHPus();class CurrentListener implements OctoPHPusListener {public function octophpusConsoleEvent($message) {echo "\n$message";}}$o->addListener(new CurrentListener());$o->executeBuildXML($file, $target);unset($file, $target, $o);}} ?>