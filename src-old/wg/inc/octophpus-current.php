<?php /*
$Id: octophpus-1.5.2.php,v 1.5.2 2012/07/22 02:55:04 evolya Exp $

OctoPHPus - Automating software build process tool for PHP

Copyright (c) 2012 evolya.fr

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you have any questions or comments, please email:

contact@evolya.fr
http://octophpus.evolya.fr/
*/ define('OCTOPHPUS_VERSION', '1.5.2');  ?><?php interface OctoPHPusListener {public function octophpusConsoleEvent($a);}class OctoPHPusStore {protected $b;protected $c;public function __construct($b, $c) {$this->b = $b;$this->c = $c;}public function d() {return $this->b;}public function e() {return $this->c;}public function f() {if (is_object($this->c)) {return get_class($this->c);}return gettype($this->c);}}final class OctoPHPusTaskHelper {private $g;private $h;private $i;private $j;private $k;private $l;private $m;public function __construct(OctoPHPus $g, $h, $i, $j, $k, $l, $m) {$this->g = $g;$this->h = $h;$this->i = $i;$this->j = $j;$this->task = $k;$this->l = $l;$this->m = $m;}public function getProjectName() {return $this->g->getProjectName();}public function getBuildFilePath() {return $this->h;}public function getProperties() {return $this->g->getProperties();}public function getProperty($n) {return $this->g->getProperty($n);}public function setProperty($n, $o) {$this->g->setProperty($n, $o);}public function applyPropertiesReplace($p, $q=false) {return $this->g->applyPropertiesReplace($p, $q);}public function r() {return $this->g->r();}public function getMainTargetName() {return $this->i;}public function getCurrentTargetName() {return $this->j;}public function getCurrentTaskName() {return $this->l;}public function getCurrentTask() {return $this->task;}public function getXMLTaskDefinition() {return $this->m;}public function outputInfo($s) {$this->g->t($s, $this->l);}public function outputWarning($s) {$this->g->t('WARNING: '.$s, $this->l);}public function outputError($s) {$this->g->t('ERROR: '.$s, $this->l);}public function outputException(Exception $u) {$this->g->t('ERROR: Exception '.get_class($u).' with message "'.$u->getMessage(), $this->l);$this->g->t('StackTraces: '.$u->getTraceAsString(), $this->l);}public function saveStore(OctoPHPusStore $v) {$this->g->saveStore($v);}public function storeExists($b) {return $this->g->storeExists($b);}public function getStore($b) {return $this->g->getStore($b);}public static function xml_attribute(SimpleXMLElement $w, $x) {if (isset($w[$x])) return (string) $w[$x];return null;}public static function clean_path($y, $z=false) {if (!isset($y) || !$y || empty($y)) return '';$y = str_replace('\\', '/', $y);while (strpos($y, '//') !== false) {$y = str_replace('//', '/', $y);}if ($z) {$y = str_replace('/', '\\', $y);}return $y;}}interface OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper);public function getTaskCommand();}define('OCTOPHPUS_TASK_INTERFACE', 'OctoPHPusTask');final class OctoPHPus {private static $ba = array();private static $bb = 7;private static $bc = '/^[a-z0-9\-_]+$/i';private $bd = null;private $be = null;private $bf = array();private $bg = array();private $bh = array();private $bi = array();private $bj = false;private $bk = array();private $bl = null;public function __construct() {$this->bj = strtoupper(PHP_SAPI) == 'CLI';}public static function installTask($bm) {if (!class_exists($bm)) {throw new Exception("Class not found: $bm");}$k = new $bm();if (!($k instanceof OctoPHPusTask)) {throw new Exception("Class '$bm' must implements '".OCTOPHPUS_TASK_INTERFACE."'");}$bn = $k->getTaskCommand();if (!preg_match(self::$bc, $bn)) {throw new Exception('Invalid command name ('.$bn.'), for '.$bm);}if (array_key_exists($bn, self::$ba)) {throw new Exception('Task '.get_class(self::$ba[$bn]).' allready use command "'.$bn.'", for '.$bm);}self::$ba[$bn] = $bm;self::$bb = max(self::$bb, strlen($bn));}public function getProjectName() {return $this->be;}public function getProperties() {return $this->bf;}public function getProperty($n) {if (!isset($n) || !is_string($n)) return null;return array_key_exists($n, $this->bf) ? $this->bf[$n] : null;}public function setProperty($n, $o) {if (!isset($n) || !is_string($n)) return;$this->bf[$n] = $o;}public function addListener(OctoPHPusListener $bo) {$this->bg[] = $bo;}public function getTargetsInBuildXML($y) {if (!isset($y)) {$this->bp('Usage: <buildfile>');return array();}if ($this->bq($y) !== 0) return null;$br = array();foreach ($this->bd->children() as $bs) {if ($bs->getName() == 'target') {$n = self::xml_attribute($bs, 'name');if (!$n) {continue;}$bt = self::xml_attribute($bs, 'description');if (!$bt) $bt = '';if (self::xml_attribute($bs, 'display') != 'none') {$br[$n] = $this->applyPropertiesReplace($bt);}}}return $br;}public function executeBuildXML($y, $bu=null, $bv=true) {if (!isset($y)) {$this->bp('Usage: [buildfile] [target]');return -2;}if ($this->bq($y) !== 0) {return -3;}$this->bk = array();if (empty($bu) || !is_string($bu)) {$bu = self::xml_attribute($this->bd, 'default');}else {$this->bk = explode(' ', $bu);$bu = array_shift($this->bk);}$this->bi = array();if ($bv) {$this->bp('Buildfile: '.$y);$bw = microtime(true);}if ($this->bx($bu)) {if ($bv) {$this->bp("\nTotal time: ".round(microtime(true) - $bw, 2).' sec');$this->bp("BUILD SUCCESSFUL");$bw = microtime(true);}return 0;}else {if ($bv) {$this->bp("\nBUILD FAILED");}return -1;}}private function bq($y) {$this->bd = null;$this->be = null;$this->bf = array();if (!is_file($y)) {$this->bp('Error: build file not found ('.$y.'), please use path relative to "'.str_replace('\\', '/', realpath('.')).'/"');return -1;}$by = @file_get_contents($y);if ($by === false) {$this->bp('Error: unable to get file contents ('.$y.')');return -2;}$m = @simplexml_load_string($by);if (!$m || get_class($m) != 'SimpleXMLElement') {$this->bp('Error: unable to parse XML document, invalid document ('.$y.')');return -3;}if ($m->getName() != 'project') {$this->bp('Error: project element not found ('.$y.')');return -4;}$this->bd = $m;$this->be = self::xml_attribute($m, 'name');$this->bl = realpath($y);$this->bf['project.name'] = $this->be;$this->bf['project.buildfile'] = $this->bl;$this->bf['project.dir'] = dirname($this->bl) . '/';$this->bf['workspace.dir'] = dirname(dirname($this->bl)) . '/';$this->bz();return 0;}public static final function xml_attribute(SimpleXMLElement $w, $x) {if (isset($w[$x])) return (string) $w[$x];return null;}private function bz() {foreach ($this->bd->property as $bs) {$n = self::xml_attribute($bs, 'name');if (!$n) continue;$o = self::xml_attribute($bs, 'value');if (!$o) {$o = (string) $bs;}$o = $this->applyPropertiesReplace($o);$this->bf[$n] = $o;}}public function applyPropertiesReplace($p, $q=false) {$p = "$p";foreach ($this->bf as $ca => $cb) {$p = str_replace('${'.$ca.'}', $cb, $p);}if ($q) {$cc = array('d', 'D', 'j', 'l', 'N', 'S', 'w', 'z', 'W', 'F', 'm', 'M','n', 't', 'L', 'o', 'Y', 'y', 'a', 'A', 'B', 'g', 'G', 'h','H', 'i', 's', 'u', 'e', 'I', 'O', 'P', 'T', 'Z', 'c', 'r', 'U');foreach ($cc as $cd) {$p = str_replace('${date-'.$cd.'}', date($cd), $p);}}$p = str_replace('${argc}', sizeof($this->bk), $p);$p = str_replace('${args}', implode(' ', $this->bk), $p);foreach ($this->bk as $ce => $cf) {$p = str_replace('${argv.'.$ce.'}', $cf, $p);}return $p;}private function bx($bu, $cg=false) {if (!$this->bd) {return false;}if (!$cg && in_array($bu, $this->bi)) {return true;}foreach ($this->bd->target as $ch) {if (self::xml_attribute($ch, 'name') == $bu) {$this->bi[] = $bu;if (!$this->ci($bu, $ch)) {return false;}return true;}}$this->bp("\n".'ERROR: target "'.$bu.'" not found in buildfile.');return false;}private function ci($n, SimpleXMLElement $bu) {$cj = self::xml_attribute($bu, 'depends');if ($cj != null) {$cj = explode(',', $cj);foreach ($cj as $ck) {$ck = trim($ck);if (empty($ck)) continue;if ($ck == $n) {$this->bp("\n".'ERROR: target "'.$n.'" depends on itself.');return false;}if (!$this->bx($ck)) {return false;}}}$this->bp("\n".$n.':');$cl = $bu->children();$cm = array();foreach ($cl as $ca => $k) {if (in_array($k, $cm)) continue;$cm[] = $k;if (!$this->cn($k, $n)) {$this->t('TASK FAILED', $k->getName());return false;}}return true;}private function cn(SimpleXMLElement $k, $bu) {switch ($k->getName()) {case 'echo' :return $this->co($k, $bu);break;case 'delete' :return $this->cp($k, $bu);break;case 'mkdir' :return $this->cq($k, $bu);break;case 'sleep' :return $this->cr($k, $bu);break;case 'eval' :return $this->cs($k, $bu);break;case 'include' :return $this->ct($k, $bu);break;case 'copy' :return $this->cu($k, $bu);break;case 'run' :return $this->cv($k, $bu);break;case 'propertiesfile' :return $this->cw($k, $bu);break;case 'exec' :return $this->cx($k, $bu);break;case 'buffer' :return $this->cy($k, $bu);break;default :if (array_key_exists($k->getName(), self::$ba)) {$bm = self::$ba[$k->getName()];$cz = new $bm();$helper = $this->da($bu, $cz, $k->getName(), $k);return $cz->handleOctophpusTask($helper);}$this->bp("\n".'ERROR: unknown task "'.$k->getName().'"');$br = false;break;}return false;}private function da($bu, OctoPHPusTask $k=null, $l, SimpleXMLElement $m=null) {return new OctoPHPusTaskHelper($this,null, null, $bu,$k,$l,$m);}public function r() {return $this->bk;}private function cv(SimpleXMLElement $k, $bu) {$db = self::xml_attribute($k, 'buildFile');if ($db) {$db = $this->applyPropertiesReplace($db);$db = OctoPHPusTaskHelper::clean_path($db);if (!file_exists($db)) {$this->t('ERROR: build file not found "'.$db.'"', 'execute');return false;}}$bu = self::xml_attribute($k, 'target');if (!$bu) {$this->t('ERROR: no "target" attribute', 'execute');return false;}$bu = $this->applyPropertiesReplace($bu);$dc = self::xml_attribute($k, 'includePath');if ($dc) {$dc = $this->applyPropertiesReplace($dc);@set_include_path(get_include_path() . PATH_SEPARATOR . $dc);}if (!$db) {$this->t('Target: '.$bu, 'execute');return $this->bx($bu);}else {$this->t('Target: "'.$bu.'" in "'.$db.'"', 'execute');$dd = new OctoPHPus();foreach ($this->bg as $bo) {$dd->addListener($bo);}try {return $dd->executeBuildXML($db, $bu, false) === 0;} catch (Exception $u) {$this->t('ERROR: exception thrown in "execute" task in build file "'.$db.'" with target "'.$bu.'"', 'execute');$this->t('  Exception '.get_class($u).' with message "'.$u->getMessage(), 'execute');$this->t('  StackTraces: '.$u->getTraceAsString(), 'execute');return false;}}return false;}private function cy(SimpleXMLElement $k, $bu) {$de = '';foreach ($k->children() as $df) {$n = $df->getName();if ($n == 'replace') {$dg = self::xml_attribute($df, 'search');$dh = $this->applyPropertiesReplace(self::xml_attribute($df, 'replace'));$de = str_replace($dg, $dh, $de);continue;}$di = '';if ($n != 'append' && $n != 'prepend') continue;$dj = self::xml_attribute($df, 'readfile');if ($dj) {$dj = $this->applyPropertiesReplace($dj);$di = file_get_contents($dj);if (!$di) {$this->t('Error: unable to read file "'.$dj.'"', 'buffer');return false;}}else {$di = $this->applyPropertiesReplace("$df", true);}if ($n == 'append') {$de .= $di;}else {$de = $di . $de;}unset($di, $dj);}$dk = strlen($de);$this->t('Buffer created, size= '.$dk .' o', 'buffer');$dl = self::xml_attribute($k, 'outputfile');if ($dk > 0 && $dl) {$dl = OctoPHPusTaskHelper::clean_path($this->applyPropertiesReplace($dl));if (file_put_contents($dl, $de)) {$this->t('Buffer stored in file: '.$dl, 'buffer');}else {$this->t('ERROR: unable to save file "'.$dl.'"', 'buffer');}}$v = self::xml_attribute($k, 'store');if ($v) {$v = $this->applyPropertiesReplace($v);$this->saveStore($v, $de);}return true;}private function cx(SimpleXMLElement $k, $bu) {$dm = self::xml_attribute($k, 'executable');if (!$dm || $dm == 'cmd') {$dm = 'cmd';}else {$dm = $this->applyPropertiesReplace($dm);$dm = OctoPHPusTaskHelper::clean_path($dm);$dn = realpath($dm);if (!is_file($dn)) {$this->t('ERROR: executable file not found ('.$dm.')', 'exec');return false;}}$dm = $this->applyPropertiesReplace($dm);$dp = self::xml_attribute($k, 'osfamily');if ($dp) {$dp = strtolower($dp);if (in_array($dp, array('win', 'winnt', 'windows', 'win32', 'win64'))) {if (PHP_SHLIB_SUFFIX != 'dll') {return true;}}if (in_array($dp, array('linux', 'unix'))) {if (PHP_SHLIB_SUFFIX != 'so') {return true;}}if (in_array($dp, array('max', 'maxos'))) {if (stristr(PHP_OS, 'darwin') || stristr(PHP_OS, 'mac')) {return true;}}}$dr = self::xml_attribute($k, 'failonerror') == 'true';$ds = self::xml_attribute($k, 'output');$dt = self::xml_attribute($k, 'dir');if ($dt) {$dt = $this->applyPropertiesReplace($dt);$dt = OctoPHPusTaskHelper::clean_path($dt);$du = realpath($dt);if (!is_dir($du)) {$this->t('ERROR: execution directory not found ('.$dt.')', 'exec');return false;}}if (ini_get('safe_mode')) {}$dv = $dm == 'cmd' ? '' : escapeshellcmd($dm);foreach ($k->arg as $cf) {if (empty($dv)) {$dv .= $this->applyPropertiesReplace(self::xml_attribute($cf, 'value'));}else {if (self::xml_attribute($cf, 'escape') != "false") {$dv .= ' ' . escapeshellarg($this->applyPropertiesReplace(self::xml_attribute($cf, 'value')));}else {$dv .= ' ' . $this->applyPropertiesReplace(self::xml_attribute($cf, 'value'));}}}if ($dt) {$dv = 'cd '.escapeshellarg($dt).' | '.$dv;}$dw = array();$dx = null;$this->t('Execute: '.$dv, 'exec');@exec($dv, $dw, $dx);if ($dx !== 0) {$this->t(($dr ? 'ERROR' : 'WARNING').': execution return an error ('.$dx.')', 'exec');$this->t('Ouput: '.implode(PHP_EOL, $dw), 'exec');if ($dr) {return false;}}else if ($ds == 'std') {$dy = PHP_EOL . str_repeat(' ', self::$bb + 4);$this->t('Output:' . $dy . implode($dy, $dw), 'exec');}else if ($ds) {if (file_put_contents($ds, "".implode(PHP_EOL, $dw), FILE_APPEND) === false) {$this->t('ERROR: unable to write data in output file "'.$ds.'"', 'exec');}}return true;}private function cw(SimpleXMLElement $k, $bu) {$dz = self::xml_attribute($k, 'file');if (!$dz) {$this->t('ERROR: no "file" attribute', 'propertiesfile');return false;}$dz = $this->applyPropertiesReplace($dz);$dz = OctoPHPusTaskHelper::clean_path($dz);$ea = realpath($dz);if (!is_file($ea)) {$this->t('ERROR: source file not found ('.$dz.')', 'propertiesfile');return false;}$by = @file_get_contents($ea);if (!$by) {$this->t('ERROR: unable to read properties file ('.$dz.')', 'propertiesfile');return false;}$eb = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_~+&()[]';$ec = null;$o = null;$ed = 0;$by = explode(PHP_EOL, $by);foreach ($by as $ee) {if (substr($ee, 0, 1) == '#' || substr($ee, 0, 1) == '!') {continue;}$ee = trim($ee);if ($ec != null) {$o .= $ee;}else {for ($ef = 0; $ef < strlen($ee); $ef++) {$eg = substr($ee, $ef, 1);if ($o === null) {if ($eg == '\\') {if (substr($ee, $ef + 1, 1) == ' ') {$ec .= ' ';}else {$this->t('WARNING: syntax error in properties file [1]', 'propertiesfile');$ec = null;$o = null;continue;}}else if ($eg == ' ') {continue;}else if ($eg == ':' || $eg == '=') {$o = '';}else if (strpos($eb, $eg) === false) {$this->t('WARNING: syntax error in properties file [2]', 'propertiesfile');$ec = null;$o = null;continue;}else {$ec .= $eg;}}else {$o .= $eg;}}}if (substr($ee, -1) == '\\') {$o = substr($o, 0, -1);continue;}$ec = trim($ec);$o = trim($o);$this->bf[$ec] = $this->applyPropertiesReplace($o);$ed++;$ec = null;$o = null;}$this->t('Loaded properties file: '.$ea.' ('.$ed.')', 'propertiesfile');return true;}private function cu(SimpleXMLElement $k, $bu) {$eh = self::xml_attribute($k, 'srcfile');if ($eh) {$eh = $this->applyPropertiesReplace($eh);$eh = OctoPHPusTaskHelper::clean_path($eh);$ei = realpath($eh);if (!is_file($ei)) {$this->t('ERROR: source file not found ('.$eh.')', 'copy');return false;}$ei = OctoPHPusTaskHelper::clean_path($ei);$ej = self::xml_attribute($k, 'destdir');if (!$ej) {$this->t('ERROR: no "destdir" attribute', 'include');return false;}$ej = $this->applyPropertiesReplace($ej);$ej = OctoPHPusTaskHelper::clean_path($ej);$ek = realpath($ej);if (!is_dir($ej)) {$this->t('ERROR: destination directory not found ('.$ej.')', 'copy');return false;}$el = self::xml_attribute($k, 'newname');if (!$el) $el = basename($eh);if (@copy($ei, $ek.'/'.$el)) {$this->t('Copy file: "'.$ei.'" -> "'.OctoPHPusTaskHelper::clean_path($ek.'/'.$el).'"', 'copy');}else {$this->t('ERROR: unable to copy file: "'.$ei.'" -> "'.OctoPHPusTaskHelper::clean_path($ek.'/'.$el).'"', 'copy');}return true;}else {$this->t('ERROR: no "srcfile" attribute', 'include');return false;}return false;}private function ct(SimpleXMLElement $k, $bu) {$dz = self::xml_attribute($k, 'file');if (!$dz) {$this->t('ERROR: no "file" attribute', 'include');return false;}$dz = $this->applyPropertiesReplace($dz);$dz = OctoPHPusTaskHelper::clean_path($dz);if (!is_file($dz)) {$this->t('ERROR: file not found ('.$dz.')', 'include');return false;}$em = self::xml_attribute($k, 'once') == 'false' ? false : true;$bv = self::xml_attribute($k, 'verbose') == 'false' ? false : true;if ($bv) {$this->t('Include'.($em ? ' once' : '').' file: '.$dz, 'include');}$helper = $this->da($bu, null, $k->getName(), $k);foreach ($k->children() as $en) {if ($en->getName() == 'property') {$n = self::xml_attribute($en, 'name');$o = self::xml_attribute($en, 'value');if (!$n) {$this->t('ERROR: no "name" attribute in action "'.$en->getName().'"', 'include');return false;}$n = $this->applyPropertiesReplace($n);if ($o === null) {$this->t('ERROR: no "value" attribute in action "'.$en->getName().'"', 'include');return false;}if (strtolower($o) == 'true') $o = true;else if (strtolower($o) == 'false') $o = false;else if (strtolower($o) == 'null') $o = null;else if (ctype_digit($o)) $o = intval($o);else if (is_numeric($o)) $o = floatval($o);else $o = $this->applyPropertiesReplace($o);${$n} = $o;}else {$this->t('ERROR: unknown action "'.$en->getName().'"', 'include');return false;}}$dc = self::xml_attribute($k, 'includePath');if ($dc) {$dc = $this->applyPropertiesReplace($dc);@set_include_path(get_include_path() . PATH_SEPARATOR . $dc);}unset($en, $n, $o);try {if ($em) {require_once $dz;}else {require_once $dz;}}catch (Exception $u) {$this->t('ERROR: ' . get_class($u), 'include');$this->t($u->getMessage(), 'include');return false;}return true;}private function cs(SimpleXMLElement $k, $bu) {$eo = (string) $k;if (empty($eo)) {$this->t('ERROR: empty string to eval', 'eval');return false;}$ep = error_reporting();$eq = @ob_start();eval($eo);$er = @ob_get_contents();@ob_end_clean();error_reporting($ep);if (!empty($er)) {if (strpos(strtolower($er), 'error') !== false) {$this->t('ERROR: '.trim(strip_tags($er)), 'eval');return false;}$this->t("\n".$er, 'eval');}return true;}private function cq(SimpleXMLElement $k, $bu) {$dt = self::xml_attribute($k, 'dir');if ($dt) {$dt = $this->applyPropertiesReplace($dt);$dt = OctoPHPusTaskHelper::clean_path($dt);return $this->mkdir($dt);}return false;}private function mkdir($es) {if (is_dir($es) && file_exists($es)) {return true;}if (dirname($es) != $es && dirname($es) != '.') {if (!$this->mkdir(dirname($es))) {return false;}}if (!mkdir($es)) {$this->t('ERROR: unable to create dir "'.$es.'"', 'mkdir');return false;}else {$this->t('Created dir:  '.$es, 'mkdir');}return true;}private function rmdir($dt) {$dt = str_replace('\\', '/', $dt);if (substr($dt, -1) == '/') {$dt = substr($dt, 0, -1);}if (!is_dir($dt)) {return true;}$et = array();if ($eu = @opendir($dt)) {while (false !== ($dz = @readdir($eu))) {if ($dz != '.' && $dz != '..') {$et[] = $dt.'/'.$dz;}}}else {$this->t('ERROR: unable to open dir "'.$dt.'"', 'delete');return false;}@closedir($eu);foreach ($et as $dz) {if (is_dir($dz)) {$this->rmdir($dz);}else {if (@unlink($dz)) {$this->t('Deleted file: '.$dz, 'delete');}else {$this->t('ERROR: unable to delete file "'.$dz.'"', 'delete');}}}if (is_dir($dt)) {if (@rmdir($dt)) {$this->t('Deleted dir:  '.$dt, 'delete');}else {$this->t('ERROR: unable to delete dir "'.$dt.'"', 'delete');}}return true;}private function cp(SimpleXMLElement $k, $bu) {$ev = self::xml_attribute($k, 'dir');if ($ev) {$ev = $this->applyPropertiesReplace($ev);$ev = OctoPHPusTaskHelper::clean_path($ev);return $this->rmdir($ev);}$ev = self::xml_attribute($k, 'file');if ($ev) {$ev = $this->applyPropertiesReplace($ev);$ev = OctoPHPusTaskHelper::clean_path($ev);if (!is_file($ev)) {return true;}else if (@unlink($ev)) {$this->t('Deleted file: '.$ev, 'delete');return true;}else {return false;}}return false;}private function co(SimpleXMLElement $k, $bu) {$a = self::xml_attribute($k, 'message');if (!$a) {$a = (string) $k;}$a = $this->applyPropertiesReplace($a);$this->t($a, 'echo');return true;}private function cr(SimpleXMLElement $k, $bu) {$ew = self::xml_attribute($k, 'microsec');$ew = intval($ew);if ($ew > 0) {$this->t('Sleep '.round($ew / 1000000, 3).' sec...', 'sleep');usleep($ew);return true;}return false;}public function saveStore(ex $v) {$this->bh[$v->d()] = $v;}public function storeExists($b) {return array_key_exists($b, $this->bh);}public function getStore($b) {return $this->storeExists($b) ? $this->bh[$b] : null;}protected function bp($a) {if ($this->bj) {$a = strip_tags($a);}foreach ($this->bg as $ey) {try {$ey->octophpusConsoleEvent($a);} catch (Exception $u) {$ey->octophpusConsoleEvent('!! Exception on event broadcast: '.(string) $u);}}}public function t($a, $l) {$this->bp(str_pad('['.$l.']', self::$bb+3, ' ', STR_PAD_LEFT) . ' ' . $a);}public static function ez() {return self::$bb;}}  ?><?php class PHPBuilderTask implements OctoPHPusTask {protected $helper = null;protected $bv = true;protected $fa = true;protected $fb = false;protected $fc = array();protected $fd = array();protected $fe = array();protected $ff = array();protected $fg = '';protected $fh = '';protected $fi = '';protected $fj = 3.0;public function __construct() {}public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$this->fh = '';$this->fk = $helper;$k = $helper->getXMLTaskDefinition();$fl = OctoPHPusTaskHelper::xml_attribute($k, 'destfile');if (!$fl) {$helper->outputError('property "destfile" not found');return false;}$fl = $helper->applyPropertiesReplace($fl);$fl = OctoPHPusTaskHelper::clean_path($fl);$this->pack = OctoPHPusTaskHelper::xml_attribute($k, 'pack') == 'true' ? true : false;$dc = OctoPHPusTaskHelper::xml_attribute($k, 'includePath');$this->dc = $dc ? explode(PATH_SEPARATOR, $dc) : array();$this->bv = OctoPHPusTaskHelper::xml_attribute($k, 'verbose') == 'false' ? false : true;$this->fa = OctoPHPusTaskHelper::xml_attribute($k, 'statement') == 'true' ? true : false;foreach ($k->children() as $en) {switch ($en->getName()) {case 'includefile' :$dz = OctoPHPusTaskHelper::xml_attribute($en, 'file');if (!$dz) {$helper->outputError('property "file" not found in action "includefile"');return false;}$dz = $helper->applyPropertiesReplace($dz);$dz = OctoPHPusTaskHelper::clean_path($dz);if (!is_file($dz)) {$helper->outputError('file to include not found: '.$dz);return false;}$dz = realpath($dz);if (!$dz) {$helper->outputError('unable to get real path of file "'.$dz.'" in action "includefile"');return false;}$fm = OctoPHPusTaskHelper::xml_attribute($en, 'followincludes') == 'true' ? true : false;$dc = OctoPHPusTaskHelper::xml_attribute($en, 'includePath');$this->dc = $dc ? array_merge($this->dc, explode(PATH_SEPARATOR, $dc)) : $this->dc;$this->fe[] = array($dz, $fm);break;case 'excludefile' :$dz = OctoPHPusTaskHelper::xml_attribute($en, 'file');if (!$dz) {$helper->outputError('property "file" not found in action "excludefile"');return false;}$dz = $helper->applyPropertiesReplace($dz);$dz = OctoPHPusTaskHelper::clean_path($dz);if (realpath($dz) != false) {$dz = realpath($dz);}$fn = OctoPHPusTaskHelper::xml_attribute($en, 'rewrite');if ($fn === '0') {$fn = false;}else if (!$fn) {$fn = $dz;}else {$fn = $helper->applyPropertiesReplace($fn);}$this->ff[$this->fk->clean_path($dz)] = $fn;break;case 'appendtext' :$this->fi .= (string) $en;break;case 'prependtext' :$this->fg .= (string) $en;break;default :$helper->outputError('unknown action "'.$en->getName().'"');return false;}}return $this->fo($fl);}protected function fo($fl) {foreach ($this->fe as $ca => $dz) {$di = $this->fp($dz[0], $dz[1]);if ($di !== false && $di !== null) {$this->fh .= $di;}else return false;}if (!@file_put_contents($fl,$this->fk->applyPropertiesReplace($this->fg, true).$this->fh.$this->fk->applyPropertiesReplace($this->fi, true))) {$this->fk->outputError('unable to write compiled sources in: '.$fl);return false;}else {$this->fk->outputInfo('Write compiled sources: '.$fl);$this->fk->outputInfo('Minimum required PHP version for using this build: '.$this->fj);}$this->fh = '';return true;}protected function fp($fq, $fr, $fs=1) {$fq = $this->fk->clean_path($fq);$fh = @file_get_contents($fq);if (!$fh) {$this->fk->outputError('Unable to read file: '.$fq);return false;}$fh = trim($fh);$cc = token_get_all(trim($fh));if (!is_array($cc) || empty($cc)) {$this->fk->outputWarning('Invalid file: '.$fq);continue;}if ($fs > 1 && $this->fa) {$ft = array_shift($cc);if (@$ft[0] != T_OPEN_TAG) {array_unshift($cc, $ft);if ($fs > 1) {array_unshift($cc, array(T_CLOSE_TAG, ' ?>', 0));}}$fu = array_pop($cc);if (@$fu[0] != T_CLOSE_TAG) {array_push($cc, $fu);if ($fs > 1) {array_push($cc, array(T_OPEN_TAG, '<?php ', 0));}}}if ($this->bv) {$this->fk->outputInfo(str_repeat(' ', $fs) . 'Included: '.$fq);}$fv = '';$di = '';$fw = null;$fx = false;$fy = false;$fz = null; $ga = null; foreach ($cc as $cd) {if (is_array($cd)) {list($gb, $eo, $ee) = $cd;if ($fw !== null) {if ($gb == T_CONSTANT_ENCAPSED_STRING) {if ($fx) {$fw .= $eo;}else {$fw .= substr($eo, 1, -1);}continue;}else if ($gb == T_WHITESPACE) {$fw .= ' ';continue;}else {$this->fk->outputWarning(str_repeat(' ', $fs) . 'Unable to solve include in "'.$fq.'" line '.$ee.' : invalid dynamic token "'.$eo.'"');$fx = true;$fw .= $eo;continue;}}if ($gb == T_OPEN_TAG) {$di .= '<?php ';continue;}else if ($gb == T_CLOSE_TAG) {$di .= ' ?>';continue;}if ($gb == T_INCLUDE_ONCE || $gb == T_REQUIRE || $gb == T_REQUIRE_ONCE) {$fw = '';$fx = false;$fy = false;continue;}if ($gb == T_REQUIRE || $gb == T_INCLUDE) {$fw = '';$fx = false;$fy = true;continue;}if (($gb == T_COMMENT || $gb == T_DOC_COMMENT) && $this->pack) {continue;}if ($gb == T_WHITESPACE && $this->pack) {if ($eo == ' ') $di .= $eo;continue;}$di .= $eo;if ($gb != T_WHITESPACE) {$fz = ($gb == T_FUNCTION) ? $cd : null;$ga = ($gb == T_VARIABLE) ? $cd : null;}}else {if ($fw !== null) {$fz = null;$ga = null;if ($cd == ';') {if ($fx) {$di .= 'require_once '.$fw.';';}else {$fw = trim($fw);if (substr($fw, 0, 1) == '(' && substr($fw, -1) == ')') {$fw = substr($fw, 1, -1);}while (substr($fw, 0, 1) == '.') {$fw = substr($fw, 1);}$gc = $fw;if (!is_file($gc)) {$gc = dirname($fq) . '/' . $fw;}if (!is_file($gc)) {foreach ($this->dc as $y) {$gc = $this->fk->applyPropertiesReplace($y) . '/' . $fw;if (is_file($gc)) {$fw = $gc;break;}}}if (!is_file($gc)) {$this->fk->outputError(str_repeat(' ', $fs) . 'Unable to find file "'.$fw.'", included in "'.$fq.'"');return false;}$fw = realpath($gc);if (!$fw) {$this->fk->outputError(str_repeat(' ', $fs) . 'Unable to solve real path of file "'.$fw.'", included in "'.$fq.'"');return false;}$fw = $this->fk->clean_path($fw);if (in_array($fw, $this->fd)) {$fw = null;continue;}$this->fd[] = $fw;foreach ($this->ff as $u => $fn) {if ($u == $fw || $u == substr($fw, -1 * strlen($u))) {if ($fn !== false && $fn !== '0' && $fn != 'false' && $fn != 'none') {$di .= "require_once '".$fn."';";}else {}$this->fk->outputInfo(str_repeat(' ', $fs) . 'Excluded: '.$fw.($fn === false ? ' (rewrite=0)' : ''));$fw = null;break;}}if ($fw == null) continue;$br = $this->fp($fw, $fr, $fs+1);if ($br === false) return false;else if ($br !== null) {if ($this->fa || $fy) {$di .= $br;}else {$fv .= $br;}}unset($br);}$fw = null;continue;}$fw .= $cd;continue;}else if ($cd == '(' && $fz != null) {$this->gd(5.3, 'Closure line '.$fz[2]);}else if ($cd == '(' && $ga != null) {$this->gd(5.3, 'Closure line '.$ga[2]);}$fz = null;$ga = null;$di .= $cd;}$this->ge($cd);}unset($fh, $cc, $cd, $gb, $eo, $ee);return $fv.$di;}protected function ge($cd) {if (is_array($cd)) {switch ($cd[0]) {case T_CLASS_C :case T_FUNC_C :$this->gd(4.3, $cd);break;case T_ABSTRACT :case T_CATCH :case T_CLONE :case T_FINAL :case T_IMPLEMENTS :case T_INSTANCEOF :case T_INTERFACE :case T_METHOD_C :case T_PRIVATE :case T_PUBLIC :case T_PROTECTED :case T_THROW :case T_TRY :case T_UNSET_CAST :$this->gd(5.0, $cd);break;case T_HALT_COMPILER :$this->gd(5.1, $cd);break;case T_DIR :case T_NAMESPACE :case T_NS_C :case T_NS_SEPARATOR :case T_USE :case T_GOTO :$this->gd(5.3, $cd);case T_STRING :switch ($cd[1]) {case 'Exception' :case 'gc_enable' :case '__get' :case '__set' :case '__call' :case '__clone' :case '__sleep' :case '__wakeup' :case '__toString' :case '__invoke' : $this->gd(5.0, $cd);break;case 'SimpleXML' :case '__set_state' :$this->gd(5.1, $cd);break;case 'forward_static_call' :case 'get_called_class' :case '__callStatic()' :$this->gd(5.3, $cd);break;}break;}}}protected function gd($gf, $cd=null) {if ($gf > $this->fj) {$this->fj = $gf;}if ($this->bv && $gf > 5) {if ($cd == null) {return;}else if (is_array($cd)) {if ($cd[0] != T_NS_SEPARATOR) {$this->fk->outputInfo(' * Required version: '.$gf.' (token '.token_name($cd[0]).' "'.$cd[1].'" line '.$cd[2].')');}}else {$this->fk->outputInfo(' * Required version: '.$gf.' ('.$cd.')');}}}public function getTaskCommand() {return 'compile';}}  ?><?php if (!class_exists('class zipfile')) {class zipfile{var $gg= array();var $gh= array();var $gi = "\x50\x4b\x05\x06\x00\x00\x00\x00";var $gj= 0;function gk($gl = 0) {$gm = ($gl == 0) ? getdate() : getdate($gl);if ($gm['year'] < 1980) {$gm['year']= 1980;$gm['mon']= 1;$gm['mday']= 1;$gm['hours']= 0;$gm['minutes'] = 0;$gm['seconds'] = 0;} return (($gm['year'] - 1980) << 25) | ($gm['mon'] << 21) | ($gm['mday'] << 16) |($gm['hours'] << 11) | ($gm['minutes'] << 5) | ($gm['seconds'] >> 1);} function gn($c, $n, $bw = 0){$n= str_replace('\\', '/', $n);$go= dechex($this->gk($bw));$hexdtime = '\x' . $go[6] . $go[7]. '\x' . $go[4] . $go[5]. '\x' . $go[2] . $go[3]. '\x' . $go[0] . $go[1];eval('$hexdtime = "' . $hexdtime . '";');$gp= "\x50\x4b\x03\x04";$gp.= "\x14\x00";$gp.= "\x00\x00";$gp.= "\x08\x00";$gp.= $hexdtime;$gq = strlen($c);$gr= crc32($c);$gs= gzcompress($c);$gs= substr(substr($gs, 0, strlen($gs) - 4), 2); $gt= strlen($gs);$gp.= pack('V', $gr);$gp.= pack('V', $gt);$gp.= pack('V', $gq);$gp.= pack('v', strlen($n));$gp.= pack('v', 0);$gp.= $n;$gp .= $gs;$this -> gg[] = $gp;$gu = "\x50\x4b\x01\x02";$gu .= "\x00\x00";$gu .= "\x14\x00";$gu .= "\x00\x00";$gu .= "\x08\x00";$gu .= $hexdtime;$gu .= pack('V', $gr);$gu .= pack('V', $gt);$gu .= pack('V', $gq);$gu .= pack('v', strlen($n)); $gu .= pack('v', 0);$gu .= pack('v', 0);$gu .= pack('v', 0);$gu .= pack('v', 0);$gu .= pack('V', 32);$gu .= pack('V', $this -> gj); $this -> gj += strlen($gp);$gu .= $n;$this -> gh[] = $gu;} function file(){$c= implode('', $this -> gg);$gv = implode('', $this -> gh);return$c .$gv .$this -> gi .pack('v', sizeof($this -> gh)) .pack('v', sizeof($this -> gh)) .pack('V', strlen($gv)) .pack('V', strlen($c)) ."\x00\x00";} } }  ?><?php class PHPZipTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$k = $helper->getXMLTaskDefinition();$bv = OctoPHPusTaskHelper::xml_attribute($k, 'verbose') == 'true';$fl = OctoPHPusTaskHelper::xml_attribute($k, 'destfile');if (!$fl) {$helper->outputError('no destination file');return false;}$fl = $helper->applyPropertiesReplace($fl);$gw = new zipfile();foreach ($k->children() as $gx) {if ($gx->getName() == 'addfile') {$this->gn($helper,OctoPHPusTaskHelper::xml_attribute($gx, 'src'),OctoPHPusTaskHelper::xml_attribute($gx, 'to'),$gw,$bv);}else if ($gx->getName() == 'addfolder') {$this->gy($helper,OctoPHPusTaskHelper::xml_attribute($gx, 'src'),OctoPHPusTaskHelper::xml_attribute($gx, 'to'),$gw,$bv);}else if ($gx->getName() == 'mkdir') {$dt = OctoPHPusTaskHelper::xml_attribute($gx, 'dir');if (!$dt) {$helper->outputError('missing "dir" attribute in "mkdir" action');return false;}$gw->gn('',$dt . '/');}else {$helper->outputWarning('unknown action "'.$gx->getName().'"');}}$c = $gw->file();$helper->outputInfo('  Zipfile size: '. strlen($c) . ' o');$br = file_put_contents($fl, $c);if (!$br) {$helper->outputError('unable to write zip file "'.$fl.'"');return false;}$helper->outputInfo('  Created: '. OctoPHPusTaskHelper::clean_path($fl));return true;}protected function gy($helper, $gz, $ha, $gw, $bv) {if (!$gz) {$helper->outputError('missing "src" attribute in "addfolder" action');return false;}$gz = $helper->applyPropertiesReplace($gz);if (!is_dir($gz)) {$helper->outputError('folder not found "'.$gz.'"');return false;}if ($eu = opendir($gz)) {while (false !== ($dz = readdir($eu))) {if ($dz == '.' || $dz == '..') {continue;}$hb = "$gz/$dz";$hc = empty($ha) ? $dz : "$ha/$dz";if (is_file($hb)) {$this->gn($helper, $hb, $hc, $gw, $bv);}else if (is_dir($hb)) {$this->gy($helper, $hb, $hc, $gw, $bv);}}@closedir($eu);}else {$helper->outputError('unable to read folder "'.$gz.'"');return false;}return true;}protected function gn($helper, $gz, $ha, $gw, $bv=true) {if (!$gz) {$helper->outputError('missing attribute "src" in action "addfile"');return false;}$gz = $helper->applyPropertiesReplace($gz);if (!is_file($gz)) {$helper->outputError('file not found "'.$gz.'" in action "addfile"');return false;}$by = file_get_contents($gz);if ($by === false) {$helper->outputError('unable to read file "'.$gz.'" in action "addfile"');return false;}if ($ha) {$ha = $helper->applyPropertiesReplace($ha);$ha = str_replace(array('${filename}', '${filepath}'),array(basename($gz), $gz),$ha);}else {$ha = basename($gz);}if ($bv) {$helper->outputInfo('  Add: ' . OctoPHPusTaskHelper::clean_path($gz) . ' --> ' . $ha);}$gw->gn($by, $ha);return true;}public function getTaskCommand() {return 'zip';}}  ?><?php class FTPConnexionStore extends OctoPHPusStore {public function __construct($b, $hd, $he, $hf, $hg) {$this->b = $b;$this->c =& $hd;$this->he = $he;$this->hf = $hf;$this->hg = $hg;}public function hh() {return $this->c;}public function getHostName() {return $this->he;}public function hi() {return $this->hf;}public function hj() {return $this->hg;}}class FTPTask implements OctoPHPusTask {protected static function hk($hd, $dt) {@ftp_chdir($hd, '/');$et = @ftp_rawlist($hd, $dt, false);if (!is_array($et)) {return null;}$br = array();foreach ($et as $ev) {$hl = preg_split("/[\s]+/", $ev, 9);if ($hl[8] != '.' && $hl[8] != '..') {$di = '/'.$dt.'/'.$hl[8];while (strpos($di, '//') !== false) $di = str_replace('//', '/', $di);$br[] = array($hl[8], $hl[0]{0} == 'd', $di);unset($di);}}return $br;}protected static function hm($hd, $dt, $hn=null) {$ho = explode('/', $dt);$y = '';@ftp_chdir($hd, '/');foreach ($ho as $ck) {if (empty($ck)) continue;$y .= '/' . $ck;if (!@ftp_chdir($hd, $y)) {@ftp_chdir($hd, '/');if (!@ftp_mkdir($hd, $y)) {return $y;}else if ($hn) {@ftp_chmod($hd, intval($hn), $y);}}}return true;}protected static function ftp_rmdir($hd, $dt) {if (!@ftp_chdir($hd, $dt)) {return array();}$et = self::hk($hd, $dt);$br = array();foreach ($et as $ev) {if ($ev[1]) {$hp = self::ftp_rmdir($hd, $ev[2]);if (!is_array($hp)) return $hp;$br = array_merge($br, $hp);unset($hp);}else {if (!@ftp_delete($hq, $ev[2])) { return 'unable to delete file "'.$ev[2].'"';}$br[] = $ev[2];}}if (!@ftp_rmdir($hd, $dt)) {return 'unable to delete directory "'.$dt.'"';}$br[] = $dt;return $br;}public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$k = $helper->getXMLTaskDefinition();if (!extension_loaded('ftp')) {$helper->outputError('FTP extension is not loaded');return false;}$bv = OctoPHPusTaskHelper::xml_attribute($k, 'verbose') == 'false' ? false : true;$hr = OctoPHPusTaskHelper::xml_attribute($k, 'keepalive') == 'true' ? true : false;$v = OctoPHPusTaskHelper::xml_attribute($k, 'usestore');if ($v) {if (!$helper->storeExists($v)) {$helper->outputError('store "'.$v.'" not found');return false;}$v = $helper->getStore($v);if (!($v instanceof FTPConnexionStore)) {$helper->outputError('store "'.$v.'" must be an instance of FTPConnexionStore');return false;}$he = $v->getHostName();$hf = $v->hi();$hg = $v->hj();$hq = $v->hh();}else {$he = OctoPHPusTaskHelper::xml_attribute($k, 'host');if (!$he) {$helper->outputError('no "host" attribute supplied');return false;}$he = $helper->applyPropertiesReplace($he);$hg = OctoPHPusTaskHelper::xml_attribute($k, 'login');if (!$hg) {$helper->outputError('no "login" attribute supplied');return false;}$hg = $helper->applyPropertiesReplace($hg);$hs = OctoPHPusTaskHelper::xml_attribute($k, 'password');if (!$hs) {$helper->outputError('no "password" attribute supplied');return false;}$hs = $helper->applyPropertiesReplace($hs);$ht = OctoPHPusTaskHelper::xml_attribute($k, 'ssl');$hf = OctoPHPusTaskHelper::xml_attribute($k, 'port');if ($hf) $hf = intval($hf);else $hf = 21;$hu = false;if ($ht == 'true') {$hq = @ftp_ssl_connect($he) or $hu = true;}else {$hq = @ftp_connect($he) or $hu = true;}if ($hu || $hq === false) {$helper->outputError('unable to connect FTP server '.$he.($ht == 'true' ? ' with SSL' : ''));return false;}if (!@ftp_login($hq, $hg, $hs)) {$helper->outputError('unable to login FTP server '.$he);@ftp_close($hq);return false;}$hv = OctoPHPusTaskHelper::xml_attribute($k, 'passive');if ($hv == 'true') {@ftp_pasv($hq, true);}}$hw = OctoPHPusTaskHelper::xml_attribute($k, 'savestore');if ($hw) {$helper->saveStore(new FTPConnexionStore($hw, $hq, $he, $hf, $hg));}foreach ($k->children() as $en) {switch ($en->getName()) {case 'mkdir' :if (!$this->hx($hq, $bv, $en, $helper)) {@ftp_close($hq);return false;}break;case 'delete' :if (!$this->hy($hq, $bv, $en, $helper)) {@ftp_close($hq);return false;}break;case 'put' :if (!$this->hz($hq, $bv, $en, $helper)) {@ftp_close($hq);return false;}break;default :$helper->outputError('unknown action "'.$en->getName().'"');return false;}}if (!$hw && !$hr) {$helper->outputInfo('Connexion closed');@ftp_close($hq);}return true;}public function hx($hq, $bv, SimpleXMLElement $en, OctoPHPusTaskHelper $helper) {$dt = OctoPHPusTaskHelper::xml_attribute($en, 'dir');if (!$dt) {$helper->outputError('no "dir" attribute in action "mkdir"');return false;}$dt = $helper->applyPropertiesReplace($dt);$dt = OctoPHPusTaskHelper::clean_path($dt);$hn = OctoPHPusTaskHelper::xml_attribute($en, 'chmod');$br = self::hm($hq, $dt, $hn);if ($br !== true) {$helper->outputError('unable to create directory "'.$br.'" (target directory: '.$dt.') in action "mkdir"');return false;}if ($bv) {$helper->outputInfo('Created remote dir: '.$dt);}return true;}public function hy($hq, $bv, SimpleXMLElement $en, OctoPHPusTaskHelper $helper) {$ia = OctoPHPusTaskHelper::xml_attribute($en, 'remotefile');$ib = OctoPHPusTaskHelper::xml_attribute($en, 'remotedir');if ($ib) {$ib = $helper->applyPropertiesReplace($ib);$ib = OctoPHPusTaskHelper::clean_path($ib);$br = self::ftp_rmdir($hq, $ib);if (!is_array($br)) {$helper->outputError('unable to delete remote dir "'.$ib.'" ('.$br.') in action "delete"');return false;}if ($bv) {$helper->outputInfo('Deleted remote dir: '.$ib);}unset($br, $ev);}else if ($ia) {$ia = $helper->applyPropertiesReplace($ia);$ia = OctoPHPusTaskHelper::clean_path($ia);if (strpos($ia, '*') || strpos($ia, '?')) {$et = self::hk($hq, dirname($ia));$ic = basename($ia);foreach ($et as $ev) {if (!$ev[1] && fnmatch($ic, $ev[0])) {if (!@ftp_delete($hq, $ev[2])) {$helper->outputError('unable to delete file "'.$ia.'" in action "delete"');return false;}if ($bv) {$helper->outputInfo('Deleted remote file: '.$ev[2]);}}}unset($et, $ic);if ($bv) {$helper->outputInfo('Deleted remote files matching: '.$ia);}}else if (@ftp_size($hq, $ia) != -1) {if (!@ftp_delete($hq, $ia)) {$helper->outputError('unable to delete file "'.$ia.'" in action "delete"');return false;}if ($bv) {$helper->outputInfo('Deleted remote file: '.$ia);}}}else {$helper->outputError('no "remotefile" or "remotedir" attribute in action "delete"');return false;}return true;}public function hz($hq, $bv, SimpleXMLElement $en, OctoPHPusTaskHelper $helper) {$id = OctoPHPusTaskHelper::xml_attribute($en, 'localfile');if ($id) {return $this->ie($id, $hq, $bv, $en, $helper);}$ig = OctoPHPusTaskHelper::xml_attribute($en, 'localfilesmatch');if ($ig) {return $this->ii($ig, $hq, $bv, $en, $helper);}$helper->outputError('no "localfile" or "localfilesmatch" attribute in action "put"');return false;}public function ii($ig, $hq, $bv, SimpleXMLElement $en, OctoPHPusTaskHelper $helper) {$ig = $helper->applyPropertiesReplace($ig);$dt = dirname($ig);$dt = OctoPHPusTaskHelper::clean_path($dt);$ic = basename($ig);$ib = OctoPHPusTaskHelper::xml_attribute($en, 'remotedir');if (!$ib) {$helper->outputError('no "remotedir" attribute in action "put"');return false;}$ib = $helper->applyPropertiesReplace($ib);$ib = OctoPHPusTaskHelper::clean_path($ib);$et = array();if ($eu = @opendir($dt)) {while (false !== ($dz = @readdir($eu))) {if ($dz == '.' || $dz == '..') continue;if (!is_file($dt.'/'.$dz)) continue;if (fnmatch($ic, $dz)) {$et[OctoPHPusTaskHelper::clean_path($dt.'/'.$dz)] = $dz;}}}else {$helper->outputError('unable to open local directory "'.$dt.'" in action "put"');return false;}if (sizeof($et) > 0) {if (!@ftp_chdir($hq, $ib)) {$helper->outputError('unable to select directory "'.$ib.'" to upload '.sizeof($et).' matching file(s) in action "put"');return false;}$eg = 0;foreach ($et as $y => $dz) {if (!@ftp_put($hq, $dz, $y, FTP_BINARY)) {$helper->outputError('unable to upload file "'.$y.'" to directory "'.$ib.'" in action "put"');return false;}if ($bv) {$helper->outputInfo('Upload file: "'.$y.'" -> "'.OctoPHPusTaskHelper::clean_path($ib.'/'.$dz).'"');}$eg++;}}if ($eg > 0) {$helper->outputInfo($eg.' file(s) uploaded to "'.$ib.'"');}return true;}public function ie($id, $hq, $bv, SimpleXMLElement $en, OctoPHPusTaskHelper $helper) {$id = $helper->applyPropertiesReplace($id);$id = OctoPHPusTaskHelper::clean_path($id);$ia = OctoPHPusTaskHelper::xml_attribute($en, 'remotefile');if (!$ia) {$helper->outputError('no "remotefile" attribute in action "put"');return false;}$ia = $helper->applyPropertiesReplace($ia);$ia = OctoPHPusTaskHelper::clean_path($ia);if (!@is_file($id)) {$helper->outputError('local file not found ('.$id.') in action "put"');return false;}$hl = pathinfo($ia);if (!@ftp_chdir($hq, '/'.$hl['dirname'])) {$helper->outputError('unable to select directory "/'.$hl['dirname'].'" to upload file "'.$id.'" in action "put"');return false;}if (!@ftp_put($hq, $hl['basename'], $id, FTP_BINARY)) {$helper->outputError('unable to upload file "'.$id.'" to "'.$ia.'" in action "put"');return false;}unset($hl);if ($bv) {$helper->outputInfo('Upload file:"'.$id.'" -> "'.$ia.'"');}return true;}public function getTaskCommand() {return 'ftp';}}  ?><?php class XMLValidateTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$k = $helper->getXMLTaskDefinition();foreach ($k->children() as $en) {switch ($en->getName()) {case 'checkfile' :$dz = OctoPHPusTaskHelper::xml_attribute($en, 'file');if (!$dz) {$helper->outputError('no "file" attribute in action "checkfile"');return false;}$dz = $helper->applyPropertiesReplace($dz);if (!is_file($dz)) {$helper->outputError('file not found ('.$dz.') in action "checkfile"');return false;}$br = false;$fs = error_reporting();error_reporting(E_ALL);try {ob_start();$ij = new DOMDocument("1.0");$br = $ij->ik($dz);$by = ob_get_contents();ob_end_clean();unset($ij);} catch (Exception $u) {$br = false;$by = $u->getMessage();}error_reporting($fs);if (!$br) {$il = explode("\n", strip_tags($by));foreach ($il as $ee) {$ee = trim($ee);if (empty($ee)) continue;$ee = str_replace(' DOMDocument::load() [domdocument.load]: ', '', $ee);$ee = strstr($ee, 'in file://', true);if (empty($ee)) continue;$helper->outputInfo($ee);}unset($il, $ee);$helper->outputInfo('Document "'.$dz.'" is INVALID !!');}else {$helper->outputInfo('Document "'.$dz.'" is well-formed');}return $br;break;default :$helper->outputError('unknown action "'.$en->getName().'"');return false;}}}public function getTaskCommand() {return 'xmlvalidate';}}  ?><?php class PHPObfuscator {public function __construct($im=array()) {$this->im = array_merge(array('obfuscated_names_length' => 20,'remove_comments' => true,'remove_doc_comments' => true,'pack_code' => true,'ignore_names' => null), $im);}protected $io = null;public function iq($dz) {$by = @file_get_contents($dz);if (!$by) {throw new Exception('unable to get file contents');}$this->ir($by, $dz);}public function is($s) {if (!is_string($s)) {throw new Exception('invalid argument $string');}$this->ir($s);}protected function ir($it, $dz = '.') {$iu = new PHPObfuscatorGeneralParser($it, $this->im, $dz);unset($it);$this->io = $iu->iv();}public function iw() {return $this->io;}}class PHPObfuscatorCatalogue {protected $ix= array();protected $iy= null;protected $iz= null;protected $ja = array('do', 'while', 'for', 'in', 'as', 'goto', 'break', 'switch', 'function', 'class', 'int', 'bool', 'boolean', 'float','static', 'public', 'private', 'protected', 'interface', 'namespace', 'use', 'foreach', 'const', 'string', 'chr', 'and','integer', 'double', 'if', 'false', 'true', 'null', 'throw', 'catch', 'new', 'case', 'array', 'unset', 'return', 'or','extends', 'implements', 'var', 'global', 'abstract', 'clone', 'continue', 'declare', 'echo', 'else', 'elseif', 'then','endfor', 'endif', 'enddeclare', 'endforeach', 'endswitch', 'endwhile', 'exit', 'die', 'eval', 'final', 'cfunction','instanceof', 'isset', 'xor');protected $jb = 0;public function __construct($jc=10, $jd=null) {$this->iy = array('false', 'true', 'null', 'self', '__construct', '__destruct', '__tostring', '__clone', '__call','__get', '__set', '__isset', '__unset', '__sleep', '__wakeup', '__set_state', '__autoload', 'parent');$this->iz = array('$this', '$argv', '$argc', '$GLOBALS', '$_SERVER', '$_GET', '$_POST', '$_FILES','$_COOKIE', '$_SESSION', '$_REQUEST', '$_ENV');if (is_array($jd)) {foreach ($jd as $ef) {if (is_string($ef)) {if (substr($ef, 0, 1) == '$') {$this->iz[] = strtolower($ef);}else {$this->iy[] = strtolower($ef);}}}}}public static function je($jf, $jg="abcdefghijklmnopqrstuvwxyz") {if ($jf === 0) {return $jg{0};}$br = '';while ($jf > 0) {$jb = (int) ($jf % strlen($jg));$br = $jg{$jb} . $br;$jf = (int) ($jf / strlen($jg));}return $br;}public function jh($n) {if ($this->ji($n)) {return $n;}if ($n == '$_SERVER') {echo "\n[OctoPHPus warning] Ignored var $n is obfuscated!";}$ga = false;if (substr($n, 0, 1) == '$') {$ga = true;$n = substr($n, 1);}if (array_key_exists($n, $this->ix)) {return ($ga ? '$' : '') . $this->ix[$n];}$jj = self::je($this->jb);while (in_array($jj, $this->ja) || $this->jk($jj)) {$jj = self::je($this->jb++);}$this->jb++;$this->ix[$n] = $jj;return ($ga ? '$' : '') . $jj;}public function jk($p) {return function_exists($p) || in_array(strtolower($p), $this->iy) || defined($p) || class_exists($p) || interface_exists($p) || in_array($n, $this->iz);}public function ji($n) {return in_array($n, $this->iz);}}class PHPObfuscatorGeneralParser {protected $io = '';protected $dz;protected $im;protected $jl;protected $jm = false;public function __construct($fh, $im, $dz = null, PHPObfuscatorCatalogue $jl = null) {$this->im = $im;$this->file = $dz;$this->jl = $jl != null ? $jl : new PHPObfuscatorCatalogue($im['obfuscated_names_length'],$im['ignore_names']);$cc = @token_get_all($fh);$this->fo($cc);}public function jn() {return $this->file;}public function jo() {return $this->im;}public function iv() {return $this->io;}public function jp() {return $this->jq;}public function fo($cc) {foreach ($cc as $cd) {if (is_array($cd)) {list($gb, $eo, $ee) = $cd;if ($gb == T_OPEN_TAG) {$this->jm = true;$this->jr('<?php ');continue;}else if ($gb == T_CLOSE_TAG) {$this->jm = false;$this->jr(' ?>');continue;}else if ($gb == T_WHITESPACE) {$this->jr($this->jm ? ($this->im['pack_code'] ? ' ' : $eo) : $eo);continue;}else if ($gb == T_DOC_COMMENT) {if (!$this->im['remove_doc_comments']) {$this->jr($eo);}continue;}else if ($gb == T_COMMENT) {if (!$this->im['remove_comments'] && $this->im['pack_code']) {$this->jr($eo);}continue;}if (!$this->jm) {$this->jr($eo);continue;}if ($gb == T_VARIABLE) {$this->jr($this->jl->jh($eo));continue;}else if ($gb == T_STRING) {if (!$this->jl->jk($eo)) {$this->jr($this->jl->jh($eo));continue;}}$this->jr($eo);}else {$this->jr($cd);}}}public function jr($p) {$this->io .= $p;}}  ?><?php class ObfuscateTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$k = $helper->getXMLTaskDefinition();$im = array('remove_comments'=> (OctoPHPusTaskHelper::xml_attribute($k, 'removeComments') == 'false' ? false : true),'remove_doc_comments'=> (OctoPHPusTaskHelper::xml_attribute($k, 'removeDocComment') == 'false' ? false : true),'pack_code'=> (OctoPHPusTaskHelper::xml_attribute($k, 'packCode') == 'false' ? false : true));foreach ($k->children() as $en) {switch ($en->getName()) {case 'transform' :$eh = OctoPHPusTaskHelper::xml_attribute($en, 'srcfile');if (!$eh) {$helper->outputError('no "srcfile" attribute in action "transform"');return false;}$eh = $helper->applyPropertiesReplace($eh);if (!is_file($eh)) {$helper->outputError('file "'.$eh.'" not found, in action "transform"');return false;}$fl = OctoPHPusTaskHelper::xml_attribute($en, 'destfile');if (!$fl) {$helper->outputError('no "destfile" attribute in action "transform"');return false;}$fl = $helper->applyPropertiesReplace($fl);$jd = array();foreach ($en->children() as $js) {if ($js->getName() == 'ignore') {$n = OctoPHPusTaskHelper::xml_attribute($js, 'name');if ($n) {$jd[] = $n;}}unset($n);}$im['ignore_names'] = $jd;try {$eq = new PHPObfuscator($im);$eq->iq($eh);if (!@file_put_contents($fl, $eq->iw())) {$helper->outputError('unable to write obfuscated file "'.$fl.'"');return false;}else {$helper->outputInfo('File "'.$eh.'" has been obfuscated and stored in file "'.$fl.'"');}}catch (Exception $u) {$helper->outputException($u);return false;}break;default :$helper->outputError('unknown action "'.$en->getName().'"');return false;}}return true;}public function getTaskCommand() {return 'obfuscate';}}  ?><?php class CharsetTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {$k = $helper->getXMLTaskDefinition();$en = OctoPHPusTaskHelper::xml_attribute($k, 'action');if (!$en) {$helper->outputError('no "action" attribute');return false;}$en = $helper->applyPropertiesReplace($en);switch ($en) {case 'check' :if (!function_exists('mb_detect_encoding')) {$helper->outputError('php_mbstring extension is not loaded.');return false;}$dz = OctoPHPusTaskHelper::xml_attribute($k, 'file');if (!$dz) {$helper->outputError('no "file" attribute in action "check"');return false;}$dz = $helper->applyPropertiesReplace($dz);$dz = $helper->clean_path($dz);if (!is_file($dz)) {$helper->outputError('File to check not found: '.$dz);return false;}$hu = OctoPHPusTaskHelper::xml_attribute($k, 'throwerror') == 'true';$fh = @file_get_contents($dz);if ($fh === false) {$helper->outputError('Unable to read file: '.$dz);return false;}$jt = @mb_detect_encoding($fh);unset($fh);if ($jt == false) {$helper->outputWarning('Unable to detect file encoding: '.$dz);return true;}$ju = OctoPHPusTaskHelper::xml_attribute($k, 'charset');if ($ju) {if ($jt != $ju) {if ($hu) {$helper->outputError('Invalid charset for file "'.$dz.'" : '.$jt.' instead of '.$ju.' required');return false;}else {$helper->outputWarning('Invalid charset for file "'.$dz.'" : '.$jt.' instead of '.$ju.' required');}}}else {$helper->outputInfo('Valid charset '.$jt.' for file: '.$dz);}return true;break;default :$helper->outputError('unkonwn action "'.$en.'"');return false;}}public function getTaskCommand() {return 'charset';}}  ?><?php class SassTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {if (!class_exists('SassParser')) {$helper->outputError('SassParser not found. Please load PHamlP-Sass library first.');return false;}$k = $helper->getXMLTaskDefinition();$eh = OctoPHPusTaskHelper::xml_attribute($k, 'srcfile');if (!$eh) {$helper->outputError('property "srcfile" not found');return false;}$eh = $helper->applyPropertiesReplace($eh);$eh = OctoPHPusTaskHelper::clean_path($eh);$fl = OctoPHPusTaskHelper::xml_attribute($k, 'destfile');if (!$fl) {$helper->outputError('property "destfile" not found');return false;}$fl = $helper->applyPropertiesReplace($fl);$fl = OctoPHPusTaskHelper::clean_path($fl);if (!is_file($eh)) {$helper->outputError('source file not found: ' . $eh);return false;}$iu = new SassParser(array('cache' => false,'style' => SassRenderer::STYLE_COMPRESSED));try {$jv = $iu->parse($eh, true)->render();}catch (Exception $u) {$helper->outputException($u);return false;}if (@!file_put_contents($fl, $jv)) {$helper->outputError('unable to write file: ' . $fl);if (empty($jv)) {$helper->outputInfo('   (nothing to write)');}else if (!is_writable($fl)) {$helper->outputInfo('   (not writable)');}return false;}$helper->outputInfo($eh . ' >> ' . $fl);return true;}public function getTaskCommand() {return 'sass';}}  ?><?php class CRXTask implements OctoPHPusTask {public function handleOctophpusTask(OctoPHPusTaskHelper $helper) {if (!extension_loaded('openssl')) {$jw = (PHP_SHLIB_SUFFIX === 'dll') ? 'php_' : '';if (@!jx($jw . 'openssl' . PHP_SHLIB_SUFFIX)) {$helper->outputError('CRX generator requires `openssl`');return false;}}if (!function_exists('openssl_pkey_get_private')) {$helper->outputError('CRX generator requires OpenSSL key generation and certificate signing functions');$helper->outputInfo('  See: http://www.php.net/manual/en/openssl.installation.php');return false;}$k = $helper->getXMLTaskDefinition();$jy = OctoPHPusTaskHelper::xml_attribute($k, 'permfile');if (!$jy) {$helper->outputError('property "permfile" not found');return false;}$jy = $helper->applyPropertiesReplace($jy);$jy = OctoPHPusTaskHelper::clean_path($jy);$jz = OctoPHPusTaskHelper::xml_attribute($k, 'zipfile');if (!$jz) {$helper->outputError('property "zipfile" not found');return false;}$jz = $helper->applyPropertiesReplace($jz);$jz = OctoPHPusTaskHelper::clean_path($jz);$fl = OctoPHPusTaskHelper::xml_attribute($k, 'destfile');if (!$fl) {$helper->outputError('property "destfile" not found');return false;}$fl = $helper->applyPropertiesReplace($fl);$fl = OctoPHPusTaskHelper::clean_path($fl);if (!file_exists($jy)) {$helper->outputError('perm file not found: ' . $jy);return false;}if (!is_file($jz)) {$helper->outputError('zip file not found: ' . $jz);return false;}$helper->outputInfo('Read permission private key...');$ka = @file_get_contents($jy);if (!$ka) {$helper->outputError('unable to read perm file: ' . $jy);return false;}$kb = openssl_pkey_get_private($ka);if ($kb === false) {$helper->outputError('unable to extract private key from perm file');return false;}$helper->outputInfo('Sign extension data...');$gw = @file_get_contents($jz);if (!$gw) {$helper->outputError('unable to read zip file: ' . $jz);return false;}$kc = '';if (!openssl_sign($gw, $kc, $kb, 'sha1')) {$helper->outputError('unable to sign extension archive');return false;}openssl_free_key($kb);$kd = self::ke($ka);$ec = base64_decode($kd);$kf = fopen($fl, 'wb');fwrite($kf, 'Cr24');fwrite($kf, pack('V', 2));fwrite($kf, pack('V', strlen($ec)));fwrite($kf, pack('V', strlen($kc)));fwrite($kf, $ec);fwrite($kf, $kc);fwrite($kf, $gw);fclose($kf);unset($ka, $kb, $gw, $kc, $kd, $ec, $kf);$helper->outputInfo('CRX created: ' . $fl);return true;}public static function ke($kg) {$kh = 'CERTIFICATE-----';$kg = substr($kg, strpos($kg, $kh)+strlen($kh));$kg = substr($kg, 0, strpos($kg, '-----END'));return base64_decode($kg);}public static function ki($kj) {return "-----BEGIN CERTIFICATE-----\n".chunk_split(base64_encode($kj), 64, "\n")."-----END CERTIFICATE-----\n";}public function getTaskCommand() {return 'crx';}}  ?><?php  $kk = get_declared_classes();foreach ($kk as $eg) {$br = new ReflectionClass($eg);if ($br->implementsInterface(OCTOPHPUS_TASK_INTERFACE)) {OctoPHPus::installTask($eg);}}if (strtoupper(PHP_SAPI) == 'CLI' && !defined('OCTOPHPUS_NO_CLI')) {if (!function_exists('parseParameters')) {function kl($km=null, $kn=true, $ko = array()) {$kp = array();if (!$km) {$km = $GLOBALS['argv'];}$kq = false;reset($km);while (list($di, $kr) = each($km)) {if ($kr{0} == '-' && ($kn || !$kq)) {$ks = substr($kr, 1);$o = true;if ($ks{0} == '-') {$ks = substr($ks, 1);if (strpos($kr, '=') !== false) {list($ks, $o) = explode('=', substr($kr, 2), 2);}}$kt = current($km);if (!in_array($ks, $ko) && $o === true && $kt !== false && $kt{0} != '-') {list($di, $o) = each($km);}$kp[$ks] = $o;}else {$kq = true;$kp[] = $kr;}}return $kp;}}$ku = array_shift($argv);$h = array_shift($argv);$argv = kl($argv, false);$bv = true;if (array_key_exists('verbose', $argv)) {$bv = $argv['verbose'] == '1';unset($argv['verbose']);}if (sizeof($argv) < 1) {echo "Usage: make <packagename> <[--list]|[--version]>\n       make <packagename> [options] <taskname> [params...]\n
\nArguments:\n --list       List available targets in buildfile.\n --version    Display version informations.";}else if (in_array('--version', $argv)) {echo 'OctoPHPus version '.OCTOPHPUS_VERSION."\n";echo 'Running on PHP '.phpversion().', '.php_uname('a');}else if (in_array('--list', $argv)) {$dd = new OctoPHPus();$kv = $dd->getTargetsInBuildXML($h);if (!$kv) {echo 'Unable to get targets in file '.$h;}else {echo 'Targets in '.$h.':';foreach ($kv as $n => $bt) {echo "\n ".str_pad($n, OctoPHPus::ez()+5, ' ', STR_PAD_RIGHT).$bt;}}}else {$bu = array_shift($argv);$dd = new OctoPHPus();class kw implements OctoPHPusListener {public function octophpusConsoleEvent($a) {echo "\n$a";}}$dd->addListener(new kw());$dd->executeBuildXML($h, $bu, $bv);}unset($ku, $h, $bu, $dd, $kv, $n, $bt);}  ?>