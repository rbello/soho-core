<?php
/*
$Id: formbuilder-2.0.14.php,v 2.0.14 2012/04/26 03:33:58 evolya Exp $

FormBuilder - Web forms generator

Copyright (c) 2012 www.evolya.fr

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you have any questions or comments, please email:

contact@evolya.fr
http://www.evolya.fr/
 */
?><?php if (!class_exists('i18n')) {final class i18n {private static $data = array();public static function add($id, $string) {self::$data[$id] = $string;}public static function set($id, $string) {self::add($id, $string);}public static function get($id) {return self::$data[$id];}}} ?><?php function i18n_loadLang_English() {i18n::add('FormBuilder.Capcha.Renew', 'Get a new capcha');i18n::add('FormBuilder.Button.Cancel', 'Cancel');i18n::add('FormBuilder.Button.Reset', 'Reset');i18n::add('FormBuilder.Button.Submit', 'Submit');i18n::add('FormBuilder.Error.Empty', 'Required field cannot be left blank.');i18n::add('FormBuilder.Error.Capcha', 'The characters you entered didn\'t match the word verification. Please try again.');i18n::add('FormBuilder.Error.ChooseValue', 'Please select a value.');i18n::add('FormBuilder.Error.NoMatch', 'This value doesn\'t match the data pattern.');i18n::add('FormBuilder.Error.NotInt', 'This value is not an integer.');i18n::add('FormBuilder.Error.MinLength', 'This value is too short (%i chars min).');i18n::add('FormBuilder.Error.MaxLength', 'This value is too long (%i chars max).');i18n::add('FormBuilder.Error.Exception', 'This value is not valid. (?)');i18n::add('FormBuilder.Error.EmptyString', 'You can\'t leave this field blank.');i18n::add('FormBuilder.Error.OutOfBounds', 'This value is out of bounds.');i18n::add('FormBuilder.Error.Invalid', 'This value is not valid.');i18n::add('FormBuilder.Error.File.Required', 'Please select a file to upload.');i18n::add('FormBuilder.Error.Partial', 'Internal error (Data was only partially uploaded).');i18n::add('FormBuilder.Error.Map.Null', 'Use the marker to select a position on the map.');} ?><?php function i18n_loadLang_French() {i18n::add('FormBuilder.Capcha.Renew', 'Nouveau');i18n::add('FormBuilder.Button.Cancel', 'Annuler');i18n::add('FormBuilder.Button.Reset', 'Réinitialiser');i18n::add('FormBuilder.Button.Submit', 'Envoyer');i18n::add('FormBuilder.Error.Empty', 'Ce champ est obligatoire.');i18n::add('FormBuilder.Error.Capcha', 'La valeur que vous avez entré est invalide. Veuillez essayer à nouveau.');i18n::add('FormBuilder.Error.ChooseValue', 'Veuillez choisir une valeur.');i18n::add('FormBuilder.Error.NoMatch', 'Cette valeur ne correspond pas au format attendu.');i18n::add('FormBuilder.Error.NotInt', 'Cette valeur doit être un Entier.');i18n::add('FormBuilder.Error.MinLength', 'Cette valeur est trop petite (%i charactères min).');i18n::add('FormBuilder.Error.MaxLength', 'Cette valeur est trop longue (%i charactères max).');i18n::add('FormBuilder.Error.Exception', 'Cette valeur est invalide. (?)');i18n::add('FormBuilder.Error.EmptyString', 'Vous ne pouvez laisser ce champ vide.');i18n::add('FormBuilder.Error.OutOfBounds', 'Cette valeur est en dehors des limites.');i18n::add('FormBuilder.Error.Invalid', 'Cette valeur est invalide.');i18n::add('FormBuilder.Error.File.Required', 'Veuillez indiquer un fichier à envoyer.');i18n::add('FormBuilder.Error.Partial', 'Erreur interne (les données ont été partiellement transmises).');i18n::add('FormBuilder.Error.Map.Null', 'Veuillez utiliser le marqueur pour situer une position sur la carte.');} ?><?php interface Form {public function execute();public function getFormName();public function setFormName($formName);public function getFormActionURL();public function setFormActionURL($formActionURL);public function getFormMethod();public function setFormMethod($formMethod);public function getFormCancel();public function setFormCancel($formCancel);public function getEncodingType();public function setEncodingType($encType);public function add(Field $field, $position=-1);public function addFormField(Field $field, $position=-1);public function removeField($field);public function moveField($fieldname, $position);public function getFields();public function getField($i);public function getLastField();public function getFirstField();public function getFieldByName($name);public function __get($name);public function getFieldValue($name);public function getFieldsValues();public function setFieldsValues($values);public function cleanFieldsErrors();public function getCssSelector();public function getPostRawData();public function getGetRawData();public function getQueryRawData();public function getFileUploadRawData();public function getRequiredFiles($path=null, FormRendererInterface $renderer=null);public function createFormJavascriptCode();public function render($options=array(), FormRendererInterface $renderer=null);public function createFromXML($xml);public function bind($event, $callback);public function trigger($event, $data=null);public function xml();public function __toString();} ?><?php abstract class AbstractForm implements Form {protected $fields = array();public $sent = false;public $submitted = false;public $valid = true;protected $formName = null;protected $formActionURL = null;protected $formMethod = 'POST';protected $formCancel = 'history.back(1);';protected $encType = 'application/x-www-form-urlencoded';protected $executed = false;protected $listeners = array();public $idPrefixe = 'fb';public function __construct($lang='en', $formName, $formActionURL, $formMethod='POST') {if ($lang == 'fr') {i18n_loadLang_French();}else {i18n_loadLang_English();}$this->setFormName($formName);$this->setFormActionURL($formActionURL);$this->setFormMethod($formMethod);}public function getFormName() {return $this->formName;}public function setFormName($formName) {if (!is_string($formName)) {throw new Exception('Invalid $formName');}$this->formName = $formName;}public function getFormActionURL() {return $this->formActionURL;}public function setFormActionURL($formActionURL) {if (!is_string($formActionURL)) {throw new Exception('Invalid $formActionURL');}$this->formActionURL = $formActionURL;}public function getFormMethod() {return $this->formMethod;}public function setFormMethod($formMethod) {$formMethod = strtoupper($formMethod);if ($formMethod != 'GET' && $formMethod != 'POST') {throw new Exception('Invalid $formMethod');}$this->formMethod = $formMethod;}public function getFormCancel() {return $this->formCancel;}public function setFormCancel($formCancel) {$this->formCancel = (string) $formCancel;}public function getEncodingType() {return $this->encType;}public function setEncodingType($encType) {$this->encType = $encType;}public function add(Field $field, $position=-1) {return $this->addFormField($field, $position);}public function addField(Field $field, $mandatory=false, $textPrepend=null, $textAppend=null, FieldCheckDelegate $delegate=null) {deprecated('Method AbstractForm::addField()', whoCalledMe());if ($field instanceof FileInputField || $field instanceof ImageSelectorField) {$this->encType = 'multipart/form-data';}if (array_key_exists($field->getName(), $this->fields)) {throw new Exception('Field with name "'.$field->getName().'" allready exists');}$field->setProperties(array('mandatory' => $mandatory,'prepend' => $textPrepend,'append' => $textAppend,'delegate' => $delegate));$this->fields[$field->getName()] = $field;$this->trigger('addedfield', $field);if ($this->sent) {$ok = $this->checkField($field);if ($this->submitted) {$this->valid = $this->valid && $ok;}else {$field->cleanError();}}return $this;}public function addFormField(Field $field, $position=-1) {if (array_key_exists($field->getName(), $this->fields)) {throw new Exception('Field with name "'.$field->getName().'" allready exists');}if (!is_int($position) || $position < 0) {$this->fields[$field->getName()] = $field;}else {$r = array();$i = 0;foreach ($this->fields as $n => $f) {if ($i == $position) {$r[$field->getName()] = $field;}$r[$n] = $f;$i++;}$this->fields = $r;unset($r, $i, $n, $f);}$this->trigger('addedfield', $field);if ($field instanceof FileInputField) {$this->encType = 'multipart/form-data';}if ($this->sent) {$ok = $this->checkField($field);if ($this->submitted) {$this->valid = $this->valid && $ok;}else {$field->cleanError();}}return $this;}public function removeField($field) {if (is_string($field)) {foreach ($this->fields as $k => $f) {if ($f->getName() == $field) {unset($this->fields[$k]);return true;}}}else if ($name instanceof Field) {foreach ($this->fields as $k => $f) {if ($f == $field) {unset($this->fields[$k]);return true;}}}return false;}public function moveField($fieldname, $position) {throw new Exception("Unspported operation");}public function getFields() {return $this->fields;}public function getField($i) {$i = intval($i);$c = 0;foreach ($this->fields as $field) {if ($c++ == $i) return $field;}return null;}public function getLastField() {$f = array_pop($this->fields);array_push($this->fields, $f);return $f;}public function getFirstField() {$f = array_shift($this->fields);array_unshift($this->fields, $f);return $f;}public function getFieldByName($name) {if (!is_string($name)) return null;return array_key_exists($name, $this->fields) ? $this->fields[$name] : null;}public function fieldExists($name) {if (!is_string($name)) return false;return array_key_exists($name, $this->fields);}public function __get($name) {return $this->getFieldByName($name);}public function __call($name, $args) {if (array_key_exists($name, $this->fields)) {$this->fields[$name]->__invoke(@$args[0]);return $this;}trigger_error('Call to undefined method AbstractForm::'.$name.'()', E_USER_ERROR);exit();}public function getFieldValue($name) {if (!is_string($name)) return null;return array_key_exists($name, $this->fields) ? $this->fields[$name]->getValue() : null;}public function getFieldsValues() {$r = array();foreach ($this->fields as $field) {if ($field instanceof Separator || $field instanceof HTML) {continue;}else if ($field instanceof SelectField) {if ($field->getProperty('editable')) {$r[$field->getName()] = $field->getValue();}else {$r[$field->getName()] = $field->getKey();}}else {$r[$field->getName()] = $field->getValue();}}return $r;}public function setFieldsValues($values) {if (!is_array($values)) return 0;$c = 0;foreach ($values as $fieldName => $value) {if (array_key_exists($fieldName, $this->fields)) {$this->fields[$fieldName]->setValue($value);}}return $c;}public function isFieldMandatory($field) {deprecated('Method AbstractForm::isFieldMandatory()', whoCalledMe());if ($field instanceof Field) {$field->getProperty('mandatory');}else if (is_string($field)) {return array_key_exists($field, $this->fields) ? $this->fields[$field]->getProperty('mandatory') : null;}return null;}public function __invoke($event, $callback=null) {if (is_string($event)) {return $this->getFieldByName($event);}if ($event instanceof FormEventListener || $event instanceof Closure) {$this->bind('valid', $event);}else {$this->bind($event, $callback);}return $this;}public function bind($event, $callback) {if (is_string($event) && ($callback instanceof FormEventListener || $callback instanceof Closure)) {$this->listeners[] = array($event, &$callback);$this->trigger('bind', array('callback' => $callback, 'event' => $event));}return $this;}public function trigger($event, $data=null) {if (is_string($event)) {foreach ($this->listeners as $i) {if ($i[0] == '*' || $i[0] == $event) {if ($i[1] instanceof FormEventListener) {$i[1]->onFormEvent($this, $event, $data);}else {$i[1]($this, $event, $data);}}}}return $this;}public function getCssSelector() {return '#'.$this->idPrefixe.$this->getFormName();}public function getQueryRawData() {return $this->formMethod == 'GET' ? $_GET : $_POST;}public function getPostRawData() {return $_POST;}public function getGetRawData() {return $_GET;}public function getFileUploadRawData() {return isset($_FILES) ? $_FILES : array();}public function execute() {$this->executed = true;$this->trigger('execute', 'start');$this->sent = false;$this->submitted = false;$this->valid = true;$this->cleanFieldsErrors();$data = $this->getQueryRawData();$files = $this->getFileUploadRawData();if ($_SERVER['REQUEST_METHOD'] != $this->formMethod) {$this->trigger('execute', 'end (invalid method)');return $this;}if (sizeof($this->fields) > 0) {$ok = false;foreach ($this->fields as $field) {if ($field instanceof FileInputField) {if (array_key_exists($field->getName(), $files)) {$ok = true;break;}}else if (array_key_exists($field->getName(), $data)) {$ok = true;break;}}if (!$ok) {$this->trigger('execute', 'end (not sent)');return $this;}}else {$this->trigger('execute', 'end (no fields)');return $this;}$this->sent = true;$this->trigger('status', 'sent');if (get_magic_quotes_gpc() == 1) {foreach ($data as $k => &$v) {$data[$k] = is_array($v) ? $v : stripslashes("$v");}}if (array_key_exists('formSent'.$this->formName, $data)) {$this->submitted = true;$this->trigger('status', 'submitted');$this->valid = $this->checkFields();$this->trigger('execute', $this->valid ? 'valid' : 'error');}else {$this->checkFields();$this->cleanFieldsErrors();}$this->trigger('execute', 'end');if ($this->valid) {$this->trigger('valid');}return $this;}public function cleanFieldsErrors() {foreach ($this->fields as $field) {$field->cleanError();}return $this;}protected function checkFields() {$ok = true;foreach ($this->fields as $e) {$ok = $this->checkField($e) && $ok;}foreach ($this->fields as $e) {if (!$e->hasError() && $e->getProperty('delegate') != null) {$r = $e->getProperty('delegate')->getFieldError($e, $this);if (is_string($r)) {$e->setError($r);$ok = false;}}}return $ok;}protected function checkField(Field $e) {$ok = true;if ($e instanceof Separator || $e instanceof HTML) {return true;}$data = $this->getQueryRawData();$this->trigger('before.checkfield', $e);if ($e instanceof FileInputField) {$ok = $e->checkUpload($this);}else if ($e instanceof EditableTableField) {$ok = $e->checkData($this);}else if (array_key_exists($e->getName(), $data)) {$value = $data[$e->getName()];$value = is_array($value) ? $value : trim("$value");if (is_array($value) && !($e instanceof ListField) && !($e instanceof CheckBoxListField)) {$e->setError(i18n::get('FormBuilder.Error.Exception'));$ok = false;}if ($ok && $e->getProperty('mandatory') == true && empty($value) && $value !== "0") {$e->setError(i18n::get('FormBuilder.Error.Empty'));$ok = false;}$tmp = null;if ($ok && !$e->checkValue($value, $tmp)) {$ok = false;}if ($tmp !== null) {$e->setError($tmp);}$e->setValue($value);}else {if ($e instanceof CheckboxField) {$e->setValue(false);}else if ($e instanceof RadioGroupField || $e instanceof ListField || $e instanceof CheckBoxListField) {if ($e->getProperty('mandatory')) {$e->setError(i18n::get('FormBuilder.Error.ChooseValue'));$ok = false;}}else if ($e instanceof HiddenField && !$e->isSentToClient()) {}else if ($e->getProperty('disabled') == true) {}else {}}if (!$ok) {$this->trigger('fielderror', $e);}$this->trigger('after.checkfield', $e);return $ok;}public function getRequiredFiles($path=null, FormRendererInterface $renderer=null) {$files = array();foreach ($this->fields as $field) {foreach ($field->getRequiredFiles() as $file) {if (!in_array($file, $files)) {$files[] = $file;}}}if ($renderer == null) {$renderer = new DivLayoutRenderer();}foreach ($renderer->getRequiredFiles() as $file) {if (!in_array($file, $files)) {$files[] = $file;}}if ($path != null) {foreach ($files as $key => $file) {if (substr($file, -3) == '.js') {$files[$key] = '<script type="text/javascript" src="'.$path.$file.'"></script>';}else if (substr($file, -4) == '.css') {$files[$key] = '<link rel="stylesheet" type="text/css" href="'.$path.$file.'" />';}else if (substr($file, 0, 3) == 'js:') {$file = substr($file, 3);if (substr($file, 0, 5) == 'http:') {$files[$key] = '<script type="text/javascript" src="'.$file.'"></script>';}else {$files[$key] = '<script type="text/javascript" src="'.$path.$file.'"></script>';}}else if (substr($file, 0, 4) == 'css:') {$file = substr($file, 4);if (substr($file, 0, 5) == 'http:') {$files[$key] = '<link rel="stylesheet" type="text/css" href="'.$file.'" />';}else {$files[$key] = '<link rel="stylesheet" type="text/css" href="'.$path.$file.'" />';}}}}return $files;}public function createFormJavascriptCode() {$jsevents = array('onblur', 'onchange', 'ondblclick', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onkeydown','onkeypress', 'onkeyup', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout','onmouseover', 'onready', 'onresize', 'onscroll', 'onselect', 'onclick');$js = '';foreach ($this->fields as $name => $field) {foreach ($jsevents as $event) {if (!$field->isPropertyExists($event)) {continue;}$x = $field->getProperty($event);if (is_string($x)) {$js .= '$(\''.$field->getCssSelector().'\').' . substr($event, 2) . '(function (event) { '. $x . '; });';}else if ($x instanceof FormEventListener || $x instanceof Closure) {$j = '';$y = new VirtualForm($this, $j);$z = new VirtualField($field, $j);@ob_start();if ($x instanceof FormEventListener) {$x->onFieldEvent($y, $z, $event, null);}else {$x($y, $z, $event);}$ob = @ob_get_contents();@ob_end_clean();if (!empty($ob)) {$j .= str_replace(array('$field', '$form'),array("\$('".$field->getCssSelector()."')", "\$('".$this->getCssSelector()."')"),$ob);}$js .= '$(\''.$field->getCssSelector().'\').' . substr($event, 2) . '(function (event) { /*~*/ ';$js .= $j;$js .= ' /*~*/ });';unset($j, $y, $z, $ob, $st);}unset($x);}}if ($js .= '') {$js = '<script type="text/javascript"><!--'."\n".' $(function () { '.$js." }); \n--></script>";}return $js;}public function reset() {throw new Exception("Not implemented yet");return $this;}public function xml() {$xml = '<?xml version="1.0" encoding="utf-8"?>'."\n<form>";foreach ($this->fields as &$field) {$xml .= "\n\t" . $field->xml();}$xml .= "\n</form>";return $xml;}public function createFromXML($xml) {}public function render($options=array(), FormRendererInterface $renderer=null) {if (!$this->executed) {$this->execute();}$this->trigger('render');if ($renderer == null) {$renderer = new DivLayoutRenderer();}return $renderer->render($this, $options) . $this->createFormJavascriptCode();}public function __toString() {return get_class($this).'('.$this->getFormName().')';}} ?><?php class VirtualForm implements Form {protected $form;protected $js;public function __construct(AbstractForm $form, &$js) {$this->form = $form;$this->js =& $js;}protected function getJsFieldSelector() {return "\$('".$this->form->getCssSelector()."')";}public function submit() {$this->js .= $this->getJsFieldSelector().'.submit();';return $this;}public function execute() {throw new Exception('Unsupported operation in a virtual form');}public function getFormName() {$this->js .= $this->getJsFieldSelector().'.attr("name")';return $this->form->getFormName();}public function setFormName($formName) {$this->js .= $this->getJsFieldSelector().'.attr("name", '.vaToJs($formName).');';$this->form->setFormName($formName);return $this;}public function getFormActionURL() {$this->js .= $this->getJsFieldSelector().'.attr("action")';return $this->form->getFormActionURL();}public function setFormActionURL($formActionURL) {$this->js .= $this->getJsFieldSelector().'.attr("action", '.vaToJs($formActionURL).');';$this->form->setFormMethod($formActionURL);return $this;}public function getFormMethod() {$this->js .= $this->getJsFieldSelector().'.attr("method")';return $this->form->getFormMethod();}public function setFormMethod($formMethod) {$this->js .= $this->getJsFieldSelector().'.attr("method", '.vaToJs($formMethod).');';$this->form->setFormMethod($formMethod);return $this;}public function getFormCancel() {return $this->form->getFormCancel();}public function setFormCancel($formCancel) {$this->form->setFormCancel($formCancel);return $this;}public function getEncodingType() {$this->js .= $this->getJsFieldSelector().'.attr("enctype")';return $this->form->getEncodingType();}public function setEncodingType($encType) {$this->js .= $this->getJsFieldSelector().'.attr("enctype", '.vaToJs($encType).');';$this->form->setEncodingType($encType);return $this;}public function add(Field $field, $position=-1) {return $this->addFormField($field, $position);}public function addFormField(Field $field, $position=-1) {throw new Exception('Not implemented yet');}public function removeField($field) {if (is_string($field)) {$field = $this->getFieldByName($field);}$r = $this->form->removeField($field);if ($r) {$this->js .= '$("'.$field->getCssSelector().'").remove();';}return $r;}public function moveField($fieldname, $position) {throw new Exception('Unsupported operation in a virtual form');}public function getFields() {$r = array();foreach ($this->form->getFields() as $field) {$field = new VirtualField($field, $this->js);}return $r;}public function getField($i) {$field = $this->form->getField($i);if ($field != null) {$field = new VirtualField($field, $this->js);return $field;}return null;}public function getLastField() {$field = $this->form->getLastField();if ($field != null) {$field = new VirtualField($field, $this->js);return $field;}return null;}public function getFirstField() {$field = $this->form->getFirstField();if ($field != null) {$field = new VirtualField($field, $this->js);return $field;}return null;}public function getFieldByName($name) {$field = $this->form->getFieldByName($name);if ($field != null) {$field = new VirtualField($field, $this->js);return $field;}return null;}public function __get($name) {return $this->getFieldByName($name);}public function getFieldValue($name) {return $this->form->getFieldValue();}public function getFieldsValues() {return $this->form->getFieldsValues();}public function setFieldsValues($values) {$this->form->setFieldsValues($values);return $this;}public function cleanFieldsErrors() {$this->form->cleanFieldsErrors();return $this;}public function getCssSelector() {return $this->form->getCssSelector();}public function getPostRawData() {return $this->form->getPostRawData();}public function getGetRawData() {return $this->form->getGetRawData();}public function getQueryRawData() {return $this->form->getQueryRawData();}public function getFileUploadRawData() {return $this->form->getFileUploadRawData();}public function getRequiredFiles($path=null, FormRendererInterface $renderer=null) {return $this->form->getRequiredFiles($path, $renderer);}public function createFormJavascriptCode() {throw new Exception('Unsupported operation in a virtual form');}public function render($options=array(), FormRendererInterface $renderer=null) {throw new Exception('Unsupported operation in a virtual form');}public function createFromXML($xml) {return $this->form->createFromXML($xml);}public function bind($event, $callback) {$this->form->bind($event, $callback);return $this;}public function trigger($event, $data=null) {$this->form->trigger($event, $data);return $this;}public function xml() {return $this->form->xml();}public function __toString() {return $this->form->getFormName();}} ?><?php interface Field {public function getName();public function getLabel();public function setLabel($label);public function getValue();public function setValue($value);public function getProperty($name);public function getProperties();public function setProperties($array);public function setProperty($name, $value);public function isPropertyExists($name);public function hasProperty($name);public function removeProperty($name);public function toggleProperty($name, $value1, $value2);public function setError($error);public function cleanError();public function hasError();public function getError();public function getCssSelector();public function checkValue($value, &$error);public function getRequiredFiles();public function bind($event, $callback);public function trigger($event, $data=null);public function render($params=array());public function xml();public function __toString();} ?><?php abstract class AbstractField implements Field {protected $name = null;protected $label = null;protected $value = null;protected $listeners = array();protected $properties = array('noLabel' => false,'mandatory' => false,'prepend' => null,'append' => null,'delegate' => null,'error' => null,'lang' => 'en','disabled' => false,'readonly' => false);public function __construct($name, $label, $properties=null) {$this->name = (string) $name;$this->setLabel($label);$this->setProperties($properties);}public function getName() {return $this->name;}public function getLabel() {return $this->label;}public function setLabel($label) {if (is_string($label)) {if ($this->label != $label) {$this->label = (string) $label;$this->trigger('onlabelchange', array('old_value' => $this->label,'new_value' => $label));}}return $this;}public function getValue() {return $this->value;}public function setValue($value) {if ($this->value != $value) {$this->trigger('onchange', array('old_value' => $this->value,'new_value' => $value));$this->value = $value;}return $this;}public function isNoLabel() {deprecated('Method AbstractField::isNoLabel(), use getProperty("noLabel") instead', whoCalledMe());return $this->getProperty('noLabel');}public function isMandatory() {deprecated('Method AbstractField::isMandatory(), use getProperty("mandatory") instead', whoCalledMe());return $this->properties['mandatory'];}public function setError($error) {$this->setProperty('error', (string) $error);return $this;}public function cleanError() {$this->properties['error'] = null;return $this;}public function hasError() {return $this->properties['error'] != null;}public function getError() {return $this->properties['error'];}public function checkValue($value, &$error) {return true;}public function getRequiredFiles() {return array();}public function getProperty($name) {return $this->isPropertyExists($name) ? $this->properties[$name] : null;}public function getProperties() {return $this->properties;}public function setProperties($array) {if (is_array($array)) {foreach ($array as $key => $value) {$this->setProperty($key, $value);}}return $this;}public function setProperty($name, $value) {if (is_string($name)) {if ($this->getProperty($name) != $value) {$this->trigger('onpropertychange', array('name' => $name,'old_value' => $this->getProperty($name),'new_value' => $value));$this->properties[$name] = $value;}}return $this;}public function removeProperty($name) {if (is_string($name)) {if (array_key_exists($name, $this->properties)) {unset($this->properties[$name]);return true;}}return false;}public function toggleProperty($name, $value1, $value2) {if (is_string($name)) {if ($this->getProperty($name) == $value2) {$this->setProperty($name, $value1);}else {$this->setProperty($name, $value2);}}return $this;}public function isPropertyExists($name) {return array_key_exists($name, $this->properties);}public function hasProperty($name) {return $this->isPropertyExists($name);}public function getCssSelector() {return '#'.$this->getName();}public function __get($name) {return $this->getProperty($name);}public function __invoke($data) {if (is_array($data)) {$this->setProperties($data);}return $this;}public function xml() {return '<field class="'.get_class($this).'" name="'.htmlspecialchars($this->name).'" label="'.htmlspecialchars($this->label).'">';}public function bind($event, $callback) {if (is_string($event) && ($callback instanceof FormEventListener || $callback instanceof Closure)) {$this->listeners[] = array($event, &$callback);}return $this;}public function trigger($event, $data=null) {if (is_string($event)) {@ob_start();foreach ($this->listeners as $i) {if ($i[0] == '*' || $i[0] == $event) {if ($i[1] instanceof FormEventListener) {$i[1]->onFieldEvent($data, $event, $this);}else {$i[1]($data, $event, $this);}}}$ob = @ob_get_contents();@ob_end_clean();}return $this;}public function __toString() {return $this->getValue() . '';}} ?><?php class VirtualField implements Field {protected $field;protected $js;public function __construct(AbstractField $field, &$js) {$this->field = $field;$this->js =& $js;}protected function getJsFieldSelector() {return "\$('".$this->field->getCssSelector()."')";}public function setCss($propertyName, $value) {$this->js .= $this->getJsFieldSelector().".css('".$propertyName."', ".(is_string($value) ? escapeString($value) : $value).');';return $this;}public function getName() {return $this->field->getName();}public function getLabel() {$this->js .= varToJs($this->field->getLabel());return $this->field->getLabel();}public function setLabel($label) {$this->field->setLabel($label);return $this;}public function getValue() {$this->js .= $this->getJsFieldSelector().'.val()';return $this->field->getValue();}public function setValue($value) {$this->js .= $this->getJsFieldSelector().'.val('.varToJs($value).');';$this->field->setValue($value);return $this;}public function getProperty($name) {$this->js .= varToJs($this->field->getProperty($name));return $this->field->getProperty($name);}public function getProperties() {return $this->field->getProperties();}public function setProperties($array) {if (is_array($array)) {foreach ($array as $key => $value) {$this->setProperty($key, $value);}}return $this;}public function setProperty($name, $value) {$this->js .= $this->getJsFieldSelector().'.attr("'.escapeString($name).'", '.varToJs($value).');';$this->field->setProperty($name, $value);return $this;}public function removeProperty($name) {$this->js .= $this->getJsFieldSelector().'.removeAttr("'.escapeString($name).'");';return $this->field->removeProperty($name);}public function toggleProperty($name, $value1, $value2) {$this->js .= $this->getJsFieldSelector().'.attr('.varToJs($name).', ';$this->js .= $this->getJsFieldSelector().'.attr('.varToJs($name).') == '.varToJs($value2).' ? ';$this->js .= varToJs($value1).' : '.varToJs($value2).');';$this->field->toggleProperty($name, $value1, $value2);return $this;}public function isPropertyExists($name) {return $this->hasProperty($name);}public function hasProperty($name) {$this->js .= '(' . $this->getJsFieldSelector() . '.attr("'.$name.'") !== undefined)';return $this->field->hasProperty($name);}public function setError($error) {$this->field->getRequiredFiles();return $this;}public function cleanError() {$this->field->cleanError();return $this;}public function hasError() {return $this->field->hasError();}public function getError() {return $this->field->getError();}public function getCssSelector() {return $this->field->getCssSelector();}public function checkValue($value, &$error) {return $this->field->checkValue($value, $error);}public function getRequiredFiles() {return $this->field->getRequiredFiles();}public function bind($event, $callback) {$this->field->bind($event, $callback);return $this;}public function trigger($event, $data=null) {$this->field->trigger($event, $data);return $this;}public function render($params=array()) {return $this->field->render($params);}public function xml() {return $this->field->xml();}public function __toString() {return $this->field->getName();}} ?><?php class HTML extends AbstractField {protected static $COUNTER = 1;public function __construct($html) {$this->setProperty('noLabel', true);parent::__construct("".self::$COUNTER++, '', array());$this->setValue($html);}public function exportAsXML() {return '<html>'.htmlspecialchars($this->value).'</html>';}public function render($params=array()) {if ($this->getProperty('disabled') === true) {return '';}return $this->value;}} ?><?php interface FieldCheckDelegate {public function getFieldError(Field $field, Form $form);} ?><?php interface FormEventListener {public function onFormEvent(Form $form, $event, $data);public function onFieldEvent(Form $form, Field $field, $event, $data);} ?><?php class Separator extends AbstractField {public function __construct($name, $label, $properties=null) {$this->setProperty('noLabel', true);parent::__construct($name, $label, $properties);}public function exportAsXML() {return '<field class="Separator" name="'.htmlspecialchars($this->name).'" />';}public function render($params=array()) {if ($this->getProperty('disabled') == false) {return '<div class="formb-separator">'.$this->getLabel().'</div>';}return '';}} ?><?php class TextField extends AbstractField {protected $dataPattern = null;public function __construct($name, $label, $preValue=null, $dataPattern=null, $maxLength=0, $minLength=0) {$this->setProperties(array('preValue' => null,'dataPattern' => null,'maxLength' => 0,'minLength' => 0,'autocompleteStore' => null,'disabled' => false,'autocomplete' => true));parent::__construct($name, $label);if (is_array($preValue) || $preValue === null) {$this->setProperties($preValue);}else {deprecated('Constructor TextField(string $name, string $label, string|null $preValue, string|null $dataPattern, int $maxLength, int $minLength)', whoCalledMe());$this->setProperties(array('preValue' => $preValue,'dataPattern' => $dataPattern,'maxLength' => $maxLength,'minLength' => $minLength));}}public function getPreValue() {return $this->getProperties('preValue');}public function setPreValue($preValue) {if (is_string($preValue)) {$this->setProperty('preValue', $preValue);}else {$this->setProperty('preValue', null);}return $this;}public function getDataPattern() {return $this->dataPattern;}public function setDataPattern($dataPattern) {if (!is_string($dataPattern)) {$this->dataPattern = null;}else {$patterns = array('number-int-unsigned' => '/^[0-9]{1,}$/', 'number-int-signed' => '/^[-]?[0-9]{1,}$/', 'number-float-unsigned' => '/^[0-9]{0,}(.[0-9]{1,}){0,1}$/', 'number-float-signed' => '/^([-]?[0-9]{1,}){0,}(.[0-9]{1,}){0,1}$/', 'number-float-scientific' => '[-+]?(?:\b[0-9]+(?:\.[0-9]*)?|\.[0-9]+\b)(?:[eE][-+]?[0-9]+\b)?','number-hexa' => '\b0[xX][0-9a-fA-F]+\b','zipcode' => '','zipcode-us' => '\b[0-9]{5}(?:-[0-9]{4})?\b','zipcode-uk' => '\b[A-Z]{1,2}[0-9][A-Z0-9]? [0-9][ABD-HJLNP-UW-Z]{2}\b','zipcode-ca' => '\b[ABCEGHJKLMNPRSTVXY][0-9][A-Z] [0-9][A-Z][0-9]\b','creditcard' => '^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})$','creditcard-amex' => '^3[47][0-9]{13}$','creditcard-mastercard' => '^5[1-5][0-9]{14}$','creditcard-visa' => '^4[0-9]{12}(?:[0-9]{3})?$','email' => '/^[-a-z0-9!#$%&\'*+\\/=?^_`{|}~]+(\.[-a-z0-9!#$%&\'*+\\/=?^_`{|}~]+)*@(([a-z0-9]([-a-z0-9]*[a-z0-9]+)?){3,63}\.)+([a-z0-9]([-a-z0-9]*[a-z0-9]+)?){2,63}$/i', 'ip-v4' => '\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b','path-window' => '\b[a-z]:\\[^/:*?"<>|\r\n]*','path-unc' => '(?:(?#drive)\b[a-z]:|\\\\[a-z0-9]+)\\[^/:*?"<>|\r\n]*','path-unix' => false,'phone-us' => '\(?[0-9]{3}\)?[-. ]?[0-9]{3}[-. ]?[0-9]{4}','ssn-us' => '\b[0-9]{3}-[0-9]{2}-[0-9]{4}\b','url' => '/^(([\w]+:)?\/\/)?(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(\/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&amp;?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?$/','date-fr' => '/([0-9]{1,2})\/([0-9]{1,2})\/([0-9]{4})/','date-us' => '/([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})/');if (array_key_exists($dataPattern, $patterns)) {$this->dataPattern = $patterns[$dataPattern];}else {$this->dataPattern = $dataPattern;}}return $this;}public function getMaxLength() {return $this->getProperties('maxLength');}public function setMaxLength($length) {if (is_int($length)) {$this->setProperty('maxLength', $length);}else $this->setProperty('maxLength', 0);return $this;}public function getMinLength() {return $this->getProperties('minLength');}public function setMinLength($length) {if (is_int($length)) {$this->setProperty('minLength', $length);}else $this->setProperty('minLength', 0);return $this;}public function getAutocompleteStore() {return $this->getProperties('autocompleteStore');}public function setAutocompleteStore(AutocompleteStore $store=null) {$this->setProperty('autocompleteStore', $store);return $this;}public function getValue() {if ($this->value == $this->getProperty('preValue')) {return null;}if (empty($this->value) && $this->value !== '0') {return null;}if ($this->getProperty('maxLength') > 0) {if (strlen($this->value) > $this->getProperty('maxLength')) {return substr($this->value, 0, $this->getProperty('maxLength'));}}return $this->value;}public function checkValue($value, &$error) {if (empty($value) || $value === '0') {return true;}if ($value != null && $value == $this->getProperty('preValue')) {$error = i18n::get('FormBuilder.Error.Empty');return false;}if ($this->dataPattern != null) {if (preg_match($this->dataPattern, $value) !== 1) {$error = i18n::get('FormBuilder.Error.NoMatch');return false;}}if ($this->getProperty('maxLength') > 0) {if (strlen($value) > $this->getProperty('maxLength')) {$error = str_replace('%i', $this->getProperty('maxLength'), i18n::get('FormBuilder.Error.MaxLength'));return false;}}if ($this->getProperty('minLength') > 0) {if (strlen($value) < $this->getProperty('minLength')) {$error = str_replace('%i', $this->getProperty('minLength'), i18n::get('FormBuilder.Error.MinLength'));return false;}}return true;}public function getRequiredFiles() {if ($this->getProperty('autocompleteStore') != null) {return array('jquery.js','jquery-ui.js','jquery-ui-theme/jquery-ui.css');}else {return array();}}public function render($params=array()) {$html = '<input type="text" id="'.$this->getName().'" name="'.$this->getName().'" class="formb-field formb-field-text"';if ($this->getProperty('disabled')) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly')) {$html .= ' readonly="readonly"';}if (!$this->getProperty('autocomplete')) {$html .= ' autocomplete="off"';}if ($this->getProperty('mandatory')) {$html .= ' required="required"';}if ($this->getProperty('maxLength') > 0) {$html .= ' maxlength="'.$this->getProperty('maxLength').'"';}if ($this->getProperty('preValue') != null && ($this->getValue() == null || $this->getValue() == $this->getProperty('preValue'))) {$html .= ' value="'.ouptutVar($this->getProperty('preValue')).'" onfocus="if (this.value == this.defaultValue) this.value = \'\';" ';$html .= 'onblur="if (this.value == \'\') this.value = this.defaultValue;" />';}else {$html .= ' value="'.ouptutVar($this->getValue()).'" />';}if ($this->getProperty('autocompleteStore') != null) {$html .= '<script type="text/javascript">';$html .= '$(function () { $("#'.$this->getName().'").autocomplete({ source: '.$this->getProperty('autocompleteStore')->getDataAsJavascript().', delay: '.$this->getProperty('autocompleteStore')->getDelay().', minLength: '.$this->getProperty('autocompleteStore')->getMinLength().' }); });';$html .= '</script>';}return $html;}} ?><?php abstract class AutocompleteStore {protected $data;protected $delay = 100;protected $minLength = 1;public function __construct($data) {$this->setData($data);}public function getData() {return $this->data;}public function setData($data) {if (is_array($data)) {$this->data = $data;}else {$this->data = array();}return $this;}public function getDelay() {return $this->delay;}public function setDelay($delay) {if (is_int($delay)) {$this->delay = abs($delay);}return $this;}public function getMinLength() {return $this->minLength;}public function setMinLength($length) {if (is_int($length)) {$this->minLength = abs($length);}return $this;}protected static function array2js($array) {if (!is_array($array)) {return '[]';}if (sizeof($array) == 0) {return '[]';}$r = '[';foreach ($array as $item) {$r .= "'".str_replace("'", "\'", (string) $item)."', ";}return substr($r, 0, -2) . ']';}protected static function array2json($array) {if (!is_array($array)) {return '[]';}if (sizeof($array) == 0) {return '[]';}$r = '[';foreach ($array as $id => $item) {$id = str_replace(array('"', '\\'), array('\\"', '\\\\'), (string) $id);$item = str_replace(array('"', '\\'), array('\\"', '\\\\'), (string) $item);$r .= '{"id":"'.$id.'","label":"'.$item.'","value":"'.$item.'"},';}return substr($r, 0, -1) . ']';}public abstract function getDataAsJavascript();}class AutocompleteArrayStore extends AutocompleteStore {public function __construct($data) {parent::__construct($data);$this->setDelay(10);$this->setMinLength(1);}public function getDataAsJavascript() {return self::array2js($this->data);}}class AutocompleteRemoteStore extends AutocompleteStore {protected $url;public function __construct($data, $url=null) {parent::__construct($data);$this->setDelay(400);$this->setMinLength(2);if (is_string($url)) {$this->setURL($url);}else {$src = whoCalledMe();$this->setURL('http://'.$_SERVER['SERVER_NAME'].'/'.str_replace(str_replace('\\', '/', $_SERVER['DOCUMENT_ROOT']), '', str_replace('\\', '/', $src['file'])));$this->executeAutocompleteService();}}public function getURL() {return $this->url;}public function setURL($url) {if (is_string($url)) {$this->url = $url;}return $this;}public function executeAutocompleteService($self=false) {if (!array_key_exists('term', $_REQUEST)) {return '[]';}$term = $_REQUEST['term'];if (strlen($term) < $this->getMinLength()) {return '[]';}$r = array();foreach ($this->data as $item) {if (strripos($item, $term) !== false) {$r[] = $item;}}if ($self) {header('Content-type: application/json');echo self::array2json($r);exit();}return self::array2json($r);}public function getDataAsJavascript() {return "'".str_replace(array("'", "\\"), array("\\'", "\\\\"), $this->getURL())."'";}} ?><?php class PasswordTextField extends TextField {public function __construct($name, $label, $passwordStrengthIndicator=false, $minLength=0, $maxLength=0) {$this->setProperties(array('passwordStrengthIndicator' => false));parent::__construct($name, $label);if (is_array($passwordStrengthIndicator) || $passwordStrengthIndicator === null) {$this->setProperties($passwordStrengthIndicator);}else {deprecated('Constructor PasswordTextField(string $name, string $label, boolean $passwordStrengthIndicator, int $minLength, int $maxLength)', whoCalledMe());$this->setProperties(array('passwordStrengthIndicator' => $passwordStrengthIndicator,'maxLength' => $maxLength,'minLength' => $minLength));}}public function isPasswordStrengthIndicator() {return $this->getProperty('passwordStrengthIndicator');}public function setPasswordStrengthIndicator($value) {$this->setProperty('passwordStrengthIndicator', (boolean) $value);return $this;}public function getPasswordStrength() {if (!$this->value) {return 0;}$h = $this->value;$d = strlen($h);if ($d > 5) $d = 5;$f = preg_replace('/[0-9]/', '', $h);$g = strlen($h) - strlen($f);if ($g > 3) $g = 3;$a = preg_replace('/[^a-zA-Z0-9_]/', '', $h);$c = strlen($h) - strlen($a);if ($c > 3) $c = 3;$b = preg_replace('/[A-Z]/', '', $h);$i = strlen($h) - strlen($b);if ($i > 3) $i = 3;$e = (($d * 10) - 20) + ($g * 10) + ($c * 15) + ($i * 10);if ($e > 100) $e = 100;return max($e, 0);}public function getValue() {if ($this->value == $this->preValue) {return null;}if (empty($this->value) && $this->value !== '0') {return null;}if ($this->maxLength > 0) {if (strlen($this->value) > $this->maxLength) {return substr($this->value, 0, $this->maxLength);}}return $this->value;}public function checkValue($value, &$error) {if (empty($value) || $value === '0') {return true;}if ($this->getProperty('maxLength') > 0) {if (strlen($value) > $this->getProperty('maxLength')) {$error = str_replace('%i', $this->getProperty('maxLength'), i18n::get('FormBuilder.Error.MaxLength'));return false;}}if ($this->getProperty('minLength') > 0) {if (strlen($value) < $this->getProperty('minLength')) {$error = str_replace('%i', $this->getProperty('minLength'), i18n::get('FormBuilder.Error.MinLength'));return false;}}return true;}public function getRequiredFiles() {if ($this->isPasswordStrengthIndicator()) {return array('jquery.js','jquery.pwdstrength.js');}else {return array();}}public function render($params=array()) {$html = '<input type="password" id="'.$this->getName().'" name="'.$this->getName().'"';if ($this->getProperty('maxLength') > 0) {$html .= ' maxlength="'.$this->getProperty('maxLength').'"';}if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}if ($this->getProperty('mandatory')) {$html .= ' required="required"';}$html .= ' autocomplete="off" class="formb-field formb-field-text formb-field-text-password" value="" />';if ($this->isPasswordStrengthIndicator()) {$html .= '<div id="'.$this->getName().'pwdStrength" class="formb-pwdstrength-0"></div>';$html .= '<script type="text/javascript">$(function () { $("#'.$this->getName().'").passwordStrength({ targetDiv: "#'.$this->getName().'pwdStrength" }); });</script>';}return $html;}} ?><?php class TextAreaField extends AbstractField {public function __construct($name, $label, $readOnly=null) {$this->setProperties(array('wysiwyg' => null));parent::__construct($name, $label);if (is_array($readOnly) || $readOnly === null) {$this->setProperties($readOnly);}else {deprecated('Constructor TextAreaField(string $name, string $label, boolean $readOnly)', whoCalledMe());$this->setProperties(array('readonly' => $readOnly));}}public function render($params=array()) {$html = '<textarea id="'.$this->getName().'" name="'.$this->getName().'" class="formb-field formb-field-textarea"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}if ($this->getProperty('mandatory')) {$html .= ' required="required"';}return $html.'>'.ouptutVar($this->getValue()).'</textarea>';}} ?><?php class SelectField extends AbstractField {protected $values = array();public function __construct($name, $label, $values=null, $editable=false) {$this->setProperties(array('editable' => false,'allowEmpty' => true));parent::__construct($name, $label);if (is_array($editable) || $editable == null) {$this->setProperties($editable);}else {deprecated('Constructor SelectField(string $name, string $label, array|null $values, boolean $editable)', whoCalledMe());$this->setProperties(array('editable' => $editable));}$this->setValues($values);}public function setKey($key) {if ($key == null) {return false;}if (!is_string($key) && !is_int($key)) {throw new Exception("Invalid key (" . gettype($key) . ") $key");}if (array_key_exists($key, $this->values)) {$this->value = $this->values[$key];return true;}return false;}public function getKey() {$search = array_search($this->value, $this->values);if ($search === false) {return null;}return $search;}public function getKeys() {return array_keys($this->values);}public function setValue($value) {if ($this->isEditable()) {$this->value = $value;}else {if (!$this->setKey($value)) {if (in_array($value, $this->values)) {$this->value = $value;}}}return $this;}public function getValue() {return $this->value;}public function getValues() {return $this->values;}public function setValues($values) {if (is_array($values)) {$this->values = $values;}else {$this->values = array();}return $this;}public function checkValue($value, &$error) {if ($this->isEditable()) {if (!$this->getProperty('allowEmpty') && empty($value)) {$error = i18n::get('FormBuilder.Error.EmptyString');return false;}}else {if (!array_key_exists($value, $this->values)) {$error = i18n::get('FormBuilder.Error.NoMatch');return false;}}return true;}public function getSelectedValue() {return (string) $this->value;}public function isEditable() {return $this->getProperty('editable');}public function setEditable($editable) {$this->setProperty('editable', (boolean) $editable);return $this;}public function getRequiredFiles() {if ($this->isEditable()) {return array('jquery.js','jquery.editable-select.js','jquery.editable-select.css');}else {return array();}}public function render($params=array()) {$html = '<select id="'.$this->getName().'" name="'.$this->getName().'" class="formb-field formb-field-select"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}$html .= '>';$found = false;if ($this->isEditable()) {foreach ($this->values as $key => $value) {$html .= '<option';if ($value == $this->value && !$found) {$found = true;$html .= ' selected="selected"';}$html .= '>'.ouptutVar("$value").'</option>';}if (!$found && $this->value !== null) {$html .= '<option selected="selected">'.ouptutVar($this->getValue()).'</option>';}$html .= '</select>';$html .= '<script type="text/javascript">$("#'.$this->getName().'").editableSelect({ bg_iframe:true, case_sensitive:false, items_then_scroll:10 });</script>';}else {foreach ($this->values as $key => $value) {$html .= '<option';if ($value == $this->value && !$found) {$found = true;$html .= ' selected="selected"';}$html .= ' value="'.ouptutVar("$key").'">'.ouptutVar("$value").'</option>';}$html .= '</select>';}return $html;}} ?><?php class CheckBoxField extends AbstractField {public function __construct($name, $label, $properties=null) {$this->setProperty('noLabel', true);parent::__construct($name, $label, $properties);$this->setValue(false);}public function setValue($value) {if ($value === true || $value === 'true' || $value === 'TRUE' || $value === '1' || $value === 1 || $value === 'checked') {$this->value = true;}else {$this->value = false;}return $this;}public function toggleValue() {$this->value = !$this->value;return $this;}public function isChecked() {return $this->value;}public function render($params=array()) {$html = '<input type="checkbox" id="'.$this->getName().'" name="'.$this->getName().'"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}if ($this->isChecked()) {$html .= ' checked="checked"';}return $html.' value="checked" class="formb-field-checkbox" /> <label for="'.$this->getName().'" class="formb-label-checkbox">'.$this->getLabel().'</label>';}} ?><?php class CapchaField extends AbstractField {protected static $chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ123456789';protected static $charsCount = 6;public function __construct($name, $label, $properties=null) {parent::__construct($name, $label, $properties);if (!isset($_SESSION)) {throw new Exception('PHP Session must be activated to use the CapchaField');}}public function render($params=array()) {$html = '<img src="'.FORMBUILDER_URL.'?t='.time().'&createCapchaField" alt="Capcha" class="formb-capcha-img" id="capchaImg'.$this->getName().'" />';$html .= ' <a href="javascript:;" onclick="document.getElementById(\'capchaImg'.$this->getName().'\').src = \''.FORMBUILDER_URL.'?t=\'+new Date().getTime()+\'&createCapchaField\';" class="formb-capcha-renew" title="'.i18n::get('FormBuilder.Capcha.Renew').'">'.i18n::get('FormBuilder.Capcha.Renew').'</a><br />';$html .= '<input type="text" name="'.$this->getName().'" id="'.$this->getName().'" class="formb-field-text formb-capcha-field"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}$html .= ' value="" />';return $html;}public function getSessionStoredValue() {return array_key_exists('capcha', $_SESSION) ? strtoupper($_SESSION['capcha']) : null;}public function match($value) {if ($value == null) {return false;}return $this->getSessionStoredValue() == strtoupper($value);}public function checkValue($value, &$error) {if (!$this->match($value)) {$error = i18n::get('FormBuilder.Error.Capcha');return false;}return true;}public static function ouputCapchaImage() {$code = '';for ($i = 0; $i < self::$charsCount; $i++) {$code .= self::$chars{rand(0, strlen(self::$chars) - 1)};}$img = imagecreatetruecolor(15 + 20 * self::$charsCount, 40);$bg = imagecolorallocate($img, 255, 255, 255);imagefilledrectangle($img, 0, 0, imagesx($img), imagesy($img), $bg);$lines = imagecolorallocate($img, 200, 234, 253);for ($i=10; $i > 0; $i--) {imageline($img, 0, rand(0, imagesy($img)), imagesx($img), rand(0, imagesy($img)), $lines);}imagefilter ($img, IMG_FILTER_SMOOTH, 50);$colors = array(imagecolorallocate($img, 80, 112, 230),imagecolorallocate($img, 35, 65, 174),imagecolorallocate($img, 103, 114, 155),imagecolorallocate($img, 116, 178, 207),imagecolorallocate($img, 32, 147, 201),imagecolorallocate($img, 32, 187, 201),imagecolorallocate($img, 84, 214, 226),imagecolorallocate($img, 59, 223, 202),imagecolorallocate($img, 59, 148, 223),imagecolorallocate($img, 100, 169, 228));for ($i=0; $i < strlen($code); $i++) {$color = $colors[array_rand($colors, 1)];imagestring($img, 5, 15 + $i * 20, rand(3, 23), $code{$i}, $color);}@session_start();$_SESSION['capcha'] = $code;header('Content-type: image/png');imagepng($img);}}if (array_key_exists('createCapchaField', $_REQUEST)) {CapchaField::ouputCapchaImage();exit();} ?><?php class HiddenField extends AbstractField {public function __construct($name, $value=null, $sentToClient=null) {$this->setProperties(array('sentToClient' => true));parent::__construct($name, '');if (is_array($sentToClient) || $sentToClient === null) {$this->setProperties($sentToClient);}else {deprecated('Constructor HiddenField(string $name, mixed $value, boolean $sentToClient)', whoCalledMe());$this->setSentToClient($sentToClient);}$this->setValue($value);}public function isSentToClient() {return $this->getProperty('sentToClient');}public function setSentToClient($sentToClient) {$this->setProperty('sentToClient', (bool) $sentToClient);return $this;}public function render($params=array()) {if ($this->isSentToClient()) {return '<input type="hidden" name="'.$this->getName().'" id="'.$this->getName().'" value="'.ouptutVar($this->getValue()).'" />';}else {return '';}}} ?><?php class DateField extends AbstractField {public function __construct($name, $label, $local=null, $minDate=null, $maxDate=null, $preValue=null, $dateNotation=null) {$this->setProperties(array('local' => null,'minDate' => null,'maxDate' => null,'preValue' => null,'dateNotation' => null));parent::__construct($name, $label);if (is_array($local) || $local === null) {$this->setProperties($local);}else {deprecated('Constructor DateField(string $name, string $label, string|null $local, int|null $minDate, int|null $maxDate, string|null $preValue, string|null $dateNotation)', whoCalledMe());$this->setLocal($local);$this->setMinDate($minDate);$this->setMaxDate($maxDate);$this->setPreValue($preValue);$this->setDateNotation($dateNotation);}}public function getLocal() {return $this->getProperty('local');}public function setLocal($local) {if (is_string($local)) {$this->setProperty('local', $local);}else {$this->setProperty('local', null);}return $this;}public function getMinDate() {return $this->getProperty('minDate');}public function setMinDate($minDate) {if (is_int($minDate) || is_string($minDate)) {$this->setProperty('minDate', $minDate);}else {$this->setProperty('minDate', null);}return $this;}public function getMaxDate() {return $this->getProperty('maxDate');}public function setMaxDate($maxDate) {if (is_int($maxDate) || is_string($maxDate)) {$this->setProperty('maxDate', $maxDate);}else {$this->setProperty('maxDate', null);}return $this;}public function getPreValue() {return $this->getProperty('preValue');}public function setPreValue($preValue) {if (is_string($preValue)) {$this->setProperty('preValue', $preValue);}else {$this->setProperty('preValue', $preValue);}return $this;}public function getDateNotation() {return $this->getProperty('dateNotation');}public function setDateNotation($dateNotation) {if (is_string($dateNotation)) {$this->setProperty('dateNotation', $dateNotation);}else {$this->setProperty('dateNotation', null);}return $this;}public function getValue() {if ($this->value == $this->getPreValue()) {return null;}if (empty($this->value) && $this->value !== '0') {return null;}return $this->value;}public function getValueTimestamp() {$stamp = -2;if ($this->getProperty('dateNotation') == 'mm/dd/yy' || $this->getProperty('dateNotation') == null) {$stamp = strtotime($this->getValue());}else if ($this->getProperty('dateNotation') == 'dd/mm/yy') {$tmp = explode('/', $this->getValue());if (sizeof($tmp) === 3) {$stamp = strtotime($tmp[1] . '/' . $tmp[0] . '/' . $tmp[2]);}}return is_int($stamp) ? $stamp : -1;}public function checkValue($value, &$error) {if (empty($value) || $value === '0') {return true;}if ($value != null && $value == $this->getPreValue()) {$error = i18n::get('FormBuilder.Error.Empty');return false;}return true;}public function getRequiredFiles() {$r = array('jquery.js','jquery-ui.js','jquery-ui-theme/jquery-ui.css');if ($this->getLocal() != null) {$r[] = 'jquery-i18n/jquery.ui.datepicker-'.$this->getLocal().'.js';}return $r;}public function render($params=array()) {$html = '<input type="text" id="'.$this->getName().'" name="'.$this->getName().'" class="formb-field formb-field-text formb-field-text-date"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}if ($this->getDateNotation() != null) {$html .= ' maxlength="'.strlen($this->getDateNotation()).'"';}if ($this->getPreValue() != null && ($this->getValue() == null || $this->getValue() == $this->getPreValue())) {$html .= ' value="'.ouptutVar($this->getPreValue()).'" onfocus="if (this.value == this.defaultValue) this.value = \'\';" ';$html .= 'onblur="if (this.value == \'\') this.value = this.defaultValue;" />';}else {$html .= ' value="'.ouptutVar($this->getValue()).'" />';}$html .= '<script type="text/javascript">';$html .= '$(function() { $("#'.$this->getName().'").datepicker({';if ($this->getDateNotation() != null) {$html .= ' dateFormat: \''.$this->getDateNotation().'\',';}if ($this->getMinDate() != null) {$html .= ' minDate: ';if (is_string($this->getMinDate())) {$html .= "'".$this->getMinDate()."'";}else if (is_int($this->getMinDate())) {$html .= 'new Date("'.date('l, m d Y 00:00:01', $this->getMinDate()).'")';}$html .= ',';}if ($this->getMaxDate() != null) {$html .= ' maxDate: ';if (is_string($this->getMaxDate())) {$html .= "'".$this->getMaxDate()."'";}else if (is_int($this->getMaxDate())) {$html .= 'new Date("'.date('l, m d Y 00:00:01', $this->getMaxDate()).'")';}$html .= ',';}$html .= ' autoSize: true, changeMonth: true, changeYear: true, showButtonPanel: true });';if ($this->getLocal() != null) {$html .= '$("#'.$this->getName().'").datepicker($.datepicker.regional["'.$this->getLocal().'"]);';}$html .= ' });';$html .= '</script>';return $html;}} ?><?php class RadioGroupField extends AbstractField {protected $values = array();public function __construct($name, $label, $values=null, $properties=null) {$this->setProperties(array('layout' => 'block','layoutVar' => 2));parent::__construct($name, $label, $properties);$this->setValues($values);}public function getValues() {return $this->values;}public function setValues($values) {if (is_array($values)) {$this->values = $values;}return $this;}public function setValue($key) {if (array_key_exists($key, $this->values)) {$this->value = $key;}return $this;}public function getCssSelector() {return 'input[name="'.$this->getName().'"]';}public function getRequiredFiles() {if ($this->getProperty('layout') == 'buttons') {return array('jquery.js','jquery-ui.js','jquery-ui-theme/jquery-ui.css');}else {return array();}}protected function createField($i, $key, $value) {$html = '<input type="radio" id="'.$this->getName().$i.'" name="'.$this->getName().'" class="formb-field-radio"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}$html .= ' value="'.ouptutVar($key).'" '.($this->getValue() == $key ? 'checked="checked"' : '').' />';$html .= ' <label for="'.$this->getName().$i.'" class="formb-label-radio">'.$value.'</label>';return $html;}public function render($params=array()) {$html = '<div id="'.$this->name.'RadioGroup" class="formb-field-radiogroup">';$i = 1;switch ($this->getProperty('layout')) {case 'inline' :foreach ($this->values as $key => $value) {$html .= $this->createField($i, $key, $value).' ';$i++;}break;case 'buttons' :foreach ($this->values as $key => $value) {$html .= $this->createField($i, $key, $value).' ';$i++;}break;case 'row' :$c = 1;$s = round(sizeof($this->values) / $this->getProperty('layoutVar'));foreach ($this->values as $key => $value) {$html .= $this->createField($i, $key, $value);if ($i % $s == 0 && $c < $this->getProperty('layoutVar')) {$html .= '<br />';$c++;}$i++;}break;case 'col' :$s = $this->getProperty('layoutVar');foreach ($this->values as $key => $value) {$html .= $this->createField($i, $key, $value);if ($i % $s == 0) {$html .= '<br />';}$i++;}break;default:foreach ($this->values as $key => $value) {$html .= $this->createField($i, $key, $value).'<br />';$i++;}break;}$html .= '</div>';if ($this->getProperty('layout') == 'buttons') {$html .= '<script type="text/javascript"> $("#'.$this->name.'RadioGroup").buttonset(); </script>';}return $html;}} ?><?php class FileInputField extends AbstractField {public function __construct($name, $label, $properties=null) {$this->setProperties(array('multiple' => false,'asynch' => false,'filter' => null,'add-file-label' => null,'add-file-title' => null,'del-file-label' => null));parent::__construct($name, $label, $properties);$this->value = array();}public function getRequiredFiles() {if ($this->getProperty('multiple') == true) {return array('jquery.js');}else {return array();}}public function checkUpload(AbstractForm $form) {$files = $form->getFileUploadRawData();if (array_key_exists($this->getName(), $files)) {$data = $files[$this->getName()];$this->value = $data;if (empty($data['name'])) {if ($this->getProperty('mandatory') == true) {$this->setError(i18n::get('FormBuilder.Error.File.Required'));return false;}return true;}return true;}else {return true;}}public function render($params=array()) {if ($this->getProperty('asynch') == true) {throw new Exception('Not implemented yet (asynch mode)');}$html = '<div><input type="file" name="'.$this->getName().'" class="formb-field formb-field-file"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}$html .= ' />';if ($this->getProperty('multiple') == true) {$html .= '<a class="formb-field-file-add-bt" href="javascript:;" title="'.htmlspecialchars($this->getProperty('add-file-title')).'" onclick="$(this).parent().append(\'<input type=\\\'file\\\' name=\\\''.$this->getName().'\\\' class=\\\'formb-field formb-field-file\\\' />\');">'.$this->getProperty('add-file-label').'</a>';}$html .= '</div>';return $html;}} ?><?php class SliderField extends AbstractField {public function __construct($name, $label, $min=null, $max=100, $step=1, $range=false, $vertical=false) {$this->setProperties(array('min' => 0,'max' => 100,'step' => 1,'range' => false,'vertical' => false,'noLabel' => true));parent::__construct($name, $label);if (is_array($min) || $min === null) {$this->setProperties($min);}else {deprecated('Constructor SliderField(string $name, string $label, int $min, int $max, int $step, boolean $range, boolean $vertical)', whoCalledMe());$this->setProperties(array('min' => $min,'max' => $max,'step' => $step,'range' => $range,'vertical' => $vertical));}$this->value = $this->isRangeEnabled() ? array($this->getMin(), $this->getMin()) : $this->getMin();}public function getMin() {return $this->getProperty('min');}public function setMin($value) {if (is_int($value)) {$this->setProperty('min', $value);}return $this;}public function getMax() {return $this->getProperty('max');}public function setMax($value) {if (is_int($value)) {$this->setProperty('max', $value);}return $this;}public function getStepValue() {return $this->getProperty('step');}public function setStepValue($value) {if (is_int($value)) {$this->setProperty('step', abs($value));}return $this;}public function isRangeEnabled() {return $this->getProperty('range');}public function setRangeEnabled($enabled) {$this->setProperty('range', (bool) $enabled);return $this;}public function isVerticalDisplay() {return $this->getProperty('vertical');}public function setVerticalDisplay($enabled) {$this->setProperty('vertical', (bool) $enabled);return $this;}public function setValue($value) {if ($this->isRangeEnabled()) {$value = explode('-', $value);if (sizeof($value) != 2) {return $this;}$this->value = array(max(@intval($value[0]), $this->getMin()),min(@intval($value[1]), $this->getMax()));print_r($this->values);}else {$this->value = intval($value);}return $this;}public function checkValue($value, &$error) {if ($this->isRangeEnabled()) {$v = explode('-', $value);if (sizeof($v) != 2) {$error = i18n::get('FormBuilder.Error.Invalid').' [0]';return false;}if (intval($v[1]) < intval($v[0])) {$error = i18n::get('FormBuilder.Error.Invalid').' [1]';return false;}return$this->checkOneValue($v[0], $error)&&$this->checkOneValue($v[1], $error);}return $this->checkOneValue($value, $error);}protected function checkOneValue($value, &$error) {if ($value === '0') {return true;}$v = intval($value);if ("$v" != "$value") {$error = i18n::get('FormBuilder.Error.NotInt');return false;}if ($v < $this->getMin()) {$error = i18n::get('FormBuilder.Error.OutOfBounds');return false;}if ($v > $this->getMax()) {$error = i18n::get('FormBuilder.Error.OutOfBounds');return false;}if ($v % $this->getStepValue() != 0) {$error = i18n::get('FormBuilder.Error.Invalid').' [2]';return false;}return true;}public function getRequiredFiles() {return array('jquery.js','jquery-ui.js','jquery-ui-theme/jquery-ui.css');}public function render($params=array()) {$displayField = (strpos($this->getLabel(), '%VALUE%') !== false);if ($displayField) {$field = '<input type="text" id="'.$this->getName().'" readonly="readonly" name="'.$this->getName().'" class="formb-field ';$field .= 'formb-field-text formb-field-text-slider"';}else {$field = '<input type="hidden" id="'.$this->getName().'" name="'.$this->getName().'" ';}$field .= ' value="';if ($this->isRangeEnabled()) {$field .= ouptutVar(implode('-', $this->getValue()));}else {$field .= ouptutVar($this->getValue());}$field .= '" />';$label = $this->getLabel();if ($displayField) {$label = str_replace('%VALUE%', $field, $label);}$html = '<label for="'.$this->getName().'">'.$label.'</label><br />';if (!$displayField) {$html .= $field;}$html .= '<div id="'.$this->getName().'Slider" class="formb-slider"></div>';$html .= '<script type="text/javascript"> $(function () { ';$html .= '$("#'.$this->getName().'Slider").slider({ min: '.($this->getMin() == 0 ? '0' : $this->getMin()).', ';$html .= 'max: '.($this->getMax() == 0 ? '0' : $this->getMax()).', step: '.$this->getStepValue().', ';$html .= 'orientation: "'.($this->isVerticalDisplay() ? 'vertical' : 'horizontal').'", ';$html .= 'range: '.($this->isRangeEnabled() ? 'true' : 'false').', ';if ($this->isRangeEnabled()) {if (is_array($this->getValue())) {$v = (@$this->value[0] == 0 ? '0' : @intval($this->value[0])).','.(@$this->value[1] == 0 ? '0' : @intval($this->value[1]));}else {$v = ($this->getMin() == 0 ? '0' : $this->getMin()) . ',' . ($this->getMax() == 0 ? '0' : $this->getMax());}$html .= 'values: ['.$v.'], ';$html .= 'slide: function (event, ui) { $("#'.$this->getName().'").val(ui.values[0] + "-" + ui.values[1]); }';}else {$html .= 'value: '.($this->getValue() == 0 ? '0' : $this->getValue()).', ';$html .= 'slide: function (event, ui) { $("#'.$this->getName().'").val(ui.value); }';}$html .= ' }); }); </script>';return $html;}} ?><?php class LatLngField extends AbstractField {protected $default_lat;protected $default_lng;public function __construct($name, $label, $properties=null) {$this->setProperties(array('zoom' => 5,'enableZoom' => false,'zoomControl' => false,'enableMove' => false,'moveControl' => false,'mapType' => 'map','apiKey' => ''));parent::__construct($name, $label, $properties);$this->setDefaultValue(46.69466726500896, 2.1093745624999656, '');}public function setDefaultValue($lat, $lng, $address='') {$this->value = array((float) $lat, (float) $lng, (string)$address);$this->default_lat = $lat;$this->default_lng = $lng;return $this;}public function getValue() {return $this->value;}public function lat($value=null) {if (is_float($value)) {$this->value[0] = $value;return $this;}if ($this->value[0] == $this->default_lat) {return null;}return $this->value[0];}public function lng($value=null) {if (is_float($value)) {$this->value[1] = $value;return $this;}if ($this->value[1] == $this->default_lng) {return null;}return $this->value[1];}public function name($value=null) {if (is_string($value)) {$this->value[0] = $value;return $this;}if ($this->isDefaultValue()) {return null;}return $this->value[2];}public function isDefaultValue() {return ($this->value[0] == $this->default_lat) && ($this->value[1] == $this->default_lng);}public function getValueToString($onlyLatLng=false) {if ($onlyLatLng) {return $this->value[0] . ',' . $this->value[1];}return implode(',', $this->value);}public function setValue($lat, $lng=null, $address='') {if ($lng == null) {if (is_string($lat)) {list($lat, $lng, $address) = $this->parseStringValue($lat);}else {return $this;}}$this->value = array((float) $lat, (float) $lng, (string)$address);return $this;}public function parseStringValue($val) {if (!is_string($val)) {return array(null, null, null);}$address = explode(',', $val);$lat = floatval(trim(array_shift($address)));$lng = floatval(trim(array_shift($address)));$address = trim(implode(',', $address));return array($lat,$lng,$address,);}public function checkValue($value, &$error) {if ($this->getProperty('mandatory')) {list($lat, $lng, $address) = $this->parseStringValue($value);if ("$lat" == "".$this->default_lat && "$lng" == "".$this->default_lng) {$error = i18n::get('FormBuilder.Error.Map.Null');return false;}}return true;}public function getRequiredFiles() {return array('js:http://maps.google.com/maps/api/js?sensor=false&amp;key='.$this->getProperty('apiKey'));}public function render($params=array('lang' => 'en')) {$n = ucfirst($this->getName());$html = '<input type="hidden" name="'.$this->getName().'" id="'.$this->getName().'" value="'.ouptutVar($this->getValueToString()).'" />';$html .= '<noscript>Erreur</noscript>'; $html .= '<div class="formb-latlngfield-display">Latitude: <span id="'.$this->getName().'Lat">'.round($this->lat(), 4).'</span><br />Longitude: <span id="'.$this->getName().'Lng">'.round($this->lng(), 4).'</span><br />Address: <span id="'.$this->getName().'Adr">'.htmlspecialchars($this->value[2]).'</span></div>';$html .= '<div class="formb-latlngfield-map" id="mapArea'.$n.'"></div>';$html .= '<script type="text/javascript">var fbmap_'.$n.', fbmarker_'.$n.', fbfield_'.$n.';';$html .= ' function loadMap'.$n.'() { var thiz = this;';$html .= ' this.field = document.getElementById("'.$this->getName().'");';$html .= ' fbfield_'.$n.' = this.field;';$html .= ' this.geocoder = new google.maps.Geocoder();';$html .= ' this.value = new google.maps.LatLng('.$this->getValueToString(true).');';$html .= ' this.options = { zoom: '.$this->getProperty('zoom').', center: this.value,';$html .= ' mapTypeId: google.maps.MapTypeId.ROADMAP, scrollwheel: false, streetViewControl: false };';$html .= ' this.map = new google.maps.Map(document.getElementById("mapArea'.$n.'"), this.options);';$html .= ' fbmap_'.$n.' = this.map;';$html .= ' var mark = this.marker = new google.maps.Marker({position: this.value, map: this.map, draggable: true});';$html .= ' google.maps.event.addListener(this.marker, "dragend", function (ev) { ';$html .= ' document.getElementById("'.$this->getName().'Lat").innerHTML = Math.round(mark.getPosition().lat() * 10000) / 10000;';$html .= ' document.getElementById("'.$this->getName().'Lng").innerHTML = Math.round(mark.getPosition().lng() * 10000) / 10000;';$html .= ' thiz.value = mark.position;';$html .= ' thiz.field.value = mark.getPosition().lat() + "," + mark.getPosition().lng() + ",";';$html .= ' thiz.geocoder.geocode({"latLng": mark.getPosition(), "language": "'.$params['lang'].'"}, function (results, status) {';$html .= ' if (status == google.maps.GeocoderStatus.OK) { if (results[1]) { document.getElementById("'.$this->getName().'Adr").innerHTML = results[1].formatted_address; fbfield_'.$n.'.value = fbfield_'.$n.'.value + results[1].formatted_address; }';$html .= ' else document.getElementById("'.$this->getName().'Adr").innerHTML = ""; }';$html .= ' }); }); ';$html .= ' fbmarker_'.$n.' = this.marker;';$html .= '};';if ($this->getValue() != null) {}$html .= ' $("body").onload = loadMap'.$n.'();';$html .= '</script>';return $html;}} ?><?php class EditableTableField extends AbstractField {public function __construct($name, $label, $properties=null) {$this->setProperties(array('cols' => array('A','B','C'),'rows' => 3));parent::__construct($name, $label, $properties);$this->setValue(null);}public function checkData(AbstractForm $form) {$data = $form->getQueryRawData();$max = sizeof($this->getProperty('cols')) * $this->getProperty('rows');while ($max > 0) {$max--;if (!array_key_exists($this->getName().'Data'.$max, $data)) {$this->setError(i18n::get('FormBuilder.Error.Partial'));return false;}}$new = $this->getPostedDatas($data);$this->setValue($new);return true;}public function getPostedDatas($data) {$c = 0;$rows = $this->getProperty('rows');$cols = sizeof($this->getProperty('cols'));$r = array();while ($cols > 0) {$rr = array();$n = $rows;while ($n > 0) {$value = @$data[$this->getName().'Data'.$c];if ($value == '') {$rr[] = null;}else {$rr[] = $value;}$c++;$n--;}$r[] = $rr;$cols--;}return $r;}protected static function createEmptyArray($row=1, $col=0, $value=null) {$r = array();while ($row > 0) {if ($col > 0) {$r[] = self::createEmptyArray($col, 0);}else {$r[] = $value;}$row--;}return $r;}public function setValue($value) {$rows = $this->getProperty('rows');$cols = sizeof($this->getProperty('cols'));if (is_array($value)) {$r = array();foreach ($value as $row) {if (!is_array($row)) {continue;}$rr = array();foreach ($row as $col) {$rr[] = $col;}while (sizeof($rr) < $cols) {$rr[] = null;}$r[] = $rr;}while (sizeof($r) < $rows) {$r[] = self::createEmptyArray($cols, 0, null);}$this->value = $r;}else {$this->value = self::createEmptyArray($rows, $cols, null);}return $this;}public function render($params=array()) {$html = '<table id="'.$this->getName().'" class="formb-field formb-field-table" border="1" cellspacing="0" cellpadding="0"><thead><tr>';foreach ($this->getProperty('cols') as $col) {$html .= '<th>'.$col.'</th>';}$html .= '</tr></thead><tbody>';$c = 0;$rows = $this->getProperty('rows');$cols = sizeof($this->getProperty('cols'));for ($i = 0; $i < $rows; $i++) {$html .= '<tr>';for ($j = 0; $j < $cols; $j++) {$html .= '<td><input class="formb-field-table-input" type="text" name="'.$this->getName().'Data'.$c++.'"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}$html .= ' value="'.@ouptutVar($this->value[$i][$j]).'" /></td>';}$html .= '</tr>';}$html .= '</tbody></table>';return $html;}} ?><?php class TagselectorField extends AbstractField {public function __construct($name, $label, $properties=null) {$this->setProperties(array('wsUrl' => null,'wsMethod' => 'GET','queryParam' => 'q','onResult' => null,'onAdd' => null,'onDelete' => null,'searchDelay' => 300,'minChars' => 2,'hintText' => 'Type in a search term','noResultsText' => 'No results','searchingText' => 'Searching...','deleteText' => 'x','preventDuplicates' => true));parent::__construct($name, $label, $properties);}public function getRequiredFiles() {return array('jquery.js','jquery.tokeninput.js','jquery.tokeninput.css');}public function render($params=array()) {if ($this->getProperty('wsUrl') == null) {return '<script type="text/javascript">alert("Le champ \"'.$this->getName().'\" n\'est pas configuré (propriété \"wsUrl\" manquante)");</script>';}$html = '<input type="text" id="'.$this->getName().'" name="'.$this->getName().'" class="formb-field formb-field-text formb-field-tagselector" />';$html .= '<script type="text/javascript">';$html .= '$(function () { $("#'.$this->getName().'").tokenInput("'.$this->getProperty('wsUrl').'", {';$html .= ' queryParam: "'.$this->getProperty('queryParam').'",';$html .= ' theme: "facebook",';$html .= ' searchDelay: '.$this->getProperty('searchDelay').',';$html .= ' minChars: '.$this->getProperty('minChars').',';$html .= ' preventDuplicates: '.($this->getProperty('minChars') ? 'true' : 'false').',';$html .= ' hintText: "'.$this->getProperty('hintText').'",';$html .= ' noResultsText: "'.$this->getProperty('noResultsText').'",';$html .= ' searchingText: "'.$this->getProperty('searchingText').'",';$html .= ' deleteText: "'.$this->getProperty('deleteText').'",';if ($this->getProperty('onResult') != null) {$html .= ' onResult: function (item) { '.$this->getProperty('onResult').' },';}if ($this->getProperty('onAdd') != null) {$html .= ' onAdd: function (item) { '.$this->getProperty('onAdd').' },';}if ($this->getProperty('onDelete') != null) {$html .= ' onDelete: function (item) { '.$this->getProperty('onDelete').' },';}$html .= ' method: "'.$this->getProperty('wsMethod').'"';$html .= '}); }); </script>';return $html;}} ?><?php class ImageSelectorField extends AbstractField {public function __construct($name, $label, $properties=null) {$this->setProperties(array('swfURL' => 'resources/uploadify.swf','targetURL' => null,'cancelImgURL' => 'resources/cancel.png','sizeLimitKo' => 1024,'fileExt' => array('jpg', 'jpeg', 'png', 'gif'),'fileDesc' => 'Web Image Files (.JPG, .GIF, .PNG)','postData' => null));parent::__construct($name, $label, $properties);$this->value = array();}public function getRequiredFiles() {return array('jquery.js','jquery.uploadify.js','swfobject.js','jquery-ui.js','jquery-ui-theme/jquery-ui.css');}public function setValue($value) {if (is_string($value)) {$this->value = array();$values = explode('*', $value);foreach ($values as $value) {if (trim($value) == '') {continue;}$value = explode(':', $value, 2);if (sizeof($value) == 2 && !empty($value[0]) && !empty($value[1])) {$this->value[] = array('image_id' => $value[0],'image_thumb_url' => $value[1]);}}}else {$this->value = array();}return $this;}public function addPicture($pictureId, $thumbURL) {$this->value[] = array('image_id' => $pictureId,'image_thumb_url' => $thumbURL);return $this;}public function getValueAsString() {$r = '';foreach ($this->value as $picture) {$r .= '*' . $picture['image_id'] . ':' . $picture['image_thumb_url'];}return $r;}public function render($params=array()) {if ($this->getProperty('targetURL') == null) {return '<script type="text/javascript">alert("Le champ \"'.$this->getName().'\" n\'est pas configuré (propriété \"targetURL\" manquante)");</script>';}$html = '<div>';$html .= '<input type="hidden" name="'.$this->getName().'" id="'.$this->getName().'" value="'.ouptutVar($this->getValueAsString()).'" />';$html .= '<input type="hidden" name="MAX_FILE_SIZE" value="'.($this->getProperty('sizeLimitKo') * 1024).'" />';$html .= '<input type="file" name="'.$this->getName().'File" id="'.$this->getName().'File" class="formb-field formb-field-file"';if ($this->getProperty('disabled') == true) {$html .= ' disabled="disabled"';}if ($this->getProperty('readonly') == true) {$html .= ' readonly="readonly"';}$html .= ' />';if ($this->getProperty('disabled') != true && $this->getProperty('readonly') != true) {$html .= '<script type="text/javascript">';$html .= '$(function () {';$html .= '$("#'.$this->getName().'File").uploadify({';$html .= '"uploader": "'.$this->getProperty('swfURL').'",';$html .= '"script": "'.$this->getProperty('targetURL').'",';$html .= '"cancelImg": "'.$this->getProperty('cancelImgURL').'",';$html .= '"auto": true,';$html .= '"multi": true,';$html .= '"method": "POST",';$html .= '"simUploadLimit": 2,';if ($this->getProperty('postData') != null) {$html .= ' "scriptData": '.varToJs($this->getProperty('postData'), true).',';}if ($this->getProperty('fileExt') != null) {$html .= '"fileExt": "*.'.implode(';*.', $this->getProperty('fileExt')).'",';}if ($this->getProperty('fileDesc') != null) {$html .= '"fileDesc": "'.$this->getProperty('fileDesc').'",';}$html .= '"fileDataName": "'.$this->getName().'File",';$html .= '"sizeLimit": '.($this->getProperty('sizeLimitKo') * 1024).',';$html .= '"onComplete": function (event, id, file, response, data) {';$html .= 'try {';$html .= 'var r = jQuery.parseJSON(response);';$html .= 'if (r == null) { alert("Internal error: invalid return type (not JSON)"); return; }';$html .= 'if (r.status != "OK") {';$html .= 'alert("Error: "+r.error.type+" - "+r.error.info); return;';$html .= '}';$html .= 'else {';$html .= 'var d = $("<li>");';$html .= 'd.addClass("formb-field-imageselector-img");';$html .= 'd.css("backgroundImage", "url("+r.thumb+")");';$html .= 'd.attr("imgid", r.id);';$html .= 'd.attr("thumburl", r.thumb);';$html .= 'var c = $("<a>");';$html .= 'c.attr("href", "javascript:;");';$html .= 'c.append("<img src=\"'.$this->getProperty('cancelImgURL').'\" alt=\"X\" />");';$html .= 'c.click(function () { $(this).parent().remove(); updateField'.$this->getName().'(); });';$html .= 'd.append(c);';$html .= '$("#'.$this->getName().'Area").append(d);';$html .= 'updateField'.$this->getName().'();';$html .= '}';$html .= '} catch (err) { ';$html .= 'alert("Internal error: invalid return type (not valid JSON - "+err+")"); return;';$html .= '}';$html .= '},';$html .= '"onError": function (event, id, file, error) {';$html .= 'if (error.type != "File Size") { alert("Error: "+error.type+" - "+error.info); }';$html .= '}';$html .= '});';$html .= '$("#'.$this->getName().'Area").sortable({ revert: true, cursorAt: {top:0, left:0}, stop: function () { updateField'.$this->getName().'(); } });';$html .= '});';$html .= 'function updateField'.$this->getName().'() {';$html .= 'var tmp = "";';$html .= '$("#'.$this->getName().'Area li").each(function () {';$html .= 'tmp += "*" + $(this).attr("imgid") + ":" + $(this).attr("thumburl");';$html .= '});';$html .= '$("#'.$this->getName().'").val(tmp);';$html .= '}';$html .= '</script>';}$html .= '<ul class="formb-field-imageselector-area" id="'.$this->getName().'Area">';foreach ($this->value as $img) {$html .= '<li class="formb-field-imageselector-img" style="background-image: url(\'';$html .= $img['image_thumb_url'].'\')" imgid="'.htmlspecialchars($img['image_id']).'" thumburl="'.htmlspecialchars($img['image_thumb_url']).'">';$html .= '<a href="javascript:;" onclick="$(this).parent().remove(); updateField'.$this->getName().'();">';$html .= '<img src="'.$this->getProperty('cancelImgURL').'" alt="X" />';$html .= '</a></li>';}$html .= '</ul></div>';return $html;}} ?><?php class CheckBoxListField extends AbstractField {protected $values = array();public function __construct($name, $label, $values, $properties=array()) {$this->setProperties(array('separator' => ' or ','placeholder' => 'Select a value...','indifferent' => 'Indifferent'));parent::__construct($name, $label);$this->setValues($values);$this->setProperties($properties);$this->value = array();}public function getKeys() {return array_keys($this->values);}public function setValue($value) {$this->value = array();if (is_array($value)) {foreach ($this->values as $key => $val) {$kkey = $key === 0 ? '0' : "$key";if (in_array($kkey, $value)) {$this->value[] = $key;}}}return $this;}public function getValues() {return $this->values;}public function setValues($values) {if (is_array($values)) {$this->values = $values;}else {$this->values = array();}return $this;}public function getRequiredFiles() {return array('jquery.js');}public function getValueAsString() {$s = '';foreach ($this->values as $key => $val) {$key = $key === 0 ? '0' : "$key";if (in_array($key, $this->value)) {if ($s !== '') {$s .= $this->getProperty('separator');}$s .= $val;}}return $s;}public function render($params=array()) {$html = '';if (!$this->getProperty('mandatory')) {$html .= '<a href="javascript:;">'.htmlspecialchars($this->getProperty('indifferent')).'</a>';}foreach ($this->values as $key => $value) {if ($html !== '') {$html .= '<br />';}$kkey = $key === 0 ? '0' : "$key";$kkey = htmlspecialchars($kkey);$html .= '<input type="checkbox" id="'.$this->getName().'_'.$kkey.'" name="'.$this->getName();$html .= '[]" value="'.$kkey.'" '.(in_array("$key", $this->value) ? 'checked="checked" ' : '').'/>';$html .= ' <label for="'.$this->getName().'_'.$kkey.'">'.htmlspecialchars($value).'</label>';}$html = '<div class="formb-field-checkboxlist" id="'.$this->getName().'">'.$html.'</div>';$html .= '<script type="text/javascript">$(function () {';$html .= ' $("<input>")
					.attr("type", "text")
					.val("'.htmlspecialchars($this->getValueAsString()).'")
					.addClass("formb-field")
					.addClass("formb-field-text")
					.addClass("formb-field-checkboxlist-select")
					.attr("readonly", "readonly")
					.attr("placeholder", "'.htmlspecialchars($this->getProperty('placeholder')).'")
					.bind("click", function () {
						$(this).hide().next().show();
					})
					.insertBefore("#'.$this->getName().'");';$html .= ' $("#'.$this->getName().' a")
					.click(function () {
						$("input:checked", $(this).parent()).each(function () {
							$(this).removeAttr("checked");
						});
						$(this).parent().trigger("mouseleave");
					});';$html .= ' $("#'.$this->getName().'")
					.mouseleave(function () {
						var div = $(this);
						var txt = "";
						$("input:checked", this).each(function () {
							txt += (txt === "" ? "" : "'.htmlspecialchars($this->getProperty('separator')).'")
								+ $("label[for=\'" + $(this).attr("id") + "\']", div).text();
						});
						if (txt === "" && '.($this->getProperty('mandatory') ? 'false' : 'true').') {
							txt = "'.htmlspecialchars($this->getProperty('indifferent')).'";
						}
						$(this).prev().val(jQuery.trim(txt)).show();
						$(this).hide();
					})
					.attr("javascriptyzed", "true")
					.hide()';$html .= ' });</script>';return $html;}} ?><?php interface FormRendererInterface {public function render(Form $form, $options=array());public function getRequiredFiles();} ?><?php class DivLayoutRenderer implements FormRendererInterface {private static $defaultConfig = array('width-labels' => 250,'width-fields' => 400,'display-button-submit' => true,'display-button-reset' => true,'display-button-cancel' => true);public function getRequiredFiles() {return array();}public function render(Form $form, $options=array()) {$options = array_merge(self::$defaultConfig, $options);$html = '<form id="'.$form->idPrefixe.$form->getFormName().'" name="form'.$form->getFormName().'" method="'.$form->getFormMethod().'"';if ($form->getFormMethod() == 'POST') {$html .= ' enctype="'.$form->getEncodingType().'"';}$html .= ' action="'.$form->getFormActionURL().'" class="formb-form" style="width:'.($options['width-labels']+$options['width-fields']+1).'px">';$hidden = '';foreach ($form->getFields() as $field) {$msg = !$field->hasError() ? '' : ' <span class="formb-error">'.$field->getError().'</span>';if ($field instanceof HiddenField) {$hidden .= $field->render();}else if ($field instanceof HTML) {$html .= $field->render();}else {$prefix = (!($field instanceof SelectField) && $field->getProperty('mandatory')) ? ' <span class="formb-mandatory">*</span> ' : '';if (!$field->getProperty('noLabel')) {$html .= '<div class="formb-divlayout-label" style="width:'.($options['width-labels']-5).'px"><label for="'.$field->getName().'">';$html .= $prefix.$field->getLabel().'</label></div>';}$html .= '<div class="formb-divlayout-field" style="width:'.($options['width-fields']-5).'px';if ($field->getProperty('noLabel')) {$html .= ';margin-left:'.($options['width-labels']+5).'px';}$html .= '">';if ($field->getProperty('prepend') != null) {$html .= '<div class="formb-divlayout-prependtext">'.$field->getProperty('prepend').'</div>';}$html .= $field->render().$msg;if ($field->getProperty('append') != null) {$html .= '<div class="formb-divlayout-appendtext">'.$field->getProperty('append').'</div>';}$html .= '</div>';}}$html .= '<div class="formb-divlayout-buttons" style="padding-left:'.($options['width-labels']+5).'px">';if ($options['display-button-cancel'] && $form->getFormCancel() != null) {$html .= '<input type="button" value="'.i18n::get('FormBuilder.Button.Cancel').'" class="formb-divlayout-button-cancel" onclick="'.$form->getFormCancel().'" />';}if ($options['display-button-reset']) {$html .= '<input type="reset" value="'.i18n::get('FormBuilder.Button.Reset').'" class="formb-divlayout-button-reset" />';}if ($options['display-button-submit']) {$html .= '<input type="submit" name="formSent'.$form->getFormName().'" id="formSent'.$form->getFormName().'" class="formb-divlayout-button-submit" value="'.i18n::get('FormBuilder.Button.Submit').'" />';}$html .= '</div>';$html .= $hidden;$html .= '</form>';return $html;}} ?><?php class LiquidLayoutRenderer implements FormRendererInterface {private static $defaultConfig = array('width' => 250,'fields' => '','display-button-submit' => true,'display-button-reset' => false,'display-button-cancel' => false);public function getRequiredFiles() {return array();}public function render(Form $form, $options=array()) {$options = array_merge(self::$defaultConfig, $options);$rows = array();$tmp = explode("\n", trim($options['fields']));foreach ($tmp as $row) {$row = trim($row);if (empty($row)) continue;$cols = explode("\t", $row);$row = array();foreach ($cols as $col) {$col = trim($col);if (empty($col)) continue;$field = $form->getFieldByName($col);if (!$field) {exit("Field not found: $col");}$row[] = $field;}if (sizeof($row) > 0) {$rows[] = $row;}}$html = '<form id="'.$form->idPrefixe.$form->getFormName().'" name="form'.$form->getFormName().'" method="'.$form->getFormMethod().'"';if ($form->getFormMethod() == 'POST') {$html .= ' enctype="'.$form->getEncodingType().'"';}$html .= ' action="'.$form->getFormActionURL().'" class="formb-form formb-layout-liquid" style="width:'.($options['width']).'px">';$hidden = '';foreach ($rows as $row) {$nbrcol = sizeof($row);$n = 0;foreach ($row as $field) {if ($field instanceof HiddenField) {$hidden .= $field->render();continue;}$html .= '<div id="block'.$field->getName().'" style="width:'.round($options['width'] / $nbrcol).'px'.($n == 0 ? ';clear:left' : '').'">';$n++;if ($field instanceof HTML) {$html .= $field->render();}else {$msg = !$field->hasError() ? '' : ' <span class="formb-error">'.$field->getError().'</span>';$prefix = (!($field instanceof SelectField) && $field->getProperty('mandatory')) ? ' <span class="formb-mandatory">*</span> ' : '';if (!$field->getProperty('noLabel')) {$html .= '<div class="formb-liquidlayout-label"><label for="'.$field->getName().'">';$html .= $prefix.$field->getLabel().'</label></div>';}$html .= '<div class="formb-liquidlayout-field">';if ($field->getProperty('prepend') != null) {$html .= '<div class="formb-liquidlayout-prependtext">'.$field->getProperty('prepend').'</div>';}$html .= $field->render().$msg;if ($field->getProperty('append') != null) {$html .= '<div class="formb-liquidlayout-appendtext">'.$field->getProperty('append').'</div>';}$html .= '</div>';}$html .= '</div>';}}$html .= '<div class="formb-liquidlayout-buttons">';if ($options['display-button-cancel'] && $form->getFormCancel() != null) {$html .= '<input type="button" value="'.i18n::get('FormBuilder.Button.Cancel').'" class="formb-liquidlayout-button-cancel" onclick="'.$form->getFormCancel().'" />';}if ($options['display-button-reset']) {$html .= '<input type="reset" value="'.i18n::get('FormBuilder.Button.Reset').'" class="formb-liquidlayout-button-reset" />';}if ($options['display-button-submit']) {$html .= '<input type="submit" name="formSent'.$form->getFormName().'" id="formSent'.$form->getFormName().'" class="formb-liquidlayout-button-submit" value="'.i18n::get('FormBuilder.Button.Submit').'" />';}$html .= '</div>';$html .= $hidden;$html .= '</form>';$html .= '<script type="text/javascript">';$html .= '$(function () { $(".formb-error").prev("input").addClass("formb-liquidlayout-fielderror"); });';$html .= '</script>';return $html;}} ?><?php class UserAccountFormListener implements FormEventListener {public function onFormEvent(Form $form, $event, $data) {if ($event == 'execute' && $data == 'end') {if ($form->formType->getValue() == 'company') {$form->addFormField(new TextField('companyName',i18n::get('FormBuilder.ExtFormsUserAccount.CompanyName'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.CompanyNameAppend'))), 1);}if ($form->formType->getValue() == 'public') {$form->addFormField(new TextField('entityName',i18n::get('FormBuilder.ExtFormsUserAccount.EntityName'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.EntityNameAppend'))), 1);}if ($form->formType->getValue() == 'association') {$form->addFormField(new TextField('associationName',i18n::get('FormBuilder.ExtFormsUserAccount.AssociationName'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.AssociationNameAppend'))), 1);}if ($form->formType->getValue() != 'individual') {$form->lastName->setProperty('append', i18n::get('FormBuilder.ExtFormsUserAccount.LegalUser'));}}}public function onFieldEvent(Form $form, Field $field, $event, $data) {if ($field->getName() == 'formType' && $event == 'onchange') {echo '$field.attr("disabled", "disabled");';echo '$("#userFormWait").show();';$form->submit();}}}class UserAccountForm extends AbstractForm {public function __construct($lang='en', $formName, $formActionURL, $formMethod='POST') {parent::__construct($lang, $formName, $formActionURL, $formMethod);if ($lang == 'fr') {i18n_loadLang_French_ClientAccountForm();}else {i18n_loadLang_English_ClientAccountForm();}$listener = new UserAccountFormListener();$this->addFormField(new RadioGroupField('formType',i18n::get('FormBuilder.ExtFormsUserAccount.YouAre'),array('individual' => i18n::get('FormBuilder.ExtFormsUserAccount.Individual'),'company' => i18n::get('FormBuilder.ExtFormsUserAccount.Company'),'association' => i18n::get('FormBuilder.ExtFormsUserAccount.Association'),'public' => i18n::get('FormBuilder.ExtFormsUserAccount.PublicBody')),array('layout' => 'buttons','prepend' => '<span id="userFormWait" style="display:none"></span>','onchange' => $listener)));$this->formType->setValue('individual');$this->bind('execute', $listener);$this->addFormField(new TextField('firstName',i18n::get('FormBuilder.ExtFormsUserAccount.FirstName'),array('mandatory' => true)));$this->addFormField(new TextField('lastName',i18n::get('FormBuilder.ExtFormsUserAccount.LastName'),array('mandatory' => true)));$this->addFormField(new TextField('email',i18n::get('FormBuilder.ExtFormsUserAccount.Email'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.EmailAppend'))));$this->email->setDataPattern('email');$this->addFormField(new PasswordTextField('password',i18n::get('FormBuilder.ExtFormsUserAccount.Password'),array('passwordStrengthIndicator' => true,'minLength' => 4,'maxLength' => 20,'mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.PasswordAppend'),'delegate' => new StrengthPasswordCheckDelegate())));$this->addFormField(new PasswordTextField('confirmPassword',i18n::get('FormBuilder.ExtFormsUserAccount.ConfirmPassword'),array('passwordStrengthIndicator' => false,'minLength' => 4,'maxLength' => 20,'mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.ConfirmPasswordAppend'),'delegate' => new MatchPasswordsCheckDelegate())));$this->addFormField(new SelectField('securityQuestion',i18n::get('FormBuilder.ExtFormsUserAccount.SecurityQuestion'),array(i18n::get('FormBuilder.ExtFormsUserAccount.SecurityQuestion.1'),i18n::get('FormBuilder.ExtFormsUserAccount.SecurityQuestion.2'),i18n::get('FormBuilder.ExtFormsUserAccount.SecurityQuestion.3')),array('editable' => false,'mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.SecurityQuestionAppend'))));$this->addFormField(new TextField('securityAnswer',i18n::get('FormBuilder.ExtFormsUserAccount.SecurityQuestionAnswer'),array('mandatory' => true)));$this->addFormField(new Separator('sep1', 'Adresse'));$this->addFormField(new TextAreaField('streetAddress',i18n::get('FormBuilder.ExtFormsUserAccount.StreetAddress'),array('mandatory' => true)));$this->addFormField(new TextField('zipcode',i18n::get('FormBuilder.ExtFormsUserAccount.Zipcode'),array('mandatory' => true,'dataPattern' => 'zipcode')));$this->addFormField(new TextField('city',i18n::get('FormBuilder.ExtFormsUserAccount.City'),array('mandatory' => true)));$this->addFormField(new CountrySelectField('country',i18n::get('FormBuilder.ExtFormsUserAccount.Country'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.CountryAppend'),'lang' => $lang)));$this->addFormField(new TextField('phone',i18n::get('FormBuilder.ExtFormsUserAccount.Phone'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.PhoneAppend'))));$this->addFormField(new TextField('fax',i18n::get('FormBuilder.ExtFormsUserAccount.Fax'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.FaxAppend'))));$this->addFormField(new TextField('cell',i18n::get('FormBuilder.ExtFormsUserAccount.Cell'),array('mandatory' => true,'append' => i18n::get('FormBuilder.ExtFormsUserAccount.CellAppend'))));$this->addFormField(new CapchaField('capcha','Vérification des mots',array('mandatory' => true,'prepend' => 'Entrez les caractères figurant dans l\'image ci-dessous','append' => 'La casse n\'est pas prise en compte.')));}}class StrengthPasswordCheckDelegate implements FieldCheckDelegate {public function getFieldError(Field $field, Form $form) {if ($field->getPasswordStrength() < 50) {return "This password is too weak.";}return null;}}class MatchPasswordsCheckDelegate implements FieldCheckDelegate {public function getFieldError(Field $field, Form $form) {if ($field->getValue() != $form->getFieldByName('password')->getValue()) {return "Mismatch with password.";}return null;}}function i18n_loadLang_French_ClientAccountForm() {i18n::add('FormBuilder.ExtFormsUserAccount.YouAre', 'Vous êtes');i18n::add('FormBuilder.ExtFormsUserAccount.Individual', 'un particulier');i18n::add('FormBuilder.ExtFormsUserAccount.Association', 'une association');i18n::add('FormBuilder.ExtFormsUserAccount.Company', 'une société');i18n::add('FormBuilder.ExtFormsUserAccount.PublicBody', 'un organisme public');i18n::add('FormBuilder.ExtFormsUserAccount.Yes', 'oui');i18n::add('FormBuilder.ExtFormsUserAccount.No', 'non');i18n::add('FormBuilder.ExtFormsUserAccount.LegalUser', 'Pour une société, une association ou un organisme, merci de renseigner le prénom et nom du responsable légal.');i18n::add('FormBuilder.ExtFormsUserAccount.CompanyName', 'Nom de la société (Raison sociale)');i18n::add('FormBuilder.ExtFormsUserAccount.CompanyNameAppend', 'Le nom de votre société doit être identique à la raison sociale associée à votre Siren dans les <a href="http://www.score3.fr/" target="_blank">bases en ligne</a>.');i18n::add('FormBuilder.ExtFormsUserAccount.BusinessRegistrationNumber', 'INSEE ou SIREN');i18n::add('FormBuilder.ExtFormsUserAccount.BusinessRegistrationNumberAppend', 'Entrez votre numéro SIREN ou INSEE. Vous pouvez retrouver cette information par exemple sur <a href="http://www.societe.com/" target="_blank">ce site</a>.');i18n::add('FormBuilder.ExtFormsUserAccount.VAT', 'N° de TVA IC');i18n::add('FormBuilder.ExtFormsUserAccount.VATAppend', 'Entrez votre numéro de TVA intracommunautaire, ce numéro est obligatoire sur les factures des entreprises françaises.');i18n::add('FormBuilder.ExtFormsUserAccount.AssociationName', 'Nom de l\'association');i18n::add('FormBuilder.ExtFormsUserAccount.AssociationNameAppend', 'Entrez le nom de votre association.');i18n::add('FormBuilder.ExtFormsUserAccount.EntityName', 'Dénomination');i18n::add('FormBuilder.ExtFormsUserAccount.EntityNameAppend', 'Veuillez saisir le nom de l\'organisme public (mairie, ministère, ...)');i18n::add('FormBuilder.ExtFormsUserAccount.FirstName', 'Prénom');i18n::add('FormBuilder.ExtFormsUserAccount.LastName', 'Nom');i18n::add('FormBuilder.ExtFormsUserAccount.Password', 'Mot de passe');i18n::add('FormBuilder.ExtFormsUserAccount.PasswordAppend', 'Veuillez saisir un mot de passe vous permettant d\'accéder à votre compte personnel. Nous vous recommandons d\'utiliser des caractères spéciaux (ex. :%$* ?) en plus de ceux alphanumériques.');i18n::add('FormBuilder.ExtFormsUserAccount.ConfirmPassword', 'Confirmez votre mot de passe');i18n::add('FormBuilder.ExtFormsUserAccount.ConfirmPasswordAppend', 'Veuillez saisir de nouveau votre mot de passe.');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion', 'Votre question sécurité');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion.1', 'Quel est le nom de votre ville préférée?');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion.2', 'Quel est le nom de jeune fille de votre mère?');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion.3', 'Quel est votre plat préféré?');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestionAppend', 'En cas de demande de changement de mot de passe, ce sera cette question qui vous sera posée.');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestionAnswer', 'Votre réponse sécurité');i18n::add('FormBuilder.ExtFormsUserAccount.StreetAddress', 'Adresse postale');i18n::add('FormBuilder.ExtFormsUserAccount.Zipcode', 'Code postal');i18n::add('FormBuilder.ExtFormsUserAccount.City', 'Ville');i18n::add('FormBuilder.ExtFormsUserAccount.Country', 'Pays');i18n::add('FormBuilder.ExtFormsUserAccount.CountryInit', 'Choisissez votre pays');i18n::add('FormBuilder.ExtFormsUserAccount.CountryAppend', 'Précisez l\'état dans lequel vous vivez pour les E.U, l\'Australie, le Canada ou l\'Inde.');i18n::add('FormBuilder.ExtFormsUserAccount.State', 'État');i18n::add('FormBuilder.ExtFormsUserAccount.StateInit', 'Choisissez votre État');i18n::add('FormBuilder.ExtFormsUserAccount.Phone', 'Téléphone');i18n::add('FormBuilder.ExtFormsUserAccount.PhoneAppend', 'Veuillez saisir votre numéro de téléphone au format international. Ex: +33.123456789 pour un numéro en France.');i18n::add('FormBuilder.ExtFormsUserAccount.Fax', 'Fax');i18n::add('FormBuilder.ExtFormsUserAccount.FaxAppend', 'Veuillez entrer votre numéro de fax au format international. Exemple: +33.134543456 pour un numéro en France.');i18n::add('FormBuilder.ExtFormsUserAccount.Cell', 'Portable');i18n::add('FormBuilder.ExtFormsUserAccount.CellAppend', 'Veuillez entrer votre numéro de téléphone portable au format international. Exemple: +33.634543456 pour un numéro en France.');i18n::add('FormBuilder.ExtFormsUserAccount.Email', 'Email');i18n::add('FormBuilder.ExtFormsUserAccount.EmailAppend', 'Votre adresse e-mail, qui doit être valide et à jour.');i18n::add('FormBuilder.ExtFormsUserAccount.Language', 'Langue');}function i18n_loadLang_English_ClientAccountForm() {i18n::add('FormBuilder.ExtFormsUserAccount.YouAre', 'You are');i18n::add('FormBuilder.ExtFormsUserAccount.Individual', 'an individual');i18n::add('FormBuilder.ExtFormsUserAccount.Association', 'an association');i18n::add('FormBuilder.ExtFormsUserAccount.Company', 'a company');i18n::add('FormBuilder.ExtFormsUserAccount.PublicBody', 'a public body');i18n::add('FormBuilder.ExtFormsUserAccount.Yes', 'yes');i18n::add('FormBuilder.ExtFormsUserAccount.No', 'no');i18n::add('FormBuilder.ExtFormsUserAccount.LegalUser', '??');i18n::add('FormBuilder.ExtFormsUserAccount.CompanyName', 'Company name');i18n::add('FormBuilder.ExtFormsUserAccount.CompanyNameAppend', 'Your company name must be identical to the name registered with your SIREN number.');i18n::add('FormBuilder.ExtFormsUserAccount.BusinessRegistrationNumber', 'Business registration number');i18n::add('FormBuilder.ExtFormsUserAccount.BusinessRegistrationNumberAppend', 'Enter your SIREN or INSEE number if applicable.');i18n::add('FormBuilder.ExtFormsUserAccount.VAT', 'VAT number');i18n::add('FormBuilder.ExtFormsUserAccount.VATAppend', 'Enter your company\'s VAT number (this number must be indicated on the invoice for a French company.');i18n::add('FormBuilder.ExtFormsUserAccount.AssociationName', 'Name of association');i18n::add('FormBuilder.ExtFormsUserAccount.AssociationNameAppend', 'Enter the name of your association');i18n::add('FormBuilder.ExtFormsUserAccount.EntityName', 'Entity Name');i18n::add('FormBuilder.ExtFormsUserAccount.EntityNameAppend', 'Please enter the name of your organization.');i18n::add('FormBuilder.ExtFormsUserAccount.FirstName', 'First name');i18n::add('FormBuilder.ExtFormsUserAccount.LastName', 'Last name');i18n::add('FormBuilder.ExtFormsUserAccount.Password', 'Password');i18n::add('FormBuilder.ExtFormsUserAccount.PasswordAppend', 'Please enter a password that will allow you to access your personal account. We recommend that you choose a password between 6 and 16 alphanumeric characters. (spaces not allowed).');i18n::add('FormBuilder.ExtFormsUserAccount.ConfirmPassword', 'Confirm your password');i18n::add('FormBuilder.ExtFormsUserAccount.ConfirmPasswordAppend', 'Please re-enter your password');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion', 'Your security question');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion.1', 'What is the name of yout favorite city ?');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion.2', 'What is your mother\'s maiden name?');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestion.3', 'What is your favorite food ?');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestionAppend', 'In the event that your password is requested, we will ask you this question.');i18n::add('FormBuilder.ExtFormsUserAccount.SecurityQuestionAnswer', 'Your security answer');i18n::add('FormBuilder.ExtFormsUserAccount.StreetAddress', 'Street address');i18n::add('FormBuilder.ExtFormsUserAccount.Zipcode', 'Zip code');i18n::add('FormBuilder.ExtFormsUserAccount.City', 'City');i18n::add('FormBuilder.ExtFormsUserAccount.Country', 'Country');i18n::add('FormBuilder.ExtFormsUserAccount.CountryInit', 'Please select your country');i18n::add('FormBuilder.ExtFormsUserAccount.CountryAppend', 'If you live in the USA, Canada, or India, please indicate your state of residence.');i18n::add('FormBuilder.ExtFormsUserAccount.State', 'State');i18n::add('FormBuilder.ExtFormsUserAccount.StateInit', 'Please select your state');i18n::add('FormBuilder.ExtFormsUserAccount.Phone', 'Phone number');i18n::add('FormBuilder.ExtFormsUserAccount.PhoneAppend', 'Please use the international format for your phone number. Example: +1.1231231234 for the United States, or +33.123456789 for France.');i18n::add('FormBuilder.ExtFormsUserAccount.Fax', 'Fax number');i18n::add('FormBuilder.ExtFormsUserAccount.FaxAppend', 'Please use the international format for your fax number. Example: +44.123 1234 for the UK');i18n::add('FormBuilder.ExtFormsUserAccount.Cell', 'Cell phone');i18n::add('FormBuilder.ExtFormsUserAccount.CellAppend', 'Please use the international format for your cell phone number. Example: +49.12345678 for Germany');i18n::add('FormBuilder.ExtFormsUserAccount.Email', 'E-mail address');i18n::add('FormBuilder.ExtFormsUserAccount.EmailAppend', 'Your e-mail address, which must be valid and up-to-date.');i18n::add('FormBuilder.ExtFormsUserAccount.Language', 'Language');} ?><?php class CountrySelectField extends SelectField {public function __construct($name, $label, $properties=null) {parent::__construct($name, $label, array(), $properties);if ($this->getProperty('lang') == 'fr') {$this->setValues(self::$countries_fr);}else {$this->setValues(self::$countries_en);}}private static $countries_en = array('AF'=>'Afghanistan (افغانستان)','AX'=>'Aland Islands','AL'=>'Albania (Shqipëria)','DZ'=>'Algeria (الجزائر)','AS'=>'American Samoa','AD'=>'Andorra','AO'=>'Angola','AI'=>'Anguilla','AQ'=>'Antarctica','AG'=>'Antigua and Barbuda','AR'=>'Argentina','AM'=>'Armenia (Հայաստան)','AW'=>'Aruba','AU'=>'Australia','AT'=>'Austria (Österreich)','AZ'=>'Azerbaijan (Azərbaycan)','BS'=>'Bahamas','BH'=>'Bahrain (البحرين)','BD'=>'Bangladesh (বাংলাদেশ)','BB'=>'Barbados','BY'=>'Belarus (Белару́сь)','BE'=>'Belgium (België)','BZ'=>'Belize','BJ'=>'Benin (Bénin)','BM'=>'Bermuda','BT'=>'Bhutan (འབྲུག་ཡུལ)','BO'=>'Bolivia','BA'=>'Bosnia and Herzegovina (Bosna i Hercegovina)','BW'=>'Botswana','BV'=>'Bouvet Island ','BR'=>'Brazil (Brasil)','IO'=>'British Indian Ocean Territory','BN'=>'Brunei (Brunei Darussalam)','BG'=>'Bulgaria (България)','BF'=>'Burkina Faso','BI'=>'Burundi (Uburundi)','KH'=>'Cambodia (Kampuchea)','CM'=>'Cameroon (Cameroun)','CA'=>'Canada','CV'=>'Cape Verde (Cabo Verde)','KY'=>'Cayman Islands','CF'=>'Central African Republic','TD'=>'Chad (Tchad)','CL'=>'Chile','CN'=>'China (中国)','CX'=>'Christmas Island','CC'=>'Cocos Islands','CO'=>'Colombia','KM'=>'Comoros (Comores)','CG'=>'Congo','CD'=>'Congo, Democratic Republic of the','CK'=>'Cook Islands','CR'=>'Costa Rica','CI'=>'Côte d\'Ivoire','HR'=>'Croatia (Hrvatska)','CU'=>'Cuba','CY'=>'Cyprus (Κυπρος)','CZ'=>'Czech Republic (Česko)','DK'=>'Denmark (Danmark)','DJ'=>'Djibouti','DM'=>'Dominica','DO'=>'Dominican Republic','EC'=>'Ecuador','EG'=>'Egypt (مصر)','SV'=>'El Salvador','GQ'=>'Equatorial Guinea (Guinea Ecuatorial)','ER'=>'Eritrea (Ertra)','EE'=>'Estonia (Eesti)','ET'=>'Ethiopia (Ityop\'iya)','FK'=>'Falkland Islands','FO'=>'Faroe Islands','FJ'=>'Fiji','FI'=>'Finland (Suomi)','FR'=>'France','GF'=>'French Guiana','PF'=>'French Polynesia','TF'=>'French Southern Territories','GA'=>'Gabon','GM'=>'Gambia','GE'=>'Georgia (საქართველო)','DE'=>'Germany (Deutschland)','GH'=>'Ghana','GI'=>'Gibraltar','GR'=>'Greece (Ελλάς)','GL'=>'Greenland','GD'=>'Grenada','GP'=>'Guadeloupe','GU'=>'Guam','GT'=>'Guatemala','GG'=>'Guernsey','GN'=>'Guinea (Guinée)','GW'=>'Guinea-Bissau (Guiné-Bissau)','GY'=>'Guyana','HT'=>'Haiti (Haïti)','HM'=>'Heard Island and McDonald Islands','HN'=>'Honduras','HK'=>'Hong Kong','HU'=>'Hungary (Magyarország)','IS'=>'Iceland (Ísland)','IN'=>'India','ID'=>'Indonesia','IR'=>'Iran (ایران)','IQ'=>'Iraq (العراق)','IE'=>'Ireland','IM'=>'Isle of Man','IL'=>'Israel (ישראל)','IT'=>'Italy (Italia)','JM'=>'Jamaica','JP'=>'Japan (日本)','JE'=>'Jersey','JO'=>'Jordan (الاردن)','KZ'=>'Kazakhstan (Қазақстан)','KE'=>'Kenya','KI'=>'Kiribati','KW'=>'Kuwait (الكويت)','KG'=>'Kyrgyzstan (Кыргызстан)','LA'=>'Laos (ນລາວ)','LV'=>'Latvia (Latvija)','LB'=>'Lebanon (لبنان)','LS'=>'Lesotho','LR'=>'Liberia','LY'=>'Libya (ليبيا)','LI'=>'Liechtenstein','LT'=>'Lithuania (Lietuva)','LU'=>'Luxembourg (Lëtzebuerg)','MO'=>'Macao','MK'=>'Macedonia (Македонија)','MG'=>'Madagascar (Madagasikara)','MW'=>'Malawi','MY'=>'Malaysia','MV'=>'Maldives (ގުޖޭއްރާ ޔާއްރިހޫމްޖ)','ML'=>'Mali','MT'=>'Malta','MH'=>'Marshall Islands','MQ'=>'Martinique','MR'=>'Mauritania (موريتانيا)','MU'=>'Mauritius','YT'=>'Mayotte','MX'=>'Mexico (México)','FM'=>'Micronesia','MD'=>'Moldova','MC'=>'Monaco','MN'=>'Mongolia (Монгол Улс)','ME'=>'Montenegro (Црна Гора)','MS'=>'Montserrat','MA'=>'Morocco (المغرب)','MZ'=>'Mozambique (Moçambique)','MM'=>'Myanmar (Burma)','NA'=>'Namibia','NR'=>'Nauru (Naoero)','NP'=>'Nepal (नेपाल)','NL'=>'Netherlands (Nederland)','AN'=>'Netherlands Antilles','NC'=>'New Caledonia','NZ'=>'New Zealand','NI'=>'Nicaragua','NE'=>'Niger','NG'=>'Nigeria','NU'=>'Niue','NF'=>'Norfolk Island','MP'=>'Northern Mariana Islands','KP'=>'North Korea (조선)','NO'=>'Norway (Norge)','OM'=>'Oman (عمان)','PK'=>'Pakistan (پاکستان)','PW'=>'Palau (Belau)','PS'=>'Palestinian Territories','PA'=>'Panama (Panamá)','PG'=>'Papua New Guinea','PY'=>'Paraguay','PE'=>'Peru (Perú)','PH'=>'Philippines (Pilipinas)','PN'=>'Pitcairn','PL'=>'Poland (Polska)','PT'=>'Portugal','PR'=>'Puerto Rico','QA'=>'Qatar (قطر)','RE'=>'Reunion','RO'=>'Romania (România)','RU'=>'Russia (Россия)','RW'=>'Rwanda','SH'=>'Saint Helena','KN'=>'Saint Kitts and Nevis','LC'=>'Saint Lucia','PM'=>'Saint Pierre and Miquelon','VC'=>'Saint Vincent and the Grenadines','WS'=>'Samoa','SM'=>'San Marino','ST'=>'São Tomé and Príncipe','SA'=>'Saudi Arabia (المملكة العربية السعودية)','SN'=>'Senegal (Sénégal)','RS'=>'Serbia (Србија)','CS'=>'Serbia and Montenegro (Србија и Црна Гора)','SC'=>'Seychelles','SL'=>'Sierra Leone','SG'=>'Singapore (Singapura)','SK'=>'Slovakia (Slovensko)','SI'=>'Slovenia (Slovenija)','SB'=>'Solomon Islands','SO'=>'Somalia (Soomaaliya)','ZA'=>'South Africa','GS'=>'South Georgia and the South Sandwich Islands','KR'=>'South Korea (한국)','ES'=>'Spain (España)','LK'=>'Sri Lanka','SD'=>'Sudan (السودان)','SR'=>'Suriname','SJ'=>'Svalbard and Jan Mayen','SZ'=>'Swaziland','SE'=>'Sweden (Sverige)','CH'=>'Switzerland (Schweiz)','SY'=>'Syria (سوريا)','TW'=>'Taiwan (台灣)','TJ'=>'Tajikistan (Тоҷикистон)','TZ'=>'Tanzania','TH'=>'Thailand (ราชอาณาจักรไทย)','TL'=>'Timor-Leste','TG'=>'Togo','TK'=>'Tokelau','TO'=>'Tonga','TT'=>'Trinidad and Tobago','TN'=>'Tunisia (تونس)','TR'=>'Turkey (Türkiye)','TM'=>'Turkmenistan (Türkmenistan)','TC'=>'Turks and Caicos Islands','TV'=>'Tuvalu','UG'=>'Uganda','UA'=>'Ukraine (Україна)','AE'=>'United Arab Emirates (الإمارات العربيّة المتّحدة)','GB'=>'United Kingdom','US'=>'United States','UM'=>'United States minor outlying islands','UY'=>'Uruguay','UZ'=>'Uzbekistan (O\'zbekiston)','VU'=>'Vanuatu','VA'=>'Vatican City (Città del Vaticano)','VE'=>'Venezuela','VN'=>'Vietnam (Việt Nam)','VG'=>'Virgin Islands, British','VI'=>'Virgin Islands, U.S.','WF'=>'Wallis and Futuna','EH'=>'Western Sahara (الصحراء الغربية)','YE'=>'Yemen (اليمن)','ZM'=>'Zambia','ZW'=>'Zimbabwe');private static $countries_fr = array('AF'=>'Afghanistan (افغانستان)','ZA'=>'Afrique du Sud (South Africa)','AX'=>'Aland (Îles) (Aland Islands)','AL'=>'Albanie (Shqipëria)','DZ'=>'Algérie (الجزائر)','DE'=>'Allemagne (Deutschland)','AD'=>'Andorre (Andorra)','AO'=>'Angola','AI'=>'Anguilla','AQ'=>'Antarctique (Antarctica)','AG'=>'Antigua et Barbuda (Antigua and Barbuda)','AN'=>'Antilles néerlandaises (Netherlands Antilles)','SA'=>'Arabie Saoudite (المملكة العربية السعودية)','AR'=>'Argentine (Argentina)','AM'=>'Arménie (Հայաստան)','AW'=>'Aruba','AU'=>'Australie (Australia)','AT'=>'Autriche (Österreich)','AZ'=>'Azerbaïdjan (Azərbaycan)','BS'=>'Bahamas','BH'=>'Bahreïn (البحرين)','BD'=>'Bangladesh (বাংলাদেশ)','BB'=>'Barbade (La) (Barbados)','BE'=>'Belgique (België)','BZ'=>'Belize','BJ'=>'Bénin','BM'=>'Bermudes (Bermuda)','BT'=>'Bhutan (འབྲུག་ཡུལ)','BY'=>'Biélorussie (Белару́сь)','BO'=>'Bolivie (Bolivia)','BA'=>'Bosnie-Herzégovine (Bosna i Hercegovina)','BW'=>'Botswana','BV'=>'Bouvet (Île) (Bouvet Island)','BR'=>'Brésil (Brasil)','BN'=>'Brunei (Brunei Darussalam)','BG'=>'Bulgarie (България)','BF'=>'Burkina Faso','BI'=>'Burundi (Uburundi)','KY'=>'Caïmans (Îles) (Cayman Islands)','KH'=>'Cambodge (Kampuchea)','CM'=>'Cameroun','CA'=>'Canada','CV'=>'Cap Vert (Cabo Verde)','CL'=>'Chili (Chile)','CN'=>'Chine (中国)','CX'=>'Christmas (Îles) (Christmas Island)','CY'=>'Chypre (Κυπρος)','CC'=>'Cocos (Îles) (Cocos Islands)','CO'=>'Colombie (Colombia)','KM'=>'Comores (Archipel) (Comores)','CG'=>'Congo','CD'=>'Congo, République démocratique du','CK'=>'Cook (Îles) (Cook Islands)','KP'=>'Corée du Nord (조선)','KR'=>'Corée du Sud (한국)','CR'=>'Costa Rica','CI'=>'Côte d\'Ivoire','HR'=>'Croatie (Hrvatska)','CU'=>'Cuba','DK'=>'Danemark (Danmark)','UM'=>'Dépendances américaines du Pacifique','DJ'=>'Djibouti','DM'=>'Dominique (Dominica)','EG'=>'Égypte (مصر)','AE'=>'Émirats Arabes Unis (الإمارات العربيّة المتّحدة)','EC'=>'Équateur (Ecuador)','ER'=>'Érythrée (Ertra)','ES'=>'Espagne (España)','EE'=>'Estonie (Eesti)','US'=>'États-Unis (United States)','ET'=>'Éthiopie (Ityop\'iya)','FO'=>'Faroe (Îles) (Faroe Islands)','FJ'=>'Fidji (Fiji)','FI'=>'Finlande (Suomi)','FR'=>'France','GA'=>'Gabon','GM'=>'Gambie (Gambia)','GE'=>'Géorgie (საქართველო)','GS'=>'Géorgie du Sud et îles Sandwich du Sud','GH'=>'Ghana','GI'=>'Gibraltar','GR'=>'Grèce (Ελλάς)','GD'=>'Grenade (Grenada)','GL'=>'Groenland (Greenland)','GP'=>'Guadeloupe','GU'=>'Guam','GT'=>'Guatemala','GG'=>'Guernesey (Guernsey)','GN'=>'Guinée','GW'=>'Guinée-Bissau (Guiné-Bissau)','GQ'=>'Guinée équatoriale (Guinea Ecuatorial)','GY'=>'Guyane (Guyana)','GF'=>'Guyane française (French Guiana)','HT'=>'Haïti','HM'=>'Heard et McDonald (Îles)','HN'=>'Honduras','HK'=>'Hong-Kong (Hong Kong)','HU'=>'Hongrie (Magyarország)','VG'=>'Îles vierges britanniques (Virgin Islands, British)','IN'=>'Inde (India)','ID'=>'Indonésie (Indonesia)','IQ'=>'Irak (العراق)','IR'=>'Iran (ایران)','IE'=>'Irlande (Ireland)','IS'=>'Islande (Ísland)','IL'=>'Israël (ישראל)','IT'=>'Italie (Italia)','JM'=>'Jamaïque (Jamaica)','JP'=>'Japon (日本)','JE'=>'Jersey','JO'=>'Jordanie (الاردن)','KZ'=>'Kazakhstan (Қазақстан)','KE'=>'Kenya','KG'=>'Kirghizistan (Кыргызстан)','KI'=>'Kiribati','KW'=>'Koweït (الكويت)','LA'=>'Laos (ນລາວ)','LS'=>'Lesotho','LV'=>'Lettonie (Latvija)','LB'=>'Liban (لبنان)','LR'=>'Liberia','LY'=>'Libye (ليبيا)','LI'=>'Liechtenstein','LT'=>'Lituanie (Lietuva)','LU'=>'Luxembourg (Lëtzebuerg)','MO'=>'Macao','MK'=>'Macédoine (Македонија)','MG'=>'Madagascar (Madagasikara)','MY'=>'Malaisie (Malaysia)','MW'=>'Malawi','MV'=>'Maldives (ގުޖޭއްރާ ޔާއްރިހޫމްޖ)','ML'=>'Mali','FK'=>'Malouines (Îles) (Falkland Islands)','MT'=>'Malte (Malta)','IM'=>'Man (Île) (Isle of Man)','MP'=>'Mariannes du Nord (Commonwealth des îles)','MA'=>'Maroc (المغرب)','MH'=>'Marshall (Îles) (Marshall Islands)','MQ'=>'Martinique','MU'=>'Maurice (Île) (Mauritius)','MR'=>'Mauritanie (موريتانيا)','YT'=>'Mayotte','MX'=>'Mexique (México)','FM'=>'Micronésie (Micronesia)','MD'=>'Moldavie (Moldova)','MC'=>'Monaco','MN'=>'Mongolie (Монгол Улс)','ME'=>'Monténégro (Црна Гора)','MS'=>'Montserrat','MZ'=>'Mozambique (Moçambique)','MM'=>'Myanmar (Birmanie) (Myanmar (Burma))','NA'=>'Namibie (Namibia)','NR'=>'Nauru (Naoero)','NP'=>'Népal (नेपाल)','NI'=>'Nicaragua','NE'=>'Niger','NG'=>'Nigéria (Nigeria)','NU'=>'Niue','NF'=>'Norfolk (Île de) (Norfolk Island)','NO'=>'Norvège (Norge)','NC'=>'Nouvelle-Calédonie (New Caledonia)','NZ'=>'Nouvelle-Zélande (New Zealand)','OM'=>'Oman (عمان)','UG'=>'Ouganda (Uganda)','UZ'=>'Ouzbékistan (O\'zbekiston)','PK'=>'Pakistan (پاکستان)','PW'=>'Palau (Belau)','PA'=>'Panama (Panamá)','PG'=>'Papouasie-Nouvelle Guinée (Papua New Guinea)','PY'=>'Paraguay','NL'=>'Pays-Bas (Nederland)','PE'=>'Pérou (Perú)','PH'=>'Philippines (Pilipinas)','PN'=>'Pitcairn (Île) (Pitcairn)','PL'=>'Pologne (Polska)','PF'=>'Polynésie française (French Polynesia)','PR'=>'Porto Rico (Puerto Rico)','PT'=>'Portugal','QA'=>'Qatar (قطر)','CF'=>'République Centrafricaine','DO'=>'République Dominicaine (Dominican Republic)','CZ'=>'République Tchèque (Česko)','RE'=>'Réunion (Île de la) (Reunion)','RO'=>'Roumanie (România)','GB'=>'Royaume-Uni (United Kingdom)','RU'=>'Russie (Россия)','RW'=>'Rwanda','EH'=>'Sahara oriental (الصحراء الغربية)','SH'=>'Sainte-Hélène (Saint Helena)','LC'=>'Sainte-Lucie (Saint Lucia)','KN'=>'Saint-Kitts-et-Nevis (Saint Kitts and Nevis)','SM'=>'Saint-Marin (San Marino)','PM'=>'Saint-Pierre-et-Miquelon (Saint Pierre and Miquelon)','VC'=>'Saint-Vincent et les Grenadines','SV'=>'Salvador (El Salvador)','WS'=>'Samoa','AS'=>'Samoa américaines (American Samoa)','ST'=>'São Tomé et Príncipe (São Tomé and Príncipe)','SN'=>'Sénégal','RS'=>'Serbie (Србија)','CS'=>'Serbie et Monténégro (Србија и Црна Гора)','SC'=>'Seychelles','SL'=>'Sierra Leone','SG'=>'Singapour (Singapura)','SK'=>'Slovaquie (Slovensko)','SI'=>'Slovénie (Slovenija)','SB'=>'Solomon (Îles) (Solomon Islands)','SO'=>'Somalie (Soomaaliya)','SD'=>'Soudan (السودان)','LK'=>'Sri Lanka','SE'=>'Suède (Sverige)','CH'=>'Suisse (Schweiz)','SR'=>'Surinam (Suriname)','SJ'=>'Svalbard et Jan Mayen (Svalbard and Jan Mayen)','SZ'=>'Swaziland','SY'=>'Syrie (سوريا)','TJ'=>'Tadjikistan (Тоҷикистон)','TW'=>'Taïwan (台灣)','TZ'=>'Tanzanie (Tanzania)','TD'=>'Tchad','IO'=>'Territoires britanniques de l\'Océan Indien','TF'=>'Territoires d’Outre-mer (France)','PS'=>'Territoires palestiniens (Palestinian Territories)','TH'=>'Thaïlande (ราชอาณาจักรไทย)','TL'=>'Timor oriental (Timor-Leste)','TG'=>'Togo','TK'=>'Tokelau','TO'=>'Tonga','TT'=>'Trinidad et Tobago (Trinidad and Tobago)','TN'=>'Tunisie (تونس)','TM'=>'Turkménistan (Türkmenistan)','TC'=>'Turks et Caïcos (Îles) (Turks and Caicos Islands)','TR'=>'Turquie (Türkiye)','TV'=>'Tuvalu','UA'=>'Ukraine (Україна)','UY'=>'Uruguay','VU'=>'Vanuatu','VA'=>'Vatican (Città del Vaticano)','VE'=>'Venezuela','VI'=>'Vierges américaines (Îles) (Virgin Islands, U.S.)','VN'=>'Vietnam (Việt Nam)','WF'=>'Wallis et Futuna (Wallis and Futuna)','YE'=>'Yémen (اليمن)','ZM'=>'Zambie (Zambia)','ZW'=>'Zimbabwe');} ?><?php class PhoneCountryCodeSelectField extends SelectField {public function __construct($name, $label, $properties=null) {parent::__construct($name, $label, array(), $properties);$this->setValues(self::$codes_en);}private static $codes_en = array('United States (+1)','Canada (+1)','United Kingdom (+44)','Germany (+49)','France (+33)','Afghanistan (+93)','Albania (+355)','Algeria (+213)','American Samoa (+684)','Andorra (+376)','Angola (+244)','Anguilla (+1)','Antigua (+1)','Argentina (+54)','Armenia (+374)','Aruba (+297)','Ascension Island (+247)','Australia (+61)','Australian External Terr. (+672)','Austria (+430)','Azerbaijan (+994)','British Virgin Island (+284)','Bahamas (+1)','Bahrain (+973)','Bangladesh (+880)','Barbados (+1)','Belarus (+375)','Belgium (+32)','Belize (+501)','Benin (+229)','Bermuda (+1)','Bhutan (+975)','Bolivia (+591)','Bosnia (+387)','Botswana (+267)','Bourkina Fasso (+226)','Brazil (+550)','Brunei (+673)','Bulgaria (+359)','Burundi (+257)','Cambodia (+855)','Cameroon (+237)','Canada (+1)','Cape Verde (+238)','Cayman Islands (+1)','Central African Rep. (+236)','Chad Republic (+235)','Chile (+56)','China (+86)','Colombia (+57)','Comoros (+269)','Congo Dem. Republic (+243)','Congo Republic (+242)','Cook Islands (+682)','Costa Rica (+506)','Croatia (+385)','Cuba (+53)','Cyprus (+357)','Czech Republic (+420)','Denmark (+45)','Diego Garcia (+246)','Djibouti (+253)','Dominica (+1)','Dominican Republic (+1)','Ecuador (+593)','Egypt (+20)','El Salvador (+503)','Equatorial Guinea (+240)','Eritrea (+291)','Estonia (+372)','Ethiopia (+251)','Falkland Islands (+500)','Faroe Islands (+298)','Fiji (+679)','Finland (+358)','French Antilles (+596)','French Guiana (+594)','French Polynesia (+689)','Gabon (+241)','Gambia (+220)','Georgia (+995)','Ghana (+233)','Gibraltar (+350)','Greece (+30)','Greenland (+299)','Grenada (+473)','Guadeloupe (+590)','Guantanamo (+53)','Guatemala (+502)','Guinea (+224)','Guinea-Bissau (+245)','Guyana (+592)','Haiti (+509)','Honduras (+504)','Hong Kong (+852)','Hungary (+36)','Iceland (+354)','India (+91)','Indonesia (+62)','Iran (+98)','Iraq (+964)','Ireland (+353)','Israel (+972)','Italy (+39)','Ivory Coast (+225)','Jamaica (+1)','Japan (+81)','Jordan (+962)','Kazakhstan (+7)','Kenya (+254)','Kiribati (+686)','Korea (North) (+850)','Korea (South) (+82)','Kuwait (+965)','Kyrghyzstan (+7)','Laos (+856)','Latvia (+371)','Lebanon (+961)','Lesotho (+266)','Liberia (+231)','Libya (+218)','Lithuania (+370)','Luxembourg (+352)','Macao (+853)','Macedonia (+389)','Madagascar (+261)','Malawi (+265)','Malaysia (+60)','Maldives Rep. (+960)','Mali Rep. (+223)','Malta Rep. (+356)','Marshall Islands (+692)','Mauritania (+222)','Mauritius (+230)','Mayotte (+269)','Mexico (+52)','Micronesia (+691)','Moldova (+373)','Monaco (+377)','Mongolia (+976)','Montserrat (+1)','Morocco (+212)','Mozambique (+258)','Myanmar (+95)','Namibia (+264)','Nauru (+674)','Nepal (+977)','Netherlands (+31)','Netherlands Antilles (+599)','New Caledonia (+687)','New Zealand (+64)','Nicaragua (+505)','Niger Rep. (+227)','Nigeria (+234)','Niue (+683)','Norway (+470)','Ocean Atlantic East (+871)','Ocean Atlantic West (+874)','Ocean Indian (+873)','Ocean Pacific (+872)','Oman (+968)','Pakistan (+92)','Palau (+680)','Panama (+507)','Papua New Guinea (+675)','Paraguay (+595)','Peru (+51)','Philippines (+63)','Poland (+480)','Portugal (+351)','Qatar (+974)','Reunion Islands (+262)','Romania (+40)','Russian Fed. (+7)','Rwanda (+250)','Saipan (+670)','San Marino (+378)','Sao Tome (+239)','Saudi Arabia (+966)','Senegal (+221)','Seychelles (+248)','Sierra Leone (+232)','Singapore (+65)','Slovakia (+421)','Slovenia (+386)','Solomon Islands (+677)','Somalia (+252)','South Africa (+27)','Spain (+34)','Sri Lanka (+94)','St. Helena (+290)','St. Kitts And Nevis (+1)','St. Lucia (+1)','St. Pierre (+508)','St. Vincent And The Grenadines (+1)','Sudan (+249)','Suriname (+597)','Swaziland (+268)','Sweden (+46)','Switzerland (+41)','Syrian Arabrep (+963)','Taiwan (+886)','Tajikistan (+7)','Tanzania (+255)','Thailand (+66)','Togo (+228)','Tokelau (+690)','Tonga (+676)','Trinidad (+1)','Tunisia (+216)','Turkey (+900)','Turkmenistan (+933)','Turks &amp; Caicos (+649)','Tuvalu (+688)','Uganda (+256)','Ukraine (+380)','United Arab Emirates (+971)','Uruguay (+598)','Uzbekistan (+7)','Vanuatu (+678)','Venezuela (+58)','Vietnam (+84)','Wallis And Futuna Islands (+681)','Western Samoa (+685)','Yemen (+967)','Yugoslavia (+381)','Zambia (+260)','Zimbabwe (+263)');} ?><?php error_reporting(E_ALL);if (!defined('FORMBUILDER_URL')) {define('FORMBUILDER_URL', 'http://'.$_SERVER['SERVER_NAME'].'/'.str_replace(str_replace('\\', '/', $_SERVER['DOCUMENT_ROOT']), '', str_replace('\\', '/', __FILE__)));}function ouptutVar($var) {if ($var === false) return 'false';if ($var === true) return 'true';if ($var === 0) return '0';if ($var === '0') return '0';if ($var === null) return '';return htmlspecialchars("$var");}function escapeString($string) {$string = str_replace('\\', '\\\\', $string);$string = str_replace('"', '\"', $string);return '"'.$string.'"';}function varToJs($var, $arrayAsObject=false) {if (!isset($var)) return 'null';if ($var === null) return 'null';if ($var === true) return 'true';if ($var === false) return 'false';if (is_numeric($var))return $var;if (is_array($var)) {$i = 0;if ($arrayAsObject) {$r = '{';foreach ($var as $k => $v) {$r .= ($i++ > 0 ? ',' : '') . '"' . $k . '":' . varToJs($v, $arrayAsObject);}return $r . '}';}$r = '[';foreach ($var as $v) {$r .= ($i++ > 0 ? ',' : '') . varToJs($v, $arrayAsObject);}return $r . ']';}return escapeString($var);}function deprecated($what, $where) {trigger_error($what.' is deprecated, called in '.$where['file'].' line '.$where['line'].'; ', E_USER_DEPRECATED);}if (!function_exists('whoCalledMe')) {function whoCalledMe() {$traces = debug_backtrace();if (sizeof($traces) > 2) {$r = $traces[2];$r['file'] = $traces[1]['file'];$r['line'] = $traces[1]['line'];return $r;}else {return array('file' => $traces[1]['file'],'line' => $traces[1]['line']);}}} ?>