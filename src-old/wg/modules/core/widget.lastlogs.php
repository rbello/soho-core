<?phpclass LastLogsWidget implements Soho_Widget {		protected $config = array();		public function setConfig($config) {		$this->config = array_merge($this->config, $config);	}		/**	 * @return string	 */	public function html() {		require_once WG::base('inc/HTMLPurifier.standalone.php');		$html = '';		$purifier = new HTMLPurifier();		$html .= '';		WG::lib('LogStackParser.php');		$parser = new LogStackParser(4, true);		$stacks = $parser->data;		foreach ($stacks as $stack) {			$html .= '<div>';			$html .= '<img src="data/team/'.($stack['user'] ? $stack['user']->thumb : 'default.png').'" />';			$html .= '<p>'.htmlspecialchars($stack['title']).'</p><ol>';			$topics = array();			foreach ($stack['logs'] as $log) {				if ($log->target_type == 'Activity_Message') {					$ct = $purifier->purify($log->log);					preg_match_all(						'/<blockquote>(.*?)<\/blockquote>/',						$ct,						$content					);					if (is_array($content[1]) && sizeof($content[1]) > 0) {						$content = '<blockquote>'.$content[1][0].'</blockquote>';					}					else {						$content = $ct;					}					if (!isset($topics[$log->target_name])) {						$topics[$log->target_name] = array();					}					array_unshift($topics[$log->target_name], '<li>'.$content.' <small>'.WG::rdate($log->creation).'</small></li>');				}				else {					$html .= '<li>'.$purifier->purify($log->log).' <small>'.WG::rdate($log->creation).'</small></li>';				}			}			foreach ($topics as $name => $topic) {				$html .= '<li>About <b>' . htmlspecialchars($name) . '</b></li>';				$html .= implode('', $topic);			}			$html .= '</ol></div>';		}		return $html;	}}?>